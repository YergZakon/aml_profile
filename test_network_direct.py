#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä—è–º—É—é
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'aml-backend'))

from datetime import datetime
from aml_integration_system import AMLDatabaseManager
from network_profile_afm import NetworkProfile

def test_network_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_manager = AMLDatabaseManager("aml-backend/aml_system_e840b2937714940f.db")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    network_profile = NetworkProfile(db_manager)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã
    cursor = db_manager.get_db_cursor()
    cursor.execute("SELECT * FROM transactions LIMIT 10")
    transactions = cursor.fetchall()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    if not transactions:
        print("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    transaction = dict(transactions[0])
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {transaction['transaction_id']}")
    print(f"   –û—Ç: {transaction['sender_name']} ({transaction['sender_id']})")
    print(f"   –ö–æ–º—É: {transaction['beneficiary_name']} ({transaction['beneficiary_id']})")
    print(f"   –°—É–º–º–∞: {transaction['amount_kzt']:,.0f} KZT")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    sender_id = transaction['sender_id']
    beneficiary_id = transaction['beneficiary_id']
    
    cursor.execute("""
        SELECT * FROM transactions 
        WHERE sender_id IN (?, ?) OR beneficiary_id IN (?, ?)
        ORDER BY transaction_date DESC
        LIMIT 50
    """, (sender_id, beneficiary_id, sender_id, beneficiary_id))
    
    history = [dict(row) for row in cursor.fetchall()]
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(history)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑
    result = network_profile.analyze_transaction_network(transaction, history)
    
    print("\nüï∏Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ï–¢–ï–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
    print(f"   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è: {'–î–ê' if result['is_suspicious'] else '–ù–ï–¢'}")
    print(f"   –†–∏—Å–∫-—Å–∫–æ—Ä: {result['risk_score']:.1f}/10")
    print(f"   –°—Ö–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã: {len(result.get('schemes_found', []))}")
    
    if result.get('suspicious_reasons'):
        print("   –ü—Ä–∏—á–∏–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for reason in result['suspicious_reasons']:
            print(f"     ‚Ä¢ {reason}")
    
    if result.get('detected_schemes'):
        print(f"\nüéØ –î–ï–¢–ê–õ–ò –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–• –°–•–ï–ú ({len(result['detected_schemes'])}):")
        for i, scheme in enumerate(result['detected_schemes'], 1):
            print(f"   {i}. {scheme['type']} (—Ä–∏—Å–∫: {scheme['risk_score']:.1f})")
            print(f"      {scheme['description']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
    stats = result.get('network_stats', {})
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ò:")
    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('total_participants', 0)}")
    print(f"   –°–≤—è–∑–µ–π: {stats.get('total_connections', 0)}")
    print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {stats.get('total_amount', 0):,.0f} KZT")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    cursor.execute("SELECT COUNT(*) FROM network_connections")
    connections_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM detected_schemes")
    schemes_count = cursor.fetchone()[0]
    
    print(f"\nüóÑÔ∏è –î–ê–ù–ù–´–ï –í –ë–ê–ó–ï:")
    print(f"   network_connections: {connections_count} –∑–∞–ø–∏—Å–µ–π")
    print(f"   detected_schemes: {schemes_count} –∑–∞–ø–∏—Å–µ–π")
    
    if connections_count == 0 and schemes_count == 0:
        print("‚ùå –°–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        print("   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    return result

if __name__ == "__main__":
    test_network_analysis() 