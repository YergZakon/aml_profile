import sqlite3
import time
import os
import psutil
from datetime import datetime

def analyze_single_client_realistic(client_id, db_path):
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ë–î"""
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    try:
        start_time = time.time()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT * FROM customer_profiles 
            WHERE customer_id = ?
        ''', (client_id,))
        client_profile = cursor.fetchone()
        
        if not client_profile:
            return None
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT * FROM transactions 
            WHERE sender_id = ? OR beneficiary_id = ?
            ORDER BY transaction_date DESC
        ''', (client_id, client_id))
        transactions = cursor.fetchall()
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        total_sent = 0
        total_received = 0
        suspicious_count = 0
        countries = set()
        counterparties = set()
        
        for tx in transactions:
            if tx['sender_id'] == client_id:
                total_sent += tx['amount_kzt']
            else:
                total_received += tx['amount_kzt']
                
            if tx['is_suspicious']:
                suspicious_count += 1
                
            # –°–æ–±–∏—Ä–∞–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—é - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º
            sender_country = tx['sender_country'] if 'sender_country' in tx.keys() else 'KZ'
            beneficiary_country = tx['beneficiary_country'] if 'beneficiary_country' in tx.keys() else 'KZ'
            countries.add(sender_country)
            countries.add(beneficiary_country)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            if tx['sender_id'] == client_id:
                counterparties.add(tx['beneficiary_id'])
            else:
                counterparties.add(tx['sender_id'])
        
        # 4. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ —Å–≤—è–∑–∏
        cursor.execute('''
            SELECT * FROM network_connections 
            WHERE participant_1 = ? OR participant_2 = ?
            LIMIT 100
        ''', (client_id, client_id))
        network_connections = cursor.fetchall()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        cursor.execute('''
            SELECT COUNT(*) as alert_count 
            FROM alerts 
            WHERE client_id = ? AND created_at >= date('now', '-90 days')
        ''', (client_id,))
        recent_alerts_row = cursor.fetchone()
        recent_alerts = recent_alerts_row['alert_count'] if recent_alerts_row else 0
        
        # 6. –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
        base_risk = client_profile['overall_risk_score'] if client_profile['overall_risk_score'] else 0
        
        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
        geo_risk = len([c for c in countries if c not in ['KZ', 'RU', 'CN']]) * 2
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫
        tx_risk = 0
        if len(transactions) > 0:
            avg_amount = (total_sent + total_received) / len(transactions)
            if avg_amount > 5000000:  # > 5 –º–ª–Ω —Ç–µ–Ω–≥–µ
                tx_risk += 3
        
        # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
        behavior_risk = 0
        if suspicious_count > 0:
            behavior_risk = min(suspicious_count * 2, 10)
        
        # –°–µ—Ç–µ–≤–æ–π —Ä–∏—Å–∫
        network_risk = min(len(network_connections) * 0.5, 5)
        
        # –û–±—â–∏–π —Ä–∏—Å–∫
        total_risk_score = base_risk + geo_risk + tx_risk + behavior_risk + network_risk
        
        end_time = time.time()
        analysis_time = end_time - start_time
        
        conn.close()
        
        return {
            'client_id': client_id,
            'analysis_time': analysis_time,
            'total_risk_score': total_risk_score,
            'transactions_count': len(transactions),
            'network_connections': len(network_connections),
            'countries_count': len(countries),
            'counterparties_count': len(counterparties),
            'is_suspicious': total_risk_score > 10,
            'recent_alerts': recent_alerts
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        conn.close()
        return None

def get_client_list(db_path, limit=1000):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT customer_id FROM customer_profiles 
        ORDER BY overall_risk_score DESC
        LIMIT ?
    ''', (limit,))
    
    client_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    return client_ids

def test_realistic_performance():
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AML-–ê–ù–ê–õ–ò–ó–ê")
    print("=" * 65)
    
    db_path = 'aml_system.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_count = psutil.cpu_count()
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    print(f"üíª –°–∏—Å—Ç–µ–º–∞:")
    print(f"   CPU —è–¥–µ—Ä: {cpu_count}")
    print(f"   RAM: {memory_gb:.1f} GB")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    print(f"\nüìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    client_ids = get_client_list(db_path, 1000)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(client_ids)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫
    test_sizes = [1, 5, 10, 25, 50, 100]
    
    results = []
    
    for test_size in test_sizes:
        if test_size > len(client_ids):
            continue
            
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print("-" * 50)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö N –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∏—Å–∫–æ–º
        test_clients = client_ids[:test_size]
        
        start_time = time.time()
        successful_analyses = 0
        total_transactions = 0
        total_connections = 0
        suspicious_clients = 0
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        initial_memory = psutil.virtual_memory().percent
        
        for i, client_id in enumerate(test_clients, 1):
            if i <= 5 or i % 10 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                print(f"  üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {i}/{test_size}...", end=" ")
            
            result = analyze_single_client_realistic(client_id, db_path)
            if result:
                successful_analyses += 1
                total_transactions += result['transactions_count']
                total_connections += result['network_connections']
                if result['is_suspicious']:
                    suspicious_clients += 1
                    
                if i <= 5 or i % 10 == 0:
                    print(f"‚úÖ ({result['analysis_time']:.3f}—Å, —Ä–∏—Å–∫: {result['total_risk_score']:.1f})")
            else:
                if i <= 5 or i % 10 == 0:
                    print("‚ùå")
        
        end_time = time.time()
        total_time = end_time - start_time
        final_memory = psutil.virtual_memory().percent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_data = {
            'test_size': test_size,
            'total_time': total_time,
            'avg_time_per_client': total_time / test_size,
            'successful_analyses': successful_analyses,
            'total_transactions': total_transactions,
            'total_connections': total_connections,
            'suspicious_clients': suspicious_clients,
            'memory_usage_change': final_memory - initial_memory
        }
        results.append(result_data)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚ö° –í—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {total_time/test_size:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {successful_analyses}/{test_size}")
        print(f"  üí∏ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions:,}")
        print(f"  üï∏Ô∏è  –°–µ—Ç–µ–≤—ã—Ö —Å–≤—è–∑–µ–π: {total_connections:,}")
        print(f"  üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {suspicious_clients}")
        print(f"  üíæ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {final_memory - initial_memory:+.1f}%")
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã
        if test_size >= 10 and successful_analyses > 0:
            time_for_1000 = (total_time / successful_analyses) * 1000
            time_for_all_clients = (total_time / successful_analyses) * len(client_ids)
            
            print(f"\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã:")
            print(f"  üìà 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤: {time_for_1000:.0f} —Å–µ–∫ ({time_for_1000/60:.1f} –º–∏–Ω)")
            print(f"  üìà –í—Å–µ {len(client_ids)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {time_for_all_clients:.0f} —Å–µ–∫ ({time_for_all_clients/60:.1f} –º–∏–Ω)")
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–µ–π
            parallel_time_1000 = time_for_1000 / cpu_count
            parallel_time_all = time_for_all_clients / cpu_count
            
            print(f"\nüöÄ –° –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞ {cpu_count} —è–¥—Ä–∞—Ö:")
            print(f"  ‚ö° 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤: {parallel_time_1000:.0f} —Å–µ–∫ ({parallel_time_1000/60:.1f} –º–∏–Ω)")
            print(f"  ‚ö° –í—Å–µ {len(client_ids)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {parallel_time_all:.0f} —Å–µ–∫ ({parallel_time_all/60:.1f} –º–∏–Ω)")
            
            # –£—Å–∫–æ—Ä–µ–Ω–∏–µ
            speedup = time_for_1000 / parallel_time_1000
            print(f"  üéØ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüìà –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 50)
    
    successful_results = [r for r in results if r['successful_analyses'] > 0]
    
    if len(successful_results) >= 2:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
        large_result = successful_results[-1]
        small_result = successful_results[0]
        
        scaling_factor = large_result['test_size'] / small_result['test_size']
        time_scaling = large_result['avg_time_per_client'] / small_result['avg_time_per_client']
        
        print(f"üìä –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:")
        print(f"  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω –≤ {scaling_factor:.1f} —Ä–∞–∑")
        print(f"  –í—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ {time_scaling:.2f} —Ä–∞–∑")
        
        if time_scaling < 1.2:
            print("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å!")
        elif time_scaling < 2.0:
            print("  ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("  ‚ùå –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
        best_result = min(successful_results, key=lambda x: x['avg_time_per_client'])
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"  üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {best_result['test_size']} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print(f"  ‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {min(cpu_count, 20)}")
        print(f"  üíæ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–∞–º—è—Ç–∏: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if max(r['memory_usage_change'] for r in results) > 10 else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}")
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏")

if __name__ == "__main__":
    test_realistic_performance() 