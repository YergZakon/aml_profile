#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Ö–æ–¥—è—â–∏—Ö JSON —Ñ–∞–π–ª–æ–≤
"""

import json
import sys
from pathlib import Path

def analyze_json_structure(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìÅ –§–∞–π–ª: {file_path}")
        print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
        
        if isinstance(data, list):
            print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data):,}")
            if len(data) > 0:
                print(f"üîç –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {type(data[0])}")
                if isinstance(data[0], dict):
                    print(f"üóùÔ∏è  –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:")
                    for i, key in enumerate(data[0].keys()):
                        if i < 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
                            value = data[0][key]
                            value_type = type(value).__name__
                            if isinstance(value, str) and len(value) > 50:
                                value_preview = value[:50] + "..."
                            else:
                                value_preview = str(value)
                            print(f"   ‚Ä¢ {key}: {value_preview} ({value_type})")
                        elif i == 10:
                            print(f"   ... –∏ –µ—â–µ {len(data[0].keys()) - 10} –∫–ª—é—á–µ–π")
                            break
                            
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è AML
                print(f"\nüîç –ê–ù–ê–õ–ò–ó –î–õ–Ø AML:")
                first_item = data[0]
                
                # –ò—â–µ–º –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                transaction_fields = []
                for key in first_item.keys():
                    if any(keyword in key.lower() for keyword in ['transaction', 'trans', 'amount', 'sum', 'money', 'tenge']):
                        transaction_fields.append(key)
                
                if transaction_fields:
                    print(f"üí∞ –ü–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transaction_fields}")
                
                # –ò—â–µ–º –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
                client_fields = []
                for key in first_item.keys():
                    if any(keyword in key.lower() for keyword in ['member', 'client', 'customer', 'name', 'id']):
                        client_fields.append(key)
                
                if client_fields:
                    print(f"üë§ –ü–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {client_fields}")
                
                # –ò—â–µ–º –ø–æ–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                suspicious_fields = []
                for key in first_item.keys():
                    if any(keyword in key.lower() for keyword in ['susp', 'suspicious', 'risk', 'alert']):
                        suspicious_fields.append(key)
                
                if suspicious_fields:
                    print(f"üö® –ü–æ–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {suspicious_fields}")
                    
        elif isinstance(data, dict):
            print(f"üóùÔ∏è  –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys())}")
            
        return data
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
    else:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ uploads
        uploads_dir = Path("uploads")
        if uploads_dir.exists():
            json_files = list(uploads_dir.glob("*.json"))
            if json_files:
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
                for json_file in json_files[:3]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    print("\n" + "="*60)
                    analyze_json_structure(json_file)
            else:
                print("‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ uploads")
        else:
            print("‚ùå –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        # –¢–∞–∫–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = Path("test_transactions.json")
        if test_file.exists():
            print("\n" + "="*60)
            print("üìã –¢–ï–°–¢–û–í–´–ô –§–ê–ô–õ:")
            analyze_json_structure(test_file) 