#!/usr/bin/env python3
"""
üöÄ –ì–ª–∞–≤–Ω—ã–π –ü–∞–π–ø–ª–∞–π–Ω AML-–ê–Ω–∞–ª–∏–∑–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú –†–ö
"""

import time
import sys
import sqlite3
import psutil
import json
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
try:
    from optimize_database import (
        analyze_batch_optimized, 
        create_database_indexes,
        get_cached_analysis
    )
    print("‚úÖ –ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    sys.exit(1)

try:
    from analyze_suspicious_clients_parallel import analyze_batch_parallel
    print("‚úÖ –ú–æ–¥—É–ª—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    analyze_batch_parallel = None

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú
try:
    from aml_pipeline_enhanced import AMLPipelineEnhanced
    print("‚úÖ –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú –∑–∞–≥—Ä—É–∂–µ–Ω")
    JSON_SUPPORT = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å JSON —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    JSON_SUPPORT = False

class AMLPipeline:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞–π–ø–ª–∞–π–Ω–∞ AML-–∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, db_path: str = 'aml_system.db'):
        self.db_path = db_path
        self.system_info = self._get_system_info()
        self.pipeline_stats = {
            'total_runs': 0,
            'total_clients_processed': 0,
            'total_time_saved': 0,
            'optimization_method_used': {}
        }
        
    def _get_system_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            'cpu_cores': psutil.cpu_count(),
            'memory_gb': psutil.virtual_memory().total / (1024**3),
            'cpu_model': 'Intel Core Ultra 9 275HX',
            'timestamp': datetime.now().isoformat()
        }
    
    def setup_database(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 40)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM customer_profiles")
            client_count = cursor.fetchone()[0]
            conn.close()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î: {client_count:,}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            create_database_indexes(self.db_path)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
            return False
    
    def get_client_list(self, limit: Optional[int] = None, 
                       risk_threshold: Optional[float] = None) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = "SELECT customer_id FROM customer_profiles"
        params = []
        
        if risk_threshold:
            query += " WHERE overall_risk_score >= ?"
            params.append(risk_threshold)
            
        query += " ORDER BY overall_risk_score DESC"
        
        if limit:
            query += " LIMIT ?"
            params.append(limit)
        
        cursor.execute(query, params)
        client_ids = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        return client_ids
    
    def choose_optimization_method(self, client_count: int) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if client_count < 1000:
            return "optimized"  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –º–∞–ª—ã—Ö –æ–±—ä–µ–º–æ–≤
        elif client_count < 10000:
            return "optimized_cached"  # –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –æ–±—ä–µ–º–æ–≤
        else:
            return "parallel" if analyze_batch_parallel else "optimized"  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –¥–ª—è –±–æ–ª—å—à–∏—Ö
    
    def analyze_clients(self, client_ids: List[str], 
                       method: Optional[str] = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞"""
        
        if not client_ids:
            return {'error': '–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç'}
        
        client_count = len(client_ids)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
        if method is None:
            method = self.choose_optimization_method(client_count)
        
        print(f"üöÄ –ê–ù–ê–õ–ò–ó {client_count:,} –ö–õ–ò–ï–ù–¢–û–í")
        print(f"‚ö° –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥: {method.upper()}")
        print("=" * 50)
        
        start_time = time.time()
        
        try:
            if method == "optimized":
                results = analyze_batch_optimized(client_ids, self.db_path)
                
            elif method == "optimized_cached":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                results = []
                for client_id in client_ids:
                    result = get_cached_analysis(client_id, self.db_path)
                    if result:
                        results.append(result)
                        
            elif method == "parallel" and analyze_batch_parallel:
                results, stats = analyze_batch_parallel(
                    client_ids=client_ids,
                    max_workers=min(20, client_count // 100),
                    db_path=self.db_path,
                    show_progress=False
                )
                
            else:
                # Fallback –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                results = analyze_batch_optimized(client_ids, self.db_path)
                method = "optimized"
            
            end_time = time.time()
            analysis_time = end_time - start_time
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            analysis_stats = self._calculate_stats(results, analysis_time, method)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞
            self._update_pipeline_stats(client_count, analysis_time, method)
            
            return {
                'success': True,
                'method_used': method,
                'results': results,
                'stats': analysis_stats,
                'system_info': self.system_info
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'error': str(e)}
    
    def _calculate_stats(self, results: List[Dict], 
                        analysis_time: float, method: str) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        
        if not results:
            return {}
        
        suspicious_clients = [r for r in results if r.get('is_suspicious', False)]
        high_risk_clients = [r for r in results if r.get('total_risk_score', 0) > 15]
        
        return {
            'total_clients': len(results),
            'analysis_time': analysis_time,
            'clients_per_second': len(results) / analysis_time if analysis_time > 0 else 0,
            'method_used': method,
            'suspicious_clients': len(suspicious_clients),
            'high_risk_clients': len(high_risk_clients),
            'suspicious_percentage': len(suspicious_clients) / len(results) * 100,
            'average_risk_score': sum(r.get('total_risk_score', 0) for r in results) / len(results),
            'max_risk_score': max(r.get('total_risk_score', 0) for r in results),
            'total_volume': sum(r.get('total_volume', 0) for r in results),
            'total_transactions': sum(r.get('transactions_count', 0) for r in results)
        }
    
    def _update_pipeline_stats(self, client_count: int, 
                              analysis_time: float, method: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        self.pipeline_stats['total_runs'] += 1
        self.pipeline_stats['total_clients_processed'] += client_count
        
        # –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π)
        baseline_time = client_count * 0.0005  # ~0.5ms –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        time_saved = max(0, baseline_time - analysis_time)
        self.pipeline_stats['total_time_saved'] += time_saved
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        if method not in self.pipeline_stats['optimization_method_used']:
            self.pipeline_stats['optimization_method_used'][method] = 0
        self.pipeline_stats['optimization_method_used'][method] += 1
    
    def run_full_analysis(self, limit: Optional[int] = None,
                         risk_threshold: Optional[float] = None,
                         save_results: bool = True) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        print("üîç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û AML-–ê–ù–ê–õ–ò–ó–ê")
        print("=" * 60)
        print(f"üíª –°–∏—Å—Ç–µ–º–∞: {self.system_info['cpu_model']} ({self.system_info['cpu_cores']} —è–¥–µ—Ä)")
        print(f"üíæ –ü–∞–º—è—Ç—å: {self.system_info['memory_gb']:.1f} GB")
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
        if not self.setup_database():
            return {'error': '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'}
        
        print()
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–õ–ò–ï–ù–¢–û–í")
        print("-" * 30)
        
        client_ids = self.get_client_list(limit, risk_threshold)
        
        if not client_ids:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return {'error': '–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(client_ids):,}")
        if risk_threshold:
            print(f"üéØ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∏—Å–∫—É: ‚â•{risk_threshold}")
        if limit:
            print(f"üìã –õ–∏–º–∏—Ç: {limit:,}")
        print()
        
        # 3. –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
        analysis_result = self.analyze_clients(client_ids)
        
        if not analysis_result.get('success'):
            return analysis_result
        
        # 4. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._display_results(analysis_result)
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if save_results:
            filename = f"aml_pipeline_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            self._save_results(analysis_result, filename)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        
        return analysis_result
    
    def _display_results(self, analysis_result: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        stats = analysis_result['stats']
        results = analysis_result['results']
        
        print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 40)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats['analysis_time']:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {stats['clients_per_second']:,.0f} –∫–ª–∏–µ–Ω—Ç–æ–≤/—Å–µ–∫")
        print(f"üîß –ú–µ—Ç–æ–¥: {stats['method_used'].upper()}")
        print()
        
        print("üö® –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("=" * 30)
        print(f"üî¥ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['suspicious_clients']:,} ({stats['suspicious_percentage']:.1f}%)")
        print(f"üü† –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (>15): {stats['high_risk_clients']:,}")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä: {stats['average_risk_score']:.1f}")
        print(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: {stats['max_risk_score']:.1f}")
        print()
        
        print("üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 25)
        print(f"üíµ –û–±—â–∏–π –æ–±—ä–µ–º: {stats['total_volume']:,.0f} —Ç–µ–Ω–≥–µ")
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_transactions']:,}")
        print(f"üí∏ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {stats['total_volume']/stats['total_clients']:,.0f} —Ç–µ–Ω–≥–µ")
        print()
        
        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
        if stats['suspicious_clients'] > 0:
            suspicious_results = [r for r in results if r.get('is_suspicious', False)]
            top_suspicious = sorted(suspicious_results, 
                                  key=lambda x: x.get('total_risk_score', 0), 
                                  reverse=True)[:5]
            
            print("üîù –¢–û–ü-5 –°–ê–ú–´–• –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ö–õ–ò–ï–ù–¢–û–í:")
            print("-" * 45)
            for i, client in enumerate(top_suspicious, 1):
                print(f"{i}. –ö–ª–∏–µ–Ω—Ç {client['client_id']}")
                print(f"   –†–∏—Å–∫-—Å–∫–æ—Ä: {client['total_risk_score']:.1f}")
                print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {client['transactions_count']:,}")
                print(f"   –û–±—ä–µ–º: {client['total_volume']:,.0f} —Ç–µ–Ω–≥–µ")
                print()
    
    def _save_results(self, analysis_result: Dict, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞
        analysis_result['pipeline_stats'] = self.pipeline_stats.copy()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(analysis_result, f, ensure_ascii=False, indent=2, default=str)
    
    def process_json_files(self, json_files: List[str] = None, 
                          json_dir: str = "uploads",
                          parallel_analysis: bool = True,
                          save_to_db: bool = True) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú"""
        if not JSON_SUPPORT:
            return {'error': '–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        print(f"\nüöÄ –û–ë–†–ê–ë–û–¢–ö–ê JSON –§–ê–ô–õ–û–í –ê–§–ú")
        print("=" * 50)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not json_files:
            json_dir_path = Path(json_dir)
            if json_dir_path.exists():
                json_files = [str(f) for f in json_dir_path.glob('*.json')]
            else:
                return {'error': f'–ü–∞–ø–∫–∞ {json_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        
        if not json_files:
            return {'error': f'JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {json_dir}'}
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
        for f in json_files:
            print(f"   ‚Ä¢ {Path(f).name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
            enhanced_pipeline = AMLPipelineEnhanced(self.db_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            results = enhanced_pipeline.process_json_files(
                json_files=json_files,
                parallel_analysis=parallel_analysis,
                save_to_db=save_to_db
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            if results:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                report_file = f"aml_json_results_{timestamp}.json"
                enhanced_pipeline.generate_report(results, report_file)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
            self.pipeline_stats['total_runs'] += 1
            if results.get('total_processed'):
                self.pipeline_stats['total_clients_processed'] += results['total_processed']
            
            return {
                'success': True,
                'method_used': 'json_processing',
                'files_processed': len(json_files),
                'results': results,
                'enhanced_pipeline_stats': enhanced_pipeline.stats
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤: {e}")
            return {'error': str(e)}
    
    def detect_json_files(self, directory: str = "uploads") -> List[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤"""
        json_dir = Path(directory)
        if not json_dir.exists():
            return []
        
        json_files = list(json_dir.glob('*.json'))
        return [str(f) for f in json_files]
    
    def run_hybrid_analysis(self, 
                           include_json: bool = True,
                           include_db_clients: bool = True,
                           limit: Optional[int] = None) -> Dict:
        """–ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑: JSON —Ñ–∞–π–ª—ã + –∫–ª–∏–µ–Ω—Ç—ã –∏–∑ –ë–î"""
        print(f"\nüîÑ –ì–ò–ë–†–ò–î–ù–´–ô –ê–ù–ê–õ–ò–ó AML")
        print("=" * 40)
        
        results = {
            'json_results': None,
            'db_results': None,
            'combined_stats': {}
        }
        
        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤
        if include_json:
            json_files = self.detect_json_files()
            if json_files:
                print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤...")
                results['json_results'] = self.process_json_files(json_files)
            else:
                print("üìÇ JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
        if include_db_clients:
            print(f"üóÑÔ∏è  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            client_ids = self.get_client_list(limit=limit)
            if client_ids:
                results['db_results'] = self.analyze_clients(client_ids)
            else:
                print("üóÑÔ∏è  –ö–ª–∏–µ–Ω—Ç—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        results['combined_stats'] = self._combine_analysis_stats(
            results['json_results'], 
            results['db_results']
        )
        
        return results
    
    def _combine_analysis_stats(self, json_results: Dict, db_results: Dict) -> Dict:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        combined = {
            'total_sources': 0,
            'total_processed': 0,
            'total_suspicious': 0,
            'processing_methods': []
        }
        
        if json_results and json_results.get('success'):
            combined['total_sources'] += 1
            json_stats = json_results.get('results', {})
            combined['total_processed'] += json_stats.get('total_processed', 0)
            combined['total_suspicious'] += json_stats.get('suspicious_count', 0)
            combined['processing_methods'].append('JSON —Ñ–∞–π–ª—ã –ê–§–ú')
        
        if db_results and db_results.get('success'):
            combined['total_sources'] += 1
            db_stats = db_results.get('stats', {})
            combined['total_processed'] += db_stats.get('total_clients', 0)
            combined['total_suspicious'] += db_stats.get('suspicious_clients', 0)
            combined['processing_methods'].append('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
        
        return combined

    def show_pipeline_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê AML-–ê–ù–ê–õ–ò–ó–ê")
        print("=" * 40)
        print(f"üîÑ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {self.pipeline_stats['total_runs']}")
        print(f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.pipeline_stats['total_clients_processed']:,}")
        print(f"‚è∞ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {self.pipeline_stats['total_time_saved']:.2f} —Å–µ–∫")
        print()
        
        if self.pipeline_stats['optimization_method_used']:
            print("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
            for method, count in self.pipeline_stats['optimization_method_used'].items():
                print(f"   {method.upper()}: {count} —Ä–∞–∑")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON —Ñ–∞–π–ª–æ–≤
        json_files = self.detect_json_files()
        if json_files:
            print(f"\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ JSON —Ñ–∞–π–ª—ã ({len(json_files)}):")
            for f in json_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {Path(f).name}")
            if len(json_files) > 5:
                print(f"   ... –∏ –µ—â–µ {len(json_files) - 5}")
        else:
            print(f"\nüìÇ JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ uploads")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    print("üöÄ AML PIPELINE - –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ö–õ–ò–ï–ù–¢–û–í")
    print("=" * 70)
    print()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = AMLPipeline('aml_system.db')
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
    print("1. üöÄ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("2. üéØ –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º (>5)")
    print("3. üìä –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (100 –∫–ª–∏–µ–Ω—Ç–æ–≤)")
    print("4. üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú")
    print("5. üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (JSON + –ë–î)")
    print("6. üîß –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î")
    print("7. üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞")
    print()
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-7): ").strip()
        
        if choice == "1":
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            result = pipeline.run_full_analysis()
            
        elif choice == "2":
            # –ê–Ω–∞–ª–∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            result = pipeline.run_full_analysis(risk_threshold=5.0)
            
        elif choice == "3":
            # –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            result = pipeline.run_full_analysis(limit=100)
            
        elif choice == "4":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤
            result = pipeline.process_json_files()
            
        elif choice == "5":
            # –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            result = pipeline.run_hybrid_analysis()
            
        elif choice == "6":
            # –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            pipeline.setup_database()
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return
            
        elif choice == "7":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            pipeline.show_pipeline_stats()
            return
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if hasattr(result, 'get') and result.get('success'):
            print()
            print("üéâ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            
            # –†–∞–∑–ª–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if choice in ["1", "2", "3"]:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–î
                print(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result['results']):,} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ {result['stats']['analysis_time']:.3f} —Å–µ–∫")
                
            elif choice == "4":
                # JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞
                json_results = result.get('results', {})
                print(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.get('files_processed', 0)} JSON —Ñ–∞–π–ª–æ–≤")
                print(f"‚ö° –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {json_results.get('total_processed', 0):,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                print(f"üö® –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {json_results.get('suspicious_count', 0):,}")
                
            elif choice == "5":
                # –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                combined_stats = result.get('combined_stats', {})
                print(f"üîÑ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {combined_stats.get('total_sources', 0)}")
                print(f"‚ö° –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {combined_stats.get('total_processed', 0):,}")
                print(f"üö® –í—Å–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {combined_stats.get('total_suspicious', 0):,}")
                print(f"üìä –ú–µ—Ç–æ–¥—ã: {', '.join(combined_stats.get('processing_methods', []))}")
                
        elif hasattr(result, 'get') and result.get('error'):
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
        else:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 