#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π AML –ø–∞–π–ø–ª–∞–π–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú –†–ö
–í–µ—Ä—Å–∏—è: 2.0
"""

import os
import sys
import json
import time
import psutil
import sqlite3
import argparse
from datetime import datetime
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor
from typing import Dict, List, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from aml_database_setup import AMLDatabaseManager
    from customer_profile_afm import CustomerProfile
    from transaction_profile_afm import TransactionProfile
    from behavioral_profile_afm import BehavioralProfile
    from geographic_profile_afm import GeographicProfile
    from network_profile_afm import NetworkProfile
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

class AMLPipelineEnhanced:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π AML –ø–∞–π–ø–ª–∞–π–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, db_path: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        self.db_path = db_path or "aml_system.db"
        self.db_manager = AMLDatabaseManager(self.db_path)
        self.stats = {
            'start_time': time.time(),
            'json_files_processed': 0,
            'transactions_loaded': 0,
            'transactions_analyzed': 0,
            'customers_created': 0,
            'suspicious_found': 0,
            'high_risk_found': 0,
            'errors': 0
        }
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.cpu_count = psutil.cpu_count()
        self.memory_gb = round(psutil.virtual_memory().total / (1024**3), 1)
        
    def load_json_file(self, json_file_path: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ –ê–§–ú"""
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞: {json_file_path}")
        
        if not os.path.exists(json_file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file_path}")
            return []
        
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data):,}")
            self.stats['json_files_processed'] += 1
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = []
            for record in data:
                tx_data = record.get('row_to_json')
                if tx_data:
                    transaction = self._convert_afm_to_transaction(tx_data)
                    if transaction:
                        transactions.append(transaction)
            
            print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions):,}")
            self.stats['transactions_loaded'] += len(transactions)
            
            return transactions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
            self.stats['errors'] += 1
            return []
    
    def _convert_afm_to_transaction(self, tx_data: Dict) -> Optional[Dict]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ê–§–ú –≤ —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not tx_data.get('gmess_id'):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = self._extract_participants(tx_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î
            for participant in participants:
                self._save_customer_if_not_exists(participant)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            sender = participants[0] if participants else {}
            beneficiary = participants[1] if len(participants) > 1 else {}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            is_suspicious = bool(tx_data.get('goper_susp_first') or 
                               tx_data.get('goper_susp_second') or 
                               tx_data.get('goper_susp_third'))
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã
            amount_raw = tx_data.get('goper_tenge_amount')
            if amount_raw is None or amount_raw == '':
                amount = 0.0
            else:
                try:
                    amount = float(amount_raw)
                except (ValueError, TypeError):
                    amount = 0.0
            
            transaction = {
                'transaction_id': f"AFM_{tx_data.get('gmess_id')}",
                'amount': amount,
                'currency': 'KZT',
                'amount_kzt': amount,
                'transaction_date': self._parse_afm_date(tx_data.get('goper_trans_date')),
                'sender_id': sender.get('customer_id'),
                'sender_name': sender.get('full_name'),
                'beneficiary_id': beneficiary.get('customer_id'),
                'beneficiary_name': beneficiary.get('full_name'),
                'purpose_text': tx_data.get('goper_dopinfo', ''),
                'is_suspicious': is_suspicious,
                'final_risk_score': 8.0 if is_suspicious else 2.0,
                'risk_indicators': json.dumps({
                    'susp_first': tx_data.get('goper_susp_first'),
                    'susp_second': tx_data.get('goper_susp_second'),
                    'susp_third': tx_data.get('goper_susp_third'),
                    'status': tx_data.get('gmess_oper_status'),
                    'reason_code': tx_data.get('gmess_reason_code')
                }),
                'source_data': json.dumps(tx_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
            
            return transaction
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            self.stats['errors'] += 1
            return None
    
    def _extract_participants(self, tx_data: Dict) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ê–§–ú"""
        participants = []
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ 1 (gmember1)
        if tx_data.get('gmember1_maincode'):
            if tx_data.get('gmember1_ur_name'):
                # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
                full_name = tx_data['gmember1_ur_name'].strip()
                member_type = 1
            else:
                # –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
                parts = []
                if tx_data.get('gmember1_ac_secondname'):
                    parts.append(tx_data['gmember1_ac_secondname'])
                if tx_data.get('gmember1_ac_firstname'):
                    parts.append(tx_data['gmember1_ac_firstname'])
                if tx_data.get('gmember1_ac_middlename'):
                    parts.append(tx_data['gmember1_ac_middlename'])
                full_name = ' '.join(parts).strip()
                member_type = 2
            
            participants.append({
                'customer_id': tx_data['gmember1_maincode'],
                'full_name': full_name,
                'member_type': member_type,
                'bank_address': tx_data.get('gmember1_bank_address'),
                'residence': tx_data.get('gmember_residence_pol1')
            })
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ 2 (gmember2)
        if tx_data.get('gmember2_maincode'):
            if tx_data.get('gmember2_ur_name'):
                # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
                full_name = tx_data['gmember2_ur_name'].strip()
                member_type = 1
            else:
                # –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
                parts = []
                if tx_data.get('gmember2_ac_secondname'):
                    parts.append(tx_data['gmember2_ac_secondname'])
                if tx_data.get('gmember2_ac_firstname'):
                    parts.append(tx_data['gmember2_ac_firstname'])
                if tx_data.get('gmember2_ac_middlename'):
                    parts.append(tx_data['gmember2_ac_middlename'])
                full_name = ' '.join(parts).strip()
                member_type = 2
            
            participants.append({
                'customer_id': tx_data['gmember2_maincode'],
                'full_name': full_name,
                'member_type': member_type,
                'bank_address': tx_data.get('gmember2_bank_address'),
                'residence': tx_data.get('gmember_residence_pl2')
            })
        
        return participants
    
    def _save_customer_if_not_exists(self, customer_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç"""
        try:
            customer_id = customer_data['customer_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç
            cursor = self.db_manager.connection.cursor()
            cursor.execute("SELECT customer_id FROM customer_profiles WHERE customer_id = ?", (customer_id,))
            
            if not cursor.fetchone():
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
                profile_data = {
                    'customer_id': customer_id,
                    'full_name': customer_data.get('full_name', ''),
                    'entity_type': 'individual' if customer_data.get('member_type') == 2 else 'legal',
                    'registration_date': datetime.now().strftime('%Y-%m-%d'),
                    'country_code': 'KZ',
                    'risk_level': 'medium',
                    'total_transactions': 0,
                    'total_amount': 0.0,
                    'suspicious_transactions': 0,
                    'last_transaction_date': None,
                    'kyc_status': 'pending',
                    'source_of_funds': 'unknown',
                    'occupation': 'unknown',
                    'bank_address': customer_data.get('bank_address'),
                    'residence_code': customer_data.get('residence')
                }
                
                self.db_manager.save_customer_profile(profile_data)
                self.stats['customers_created'] += 1
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {customer_data.get('customer_id')}: {e}")
            self.stats['errors'] += 1
    
    def _parse_afm_date(self, date_str: Optional[str]) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ê–§–ú"""
        if not date_str:
            return None
        try:
            # –§–æ—Ä–º–∞—Ç: 2025-04-21T21:00:00
            return datetime.fromisoformat(date_str.split('.')[0]).strftime('%Y-%m-%d %H:%M:%S')
        except:
            return None
    
    def analyze_transactions_parallel(self, transactions: List[Dict], 
                                    num_workers: int = None, 
                                    batch_size: int = 100) -> Dict:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not transactions:
            print("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {}
        
        num_workers = num_workers or min(20, max(1, self.cpu_count - 2))
        total_transactions = len(transactions)
        
        print(f"\nüîç –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô")
        print(f"{'='*50}")
        print(f"üíª –°–∏—Å—Ç–µ–º–∞:")
        print(f"   CPU: {self.cpu_count} —è–¥–µ—Ä")
        print(f"   RAM: {self.memory_gb} GB")
        print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions:,}")
        print(f"   –†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {num_workers}")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
        batches = [transactions[i:i + batch_size] 
                  for i in range(0, total_transactions, batch_size)]
        
        print(f"   –ë–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(batches)}")
        
        start_time = time.time()
        all_results = []
        
        try:
            with ProcessPoolExecutor(max_workers=num_workers) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                futures = [executor.submit(analyze_batch_worker, batch, self.db_path) 
                          for batch in batches]
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for i, future in enumerate(futures):
                    try:
                        batch_results = future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –±–∞—Ç—á
                        all_results.extend(batch_results)
                        print(f"  ‚úÖ –ë–∞—Ç—á {i+1}/{len(batches)} –∑–∞–≤–µ—Ä—à–µ–Ω ({len(batch_results)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {i+1}: {e}")
                        self.stats['errors'] += 1
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {}
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        suspicious_transactions = [tx for tx in all_results if tx.get('final_risk_score', 0) > 10]
        high_risk_transactions = [tx for tx in all_results if tx.get('final_risk_score', 0) > 15]
        
        self.stats['transactions_analyzed'] = len(all_results)
        self.stats['suspicious_found'] = len(suspicious_transactions)
        self.stats['high_risk_found'] = len(high_risk_transactions)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print(f"{'='*40}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(all_results)/processing_time:.1f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_results):,}/{total_transactions:,} ({len(all_results)/total_transactions*100:.1f}%)")
        print(f"üî¥ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {len(suspicious_transactions):,} ({len(suspicious_transactions)/len(all_results)*100:.1f}%)")
        print(f"üü† –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(high_risk_transactions):,}")
        
        return {
            'total_processed': len(all_results),
            'suspicious_count': len(suspicious_transactions),
            'high_risk_count': len(high_risk_transactions),
            'processing_time': processing_time,
            'transactions_per_second': len(all_results)/processing_time if processing_time > 0 else 0,
            'all_results': all_results,
            'suspicious_transactions': suspicious_transactions,
            'high_risk_transactions': high_risk_transactions
        }
    
    def process_json_files(self, json_files: List[str], 
                          parallel_analysis: bool = True,
                          save_to_db: bool = True) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö JSON —Ñ–∞–π–ª–æ–≤"""
        print(f"\nüöÄ –û–ë–†–ê–ë–û–¢–ö–ê JSON –§–ê–ô–õ–û–í –ê–§–ú")
        print(f"{'='*50}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(json_files)}")
        
        all_transactions = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        for json_file in json_files:
            transactions = self.load_json_file(json_file)
            all_transactions.extend(transactions)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if save_to_db:
                for tx in transactions:
                    try:
                        self.db_manager.save_transaction(tx)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                        self.stats['errors'] += 1
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(all_transactions):,}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        if parallel_analysis and len(all_transactions) > 100:
            results = self.analyze_transactions_parallel(all_transactions)
        else:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
            results = self._analyze_transactions_sequential(all_transactions)
        
        return results
    
    def _analyze_transactions_sequential(self, transactions: List[Dict]) -> Dict:
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        print(f"üîÑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(transactions):,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        start_time = time.time()
        analyzed_transactions = []
        
        for i, tx in enumerate(transactions):
            try:
                analyzed_tx = self._analyze_single_transaction(tx)
                analyzed_transactions.append(analyzed_tx)
                
                if (i + 1) % 100 == 0:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1:,}/{len(transactions):,}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx.get('transaction_id')}: {e}")
                self.stats['errors'] += 1
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        suspicious_transactions = [tx for tx in analyzed_transactions if tx.get('final_risk_score', 0) > 10]
        high_risk_transactions = [tx for tx in analyzed_transactions if tx.get('final_risk_score', 0) > 15]
        
        print(f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(analyzed_transactions)/processing_time:.1f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫")
        
        return {
            'total_processed': len(analyzed_transactions),
            'suspicious_count': len(suspicious_transactions),
            'high_risk_count': len(high_risk_transactions),
            'processing_time': processing_time,
            'transactions_per_second': len(analyzed_transactions)/processing_time,
            'all_results': analyzed_transactions,
            'suspicious_transactions': suspicious_transactions,
            'high_risk_transactions': high_risk_transactions
        }
    
    def _analyze_single_transaction(self, transaction: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            customer_profile = CustomerProfile(
                customer_id=transaction.get('sender_id'),
                db_manager=self.db_manager
            )
            
            transaction_profile = TransactionProfile(
                transaction_data=transaction,
                db_manager=self.db_manager
            )
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            customer_risk = customer_profile.calculate_risk_score()
            transaction_risk = transaction_profile.calculate_risk_score()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫-—Å–∫–æ—Ä
            final_risk_score = (customer_risk + transaction_risk) / 2
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction['final_risk_score'] = final_risk_score
            transaction['customer_risk_score'] = customer_risk
            transaction['transaction_risk_score'] = transaction_risk
            transaction['analysis_timestamp'] = datetime.now().isoformat()
            
            return transaction
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            transaction['final_risk_score'] = 5.0  # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return transaction
    
    def generate_report(self, results: Dict, output_file: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        if not output_file:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            output_file = f"aml_pipeline_enhanced_results_{timestamp}.json"
        
        report_data = {
            'pipeline_info': {
                'version': '2.0',
                'timestamp': datetime.now().isoformat(),
                'database': self.db_path,
                'system_info': {
                    'cpu_cores': self.cpu_count,
                    'memory_gb': self.memory_gb
                }
            },
            'statistics': self.stats,
            'analysis_results': results,
            'performance_metrics': {
                'total_time': time.time() - self.stats['start_time'],
                'transactions_per_second': results.get('transactions_per_second', 0),
                'efficiency_score': self._calculate_efficiency_score(results)
            }
        }
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            return output_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return ""
    
    def _calculate_efficiency_score(self, results: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            processed = results.get('total_processed', 0)
            speed = results.get('transactions_per_second', 0)
            accuracy = 1.0 - (self.stats['errors'] / max(1, processed))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            efficiency = (speed / 1000) * accuracy * 100
            return min(100.0, max(0.0, efficiency))
            
        except:
            return 0.0
    
    def print_final_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        total_time = time.time() - self.stats['start_time']
        
        print(f"\nüéâ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print(f"{'='*50}")
        print(f"üìÅ JSON —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['json_files_processed']}")
        print(f"üì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {self.stats['transactions_loaded']:,}")
        print(f"üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['transactions_analyzed']:,}")
        print(f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {self.stats['customers_created']:,}")
        print(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {self.stats['suspicious_found']:,}")
        print(f"üî¥ –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {self.stats['high_risk_found']:,}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if self.stats['transactions_analyzed'] > 0:
            avg_speed = self.stats['transactions_analyzed'] / total_time
            print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫")


def analyze_batch_worker(batch: List[Dict], db_path: str) -> List[Dict]:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        db_manager = AMLDatabaseManager(db_path)
        analyzed_transactions = []
        
        for transaction in batch:
            try:
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
                risk_score = calculate_simple_risk_score(transaction)
                
                transaction['final_risk_score'] = risk_score
                transaction['analysis_timestamp'] = datetime.now().isoformat()
                analyzed_transactions.append(transaction)
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
                transaction['final_risk_score'] = 5.0
                transaction['error'] = str(e)
                analyzed_transactions.append(transaction)
        
        return analyzed_transactions
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ: {e}")
        return []


def calculate_simple_risk_score(transaction: Dict) -> float:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    risk_score = 3.0  # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫
    
    try:
        amount_raw = transaction.get('amount', 0)
        if amount_raw is None:
            amount = 0.0
        else:
            try:
                amount = float(amount_raw)
            except (ValueError, TypeError):
                amount = 0.0
        
        is_suspicious = transaction.get('is_suspicious', False)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—É–º–º—ã
        if amount > 50_000_000:  # > 50 –º–ª–Ω —Ç–µ–Ω–≥–µ
            risk_score += 8.0
        elif amount > 10_000_000:  # > 10 –º–ª–Ω —Ç–µ–Ω–≥–µ
            risk_score += 5.0
        elif amount > 1_000_000:  # > 1 –º–ª–Ω —Ç–µ–Ω–≥–µ
            risk_score += 2.0
        
        # –ï—Å–ª–∏ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è
        if is_suspicious:
            risk_score += 10.0
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        purpose = transaction.get('purpose_text', '').lower()
        suspicious_keywords = ['–Ω–∞—Ä–∫–æ—Ç–∏–∫', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', '–æ–±–Ω–∞–ª', '–¥—Ä–æ–ø–ø–µ—Ä', '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤']
        for keyword in suspicious_keywords:
            if keyword in purpose:
                risk_score += 5.0
                break
        
        # –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
        risk_indicators_str = transaction.get('risk_indicators', '{}')
        try:
            risk_indicators = json.loads(risk_indicators_str)
            if any(risk_indicators.values()):
                risk_score += 3.0
        except:
            pass
        
        return min(25.0, max(1.0, risk_score))
        
    except Exception:
        return 5.0  # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π AML –ø–∞–π–ø–ª–∞–π–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú')
    parser.add_argument('--json-files', nargs='+', help='JSON —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--json-dir', default='uploads', help='–ü–∞–ø–∫–∞ —Å JSON —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--db-path', default='aml_system.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--workers', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    parser.add_argument('--batch-size', type=int, default=100, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    parser.add_argument('--no-parallel', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É')
    parser.add_argument('--no-save-db', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î')
    parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    json_files = []
    
    if args.json_files:
        json_files = args.json_files
    else:
        # –ò—â–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        json_dir = Path(args.json_dir)
        if json_dir.exists():
            json_files = [str(f) for f in json_dir.glob('*.json')]
        
        if not json_files:
            print(f"‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {args.json_dir}")
            print("üí° –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ --json-files –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É --json-dir")
            return
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AML –ø–∞–π–ø–ª–∞–π–Ω–∞")
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
    for f in json_files:
        print(f"   ‚Ä¢ {f}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = AMLPipelineEnhanced(args.db_path)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        results = pipeline.process_json_files(
            json_files=json_files,
            parallel_analysis=not args.no_parallel,
            save_to_db=not args.no_save_db
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if results:
            pipeline.generate_report(results, args.output)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        pipeline.print_final_summary()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    main() 