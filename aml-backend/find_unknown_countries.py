# –ü–æ–∏—Å–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö
# find_unknown_countries.py

import sqlite3
import json
from aml_codes_config import COUNTRY_CODES, HIGH_RISK_COUNTRIES, OFFSHORE_COUNTRIES

def find_unknown_country_codes(db_path: str = "aml_system.db"):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ"""
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–¥—ã
    all_known_codes = {
        **COUNTRY_CODES,
        **HIGH_RISK_COUNTRIES,
        **OFFSHORE_COUNTRIES
    }
    
    print("üîç –ü–û–ò–°–ö –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–î–û–í –°–¢–†–ê–ù")
    print("="*60)
    
    # 1. –ò—â–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ risk_indicators)
    cursor.execute('''
    SELECT DISTINCT 
        sender_country,
        beneficiary_country,
        risk_indicators
    FROM transactions
    ''')
    
    unknown_codes = {}
    country_stats = {}
    
    for row in cursor.fetchall():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        for country in [row[0], row[1]]:
            if country and country != 'KZ':
                country_stats[country] = country_stats.get(country, 0) + 1
                
                # –ï—Å–ª–∏ –∫–æ–¥ XX - –∑–Ω–∞—á–∏—Ç –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                if country == 'XX':
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ risk_indicators
                    try:
                        indicators = json.loads(row[2])
                        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
                    except:
                        pass
    
    # 2. –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –≤ customer_profiles
    cursor.execute('''
    SELECT DISTINCT residence_country
    FROM customer_profiles
    WHERE residence_country IS NOT NULL
    ''')
    
    for row in cursor.fetchall():
        country = row[0]
        if country and country not in ['KZ', 'XX']:
            if country not in all_known_codes.values():
                # –≠—Ç–æ –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥: {country}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º raw –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    cursor.execute('''
    SELECT name, sql FROM sqlite_master 
    WHERE type='table' AND name LIKE '%raw%'
    ''')
    
    raw_tables = cursor.fetchall()
    if raw_tables:
        print(f"\n–ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {[t[0] for t in raw_tables]}")
    
    # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å XX
    cursor.execute('''
    SELECT 
        transaction_id,
        sender_id,
        sender_name,
        sender_country,
        beneficiary_id,
        beneficiary_name,
        beneficiary_country,
        amount_kzt
    FROM transactions
    WHERE sender_country = 'XX' OR beneficiary_country = 'XX'
    ORDER BY amount_kzt DESC
    ''')
    
    xx_transactions = cursor.fetchall()
    if xx_transactions:
        print(f"\nüåç –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –ù–ï–ò–ó–í–ï–°–¢–ù–´–ú–ò –°–¢–†–ê–ù–ê–ú–ò (XX):")
        print(f"–ù–∞–π–¥–µ–Ω–æ: {len(xx_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        for tx in xx_transactions[:10]:  # –ü–µ—Ä–≤—ã–µ 10
            print(f"\n‚îú‚îÄ‚îÄ ID: {tx[0]}")
            print(f"‚îÇ   –°—É–º–º–∞: {tx[7]:,.0f} —Ç–µ–Ω–≥–µ")
            print(f"‚îÇ   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {tx[2]} ({tx[1]})")
            print(f"‚îÇ   –°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {tx[3]}")
            print(f"‚îÇ   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {tx[5]} ({tx[4]})")
            print(f"‚îÇ   –°—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {tx[6]}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
            for client_id in [tx[1], tx[4]]:
                if client_id:
                    cursor.execute('''
                    SELECT residence_country FROM customer_profiles 
                    WHERE customer_id = ?
                    ''', (client_id,))
                    client = cursor.fetchone()
                    if client:
                        print(f"‚îÇ   ‚îî‚îÄ‚îÄ –†–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {client[0]}")
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–†–ê–ù–ê–ú –í –ë–ê–ó–ï:")
    for country, count in sorted(country_stats.items(), key=lambda x: x[1], reverse=True)[:20]:
        status = "‚úì" if country in all_known_codes.values() else "‚ùå"
        print(f"{status} {country}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    conn.close()
    
    return unknown_codes

def check_original_json(json_file: str = "do_range.json"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω"""
    try:
        import json
        
        print(f"\nüìÑ –ü–†–û–í–ï–†–ö–ê –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê: {json_file}")
        print("="*60)
        
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞
        residence_codes = set()
        
        for item in data[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            record = item.get('row_to_json', item)
            
            # –í—Å–µ –ø–æ–ª—è —Å –∫–æ–¥–∞–º–∏ —Å—Ç—Ä–∞–Ω
            country_fields = [
                'gmember_residence_pl1',
                'gmember_residence_pl2', 
                'gmember_residence_pol1',
                'gmember_residence_pol2'
            ]
            
            for field in country_fields:
                code = record.get(field)
                if code and code != 398:  # 398 = KZ
                    residence_codes.add(code)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                    all_codes = {**COUNTRY_CODES, **HIGH_RISK_COUNTRIES, **OFFSHORE_COUNTRIES}
                    if code not in all_codes:
                        participant = record.get(field.replace('residence', 'name'))
                        print(f"\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {code}")
                        print(f"   –£—á–∞—Å—Ç–Ω–∏–∫: {participant}")
                        print(f"   –ü–æ–ª–µ: {field}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if field.endswith('pl1') or field.endswith('pl2'):
                            print(f"   –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞: –ü–ª–∞—Ç–µ–ª—å—â–∏–∫")
                        else:
                            print(f"   –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞: –ü–æ–ª—É—á–∞—Ç–µ–ª—å")
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω: {len(residence_codes)}")
        print(f"–ö–æ–¥—ã: {sorted(residence_codes)}")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def update_unknown_countries(db_path: str = "aml_system.db"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ —Å—Ç—Ä–∞–Ω"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
    ADDITIONAL_COUNTRY_CODES = {
        # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # 999: 'ZZ',  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
        # 000: 'XX',  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
    }
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    updates = 0
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    conn.commit()
    conn.close()
    
    if updates > 0:
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updates} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

if __name__ == "__main__":
    # 1. –ò—â–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–¥—ã –≤ –±–∞–∑–µ
    unknown = find_unknown_country_codes()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π JSON
    check_original_json("do_range.json")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–¥—ã –≤ COUNTRY_CODES")
    print("3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º")
