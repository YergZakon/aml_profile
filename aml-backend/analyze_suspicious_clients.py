# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
# analyze_suspicious_clients.py

import sqlite3
import json
from datetime import datetime

def analyze_top_suspicious_client(db_path: str, client_id: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–ê: {client_id}")
    print("="*60)
    
    # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    cursor.execute('''
    SELECT * FROM customer_profiles WHERE customer_id = ?
    ''', (client_id,))
    
    client = cursor.fetchone()
    if client:
        print(f"\nüë§ –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê:")
        print(f"‚îú‚îÄ‚îÄ –ò–º—è: {client['full_name']}")
        print(f"‚îú‚îÄ‚îÄ –¢–∏–ø: {'–§–∏–∑–ª–∏—Ü–æ' if client['is_individual'] else '–Æ—Ä–ª–∏—Ü–æ'}")
        print(f"‚îú‚îÄ‚îÄ –†–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ: {client['residence_country']}")
        print(f"‚îú‚îÄ‚îÄ –†–∏—Å–∫-—Å–∫–æ—Ä: {client['overall_risk_score']}")
        print(f"‚îî‚îÄ‚îÄ –°–ü–û –≤ –∏—Å—Ç–æ—Ä–∏–∏: {client['str_count']}")
    
    # 2. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('''
    SELECT * FROM transactions 
    WHERE sender_id = ? OR beneficiary_id = ?
    ORDER BY transaction_date DESC
    ''', (client_id, client_id))
    
    transactions = cursor.fetchall()
    print(f"\nüí∏ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ({len(transactions)} —à—Ç.):")
    
    total_sent = 0
    total_received = 0
    suspicious_count = 0
    
    for tx in transactions:
        is_sender = tx['sender_id'] == client_id
        amount = tx['amount_kzt']
        
        if is_sender:
            total_sent += amount
        else:
            total_received += amount
            
        if tx['is_suspicious']:
            suspicious_count += 1
            print(f"\n  üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx['transaction_id']}:")
            print(f"     –°—É–º–º–∞: {amount:,.0f} —Ç–µ–Ω–≥–µ")
            print(f"     –î–∞—Ç–∞: {tx['transaction_date']}")
            print(f"     –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–û—Ç–ø—Ä–∞–≤–∫–∞' if is_sender else '–ü–æ–ª—É—á–µ–Ω–∏–µ'}")
            
            # –ö–æ–¥—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            indicators = json.loads(tx['risk_indicators'])
            if indicators.get('suspicion_codes'):
                print(f"     –ö–æ–¥—ã: {indicators['suspicion_codes']}")
    
    print(f"\nüìä –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚îú‚îÄ‚îÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent:,.0f} —Ç–µ–Ω–≥–µ")
    print(f"‚îú‚îÄ‚îÄ –ü–æ–ª—É—á–µ–Ω–æ: {total_received:,.0f} —Ç–µ–Ω–≥–µ")
    print(f"‚îú‚îÄ‚îÄ –ë–∞–ª–∞–Ω—Å: {total_received - total_sent:,.0f} —Ç–µ–Ω–≥–µ")
    print(f"‚îî‚îÄ‚îÄ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {suspicious_count} –∏–∑ {len(transactions)}")
    
    # 3. –°–≤—è–∑–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞
    cursor.execute('''
    SELECT 
        CASE 
            WHEN sender_id = ? THEN beneficiary_id 
            ELSE sender_id 
        END as counterparty,
        COUNT(*) as tx_count,
        SUM(amount_kzt) as total_amount
    FROM transactions
    WHERE sender_id = ? OR beneficiary_id = ?
    GROUP BY counterparty
    ORDER BY total_amount DESC
    LIMIT 10
    ''', (client_id, client_id, client_id))
    
    print(f"\nüîó –û–°–ù–û–í–ù–´–ï –ö–û–ù–¢–†–ê–ì–ï–ù–¢–´:")
    for row in cursor.fetchall():
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        cursor.execute('SELECT full_name FROM customer_profiles WHERE customer_id = ?', 
                      (row['counterparty'],))
        name_row = cursor.fetchone()
        name = name_row['full_name'] if name_row else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        
        print(f"‚îú‚îÄ‚îÄ {name} ({row['counterparty']})")
        print(f"‚îÇ   –û–ø–µ—Ä–∞—Ü–∏–π: {row['tx_count']}, –°—É–º–º–∞: {row['total_amount']:,.0f} —Ç–µ–Ω–≥–µ")
    
    conn.close()

def find_network_schemes(db_path: str):
    """–ü–æ–∏—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö —Å—Ö–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("\nüï∏Ô∏è –ü–û–ò–°–ö –°–ï–¢–ï–í–´–• –°–•–ï–ú:")
    print("="*60)
    
    # 1. –ü–æ–∏—Å–∫ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    cursor.execute('''
    WITH RECURSIVE paths AS (
        -- –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        SELECT 
            sender_id as start,
            beneficiary_id as finish,
            sender_id || '->' || beneficiary_id as path,
            amount_kzt,
            1 as depth
        FROM transactions
        WHERE is_suspicious = 1
        
        UNION ALL
        
        -- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–µ–π
        SELECT 
            p.start,
            t.beneficiary_id,
            p.path || '->' || t.beneficiary_id,
            p.amount_kzt,
            p.depth + 1
        FROM paths p
        JOIN transactions t ON p.finish = t.sender_id
        WHERE p.depth < 5
          AND p.path NOT LIKE '%' || t.beneficiary_id || '%'
          AND t.is_suspicious = 1
    )
    SELECT path, amount_kzt, depth
    FROM paths
    WHERE start = finish AND depth > 2
    ''')
    
    circles = cursor.fetchall()
    if circles:
        print("\nüîÑ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–£–ì–û–í–´–ï –°–•–ï–ú–´:")
        for circle in circles:
            print(f"‚îú‚îÄ‚îÄ {circle[0]}")
            print(f"‚îÇ   –°—É–º–º–∞: {circle[1]:,.0f} —Ç–µ–Ω–≥–µ, –ì–ª—É–±–∏–Ω–∞: {circle[2]}")
    else:
        print("‚úì –ö—Ä—É–≥–æ–≤—ã—Ö —Å—Ö–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # 2. –ü–æ–∏—Å–∫ —Å—Ö–µ–º –¥—Ä–æ–±–ª–µ–Ω–∏—è
    cursor.execute('''
    SELECT 
        sender_id,
        COUNT(DISTINCT beneficiary_id) as recipients,
        COUNT(*) as tx_count,
        SUM(amount_kzt) as total,
        AVG(amount_kzt) as avg_amount
    FROM transactions
    WHERE transaction_date >= date('now', '-7 days')
    GROUP BY sender_id
    HAVING recipients >= 5 AND avg_amount < 2000000
    ORDER BY tx_count DESC
    ''')
    
    smurfing = cursor.fetchall()
    if smurfing:
        print("\nüí∞ –í–û–ó–ú–û–ñ–ù–û–ï –î–†–û–ë–õ–ï–ù–ò–ï (–°–ú–£–†–§–ò–ù–ì):")
        for row in smurfing:
            print(f"‚îú‚îÄ‚îÄ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {row[0]}")
            print(f"‚îÇ   –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {row[1]}, –û–ø–µ—Ä–∞—Ü–∏–π: {row[2]}")
            print(f"‚îÇ   –û–±—â–∞—è —Å—É–º–º–∞: {row[3]:,.0f}, –°—Ä–µ–¥–Ω—è—è: {row[4]:,.0f}")
    
    conn.close()

def generate_str_report(db_path: str, threshold_score: float = 7.0):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –°–ü–û –¥–ª—è –ê–§–ú"""
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    print("\nüìÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ü–û (–°–û–û–ë–©–ï–ù–ò–Ø –û –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –û–ü–ï–†–ê–¶–ò–Ø–•)")
    print("="*60)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –°–ü–û
    cursor.execute('''
    SELECT 
        t.*,
        c1.full_name as sender_name,
        c2.full_name as beneficiary_name
    FROM transactions t
    LEFT JOIN customer_profiles c1 ON t.sender_id = c1.customer_id
    LEFT JOIN customer_profiles c2 ON t.beneficiary_id = c2.customer_id
    WHERE t.is_suspicious = 1 
      AND t.final_risk_score >= ?
    ORDER BY t.final_risk_score DESC
    LIMIT 20
    ''', (threshold_score,))
    
    str_transactions = cursor.fetchall()
    
    if str_transactions:
        print(f"\nüìã –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –î–õ–Ø –°–ü–û ({len(str_transactions)} —à—Ç.):")
        
        for i, tx in enumerate(str_transactions, 1):
            print(f"\n{i}. –°–ü–û #{tx['transaction_id']}")
            print(f"   –î–∞—Ç–∞: {tx['transaction_date']}")
            print(f"   –°—É–º–º–∞: {tx['amount_kzt']:,.0f} —Ç–µ–Ω–≥–µ")
            print(f"   –ü–ª–∞—Ç–µ–ª—å—â–∏–∫: {tx['sender_name']} ({tx['sender_id']})")
            print(f"   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {tx['beneficiary_name']} ({tx['beneficiary_id']})")
            print(f"   –†–∏—Å–∫-—Å–∫–æ—Ä: {tx['final_risk_score']}")
            
            # –ö–æ–¥—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            indicators = json.loads(tx['risk_indicators'])
            if indicators.get('suspicion_codes'):
                print(f"   –ö–æ–¥—ã –ê–§–ú: {', '.join(map(str, indicators['suspicion_codes']))}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('str_report.txt', 'w', encoding='utf-8') as f:
            f.write("–°–û–û–ë–©–ï–ù–ò–ï –û –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –û–ü–ï–†–ê–¶–ò–Ø–•\n")
            f.write(f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now()}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(str_transactions)}\n")
            f.write("="*60 + "\n")
            
            for tx in str_transactions:
                f.write(f"\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx['transaction_id']}\n")
                f.write(f"–°—É–º–º–∞: {tx['amount_kzt']:,.0f} KZT\n")
                f.write(f"–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: {tx['sender_name']}\n")
                f.write(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {tx['beneficiary_name']}\n")
                indicators = json.loads(tx['risk_indicators'])
                if indicators.get('suspicion_codes'):
                    f.write(f"–ö–æ–¥—ã: {indicators['suspicion_codes']}\n")
                f.write("-"*40 + "\n")
        
        print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: str_report.txt")
    
    conn.close()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    db_path = "aml_system.db"
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø–æ–≤–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    top_client = "221140045516"  # –ö–û–†–ï–ê–ù –ö–ê–ü–ò–¢–ê–õ
    analyze_top_suspicious_client(db_path, top_client)
    
    # 2. –ò—â–µ–º —Å—Ö–µ–º—ã
    find_network_schemes(db_path)
    
    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –°–ü–û
    generate_str_report(db_path, threshold_score=5.0)

if __name__ == "__main__":
    main()
