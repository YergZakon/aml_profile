# –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö AML
from datetime import datetime

# –®–ê–ì 1: –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•
# –ü—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç - –±–∞–∑–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
from aml_database_setup import AMLDatabaseManager

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î (—Ñ–∞–π–ª —Å–æ–∑–¥–∞—Å—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)
db = AMLDatabaseManager("my_aml_system.db")
print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")

# –®–ê–ì 2: –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
new_customer = {
    'customer_id': 'CL_12345',  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    'full_name': '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
    'iin': '850115301234',  # –ò–ò–ù
    'overall_risk_score': 3.5  # –†–∏—Å–∫-—Å–∫–æ—Ä
}

db.save_customer_profile(new_customer)
print("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

# –®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
new_transaction = {
    'transaction_id': 'TX_2024_001',
    'amount': 5000000,  # 5 –º–ª–Ω —Ç–µ–Ω–≥–µ
    'amount_kzt': 5000000,
    'transaction_date': datetime.now(),
    'sender_id': 'CL_12345',
    'beneficiary_id': 'CL_67890',
    'final_risk_score': 4.2
}

db.save_transaction(new_transaction)
print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# –®–ê–ì 4: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
profile = db.get_customer_profile('CL_12345')
if profile:
    print(f"\nüìã –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ {profile['full_name']}:")
    print(f"   –†–∏—Å–∫: {profile['overall_risk_score']}")
    print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {profile['total_transaction_count']}")

# –®–ê–ì 5: –ê–ù–ê–õ–ò–¢–ò–ö–ê
# –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
high_risk_customers = db.get_high_risk_customers(limit=10)
print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(high_risk_customers)}")

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
suspicious = db.get_recent_suspicious_transactions(days=7)
print(f"üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {len(suspicious)}")

# –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
stats = db.get_system_statistics()
print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
print(f"   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['customers']['total_customers']}")
print(f"   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions']['total_transactions']}")

# –®–ê–ì 6: –°–û–ó–î–ê–ù–ò–ï –ê–õ–ï–†–¢–ê
# –ö–æ–≥–¥–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
alert = {
    'transaction_id': 'TX_2024_001',
    'alert_type': 'TRANSACTION',
    'severity': 'HIGH',
    'title': '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞',
    'risk_score': 7.5
}

alert_id = db.create_alert(alert)
print(f"\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç #{alert_id}")

# –ù–ï –ó–ê–ë–£–î–¨–¢–ï –ó–ê–ö–†–´–¢–¨ –°–û–ï–î–ò–ù–ï–ù–ò–ï!
db.close()

# ===============================================
# –ü–û–õ–ï–ó–ù–´–ï –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í
# ===============================================

def useful_queries():
    """–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ"""
    db = AMLDatabaseManager("my_aml_system.db")
    
    # 1. –ù–∞–π—Ç–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    cursor = db.connection.cursor()
    cursor.execute('''
    SELECT * FROM transactions 
    WHERE sender_id = ? OR beneficiary_id = ?
    ORDER BY transaction_date DESC
    ''', ('CL_12345', 'CL_12345'))
    
    transactions = cursor.fetchall()
    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {len(transactions)}")
    
    # 2. –ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''
    SELECT DISTINCT 
        CASE 
            WHEN sender_id = ? THEN beneficiary_id
            ELSE sender_id
        END as connected_customer
    FROM transactions
    WHERE sender_id = ? OR beneficiary_id = ?
    ''', ('CL_12345', 'CL_12345', 'CL_12345'))
    
    connected = cursor.fetchall()
    print(f"–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(connected)}")
    
    # 3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ñ—à–æ—Ä—ã
    cursor.execute('''
    SELECT t.*, c.full_name as beneficiary_name
    FROM transactions t
    LEFT JOIN customer_profiles c ON t.beneficiary_id = c.customer_id
    WHERE t.beneficiary_country IN ('KY', 'VG', 'BS', 'BZ', 'SC')
    ORDER BY t.amount_kzt DESC
    ''')
    
    offshore_tx = cursor.fetchall()
    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ñ—à–æ—Ä—ã: {len(offshore_tx)}")
    
    db.close()

# ===============================================
# –†–ê–ë–û–¢–ê –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò
# ===============================================

def work_with_settings():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""
    db = AMLDatabaseManager("my_aml_system.db")
    
    # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    cursor = db.connection.cursor()
    cursor.execute('''
    SELECT setting_value FROM system_settings 
    WHERE setting_key = ?
    ''', ('threshold_cash',))
    
    threshold = cursor.fetchone()
    if threshold:
        print(f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö: {threshold[0]} —Ç–µ–Ω–≥–µ")
    
    # –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    cursor.execute('''
    UPDATE system_settings 
    SET setting_value = ?, updated_at = CURRENT_TIMESTAMP
    WHERE setting_key = ?
    ''', ('3000000', 'threshold_cash'))
    
    db.connection.commit()
    print("–ü–æ—Ä–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 3 –º–ª–Ω —Ç–µ–Ω–≥–µ")
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cursor.execute('SELECT * FROM system_settings')
    all_settings = cursor.fetchall()
    
    print("\nüìã –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:")
    for setting in all_settings:
        print(f"  ‚Ä¢ {setting['setting_key']}: {setting['setting_value']}")
    
    db.close()

# ===============================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–†–û–§–ò–õ–Ø–ú–ò
# ===============================================

def integrate_with_profiles():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ë–î —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    from customer_profile import CustomerProfile
    from transaction_profile import TransactionProfile
    
    db = AMLDatabaseManager("my_aml_system.db")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–¥–µ
    profile = CustomerProfile("CL_99999")
    profile.update_personal_info(
        full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
        iin="990101501234"
    )
    profile.calculate_risk_score()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    profile_data = {
        'customer_id': profile.customer_id,
        'full_name': profile.personal_info['full_name'],
        'iin': profile.personal_info['iin'],
        'overall_risk_score': profile.risk_factors['overall_risk_score'],
        'base_risk_level': profile.risk_factors['base_risk_level'],
        'behavior_patterns': profile.behavior_patterns,
        'typical_counterparties': profile.transaction_stats['typical_counterparties']
    }
    
    db.save_customer_profile(profile_data)
    print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏–∑ –∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    loaded_data = db.get_customer_profile("CL_99999")
    if loaded_data:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        restored_profile = CustomerProfile(loaded_data['customer_id'])
        restored_profile.personal_info['full_name'] = loaded_data['full_name']
        restored_profile.risk_factors['overall_risk_score'] = loaded_data['overall_risk_score']
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {restored_profile.personal_info['full_name']}")
    
    db.close()

# ===============================================
# –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï
# ===============================================

def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î"""
    import shutil
    from datetime import datetime
    
    source_db = "my_aml_system.db"
    backup_name = f"backup_aml_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    shutil.copy2(source_db, backup_name)
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:
# useful_queries()
# work_with_settings()
# integrate_with_profiles()
# backup_database()
