#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú –†–ö
"""

import json
import sys

def analyze_real_json(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Ñ–∞–π–ª–∞ –ê–§–ú"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìÅ –§–∞–π–ª: {file_path}")
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data):,}")
        
        if len(data) > 0:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            first_record = data[0]
            tx_data = first_record.get('row_to_json', {})
            
            print(f"\nüîç –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ü–ò–°–ò:")
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á: 'row_to_json'")
            print(f"   –ü–æ–ª–µ–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {len(tx_data)}")
            
            print(f"\nüí∞ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:")
            print(f"   ID —Å–æ–æ–±—â–µ–Ω–∏—è: {tx_data.get('gmess_id')}")
            print(f"   –ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: {tx_data.get('goper_number')}")
            print(f"   –î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_data.get('goper_trans_date')}")
            print(f"   –°—É–º–º–∞ –≤ —Ç–µ–Ω–≥–µ: {tx_data.get('goper_tenge_amount'):,}")
            print(f"   –í–∞–ª—é—Ç–Ω–∞—è —Å—É–º–º–∞: {tx_data.get('goper_currency_amount'):,}")
            print(f"   –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: {tx_data.get('gmess_oper_status')}")
            print(f"   –ö–æ–¥ –ø—Ä–∏—á–∏–Ω—ã: {tx_data.get('gmess_reason_code')}")
            
            print(f"\nüö® –ü–û–õ–Ø –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            print(f"   –ü–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫: {tx_data.get('goper_susp_first')}")
            print(f"   –í—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫: {tx_data.get('goper_susp_second')}")
            print(f"   –¢—Ä–µ—Ç–∏–π –ø—Ä–∏–∑–Ω–∞–∫: {tx_data.get('goper_susp_third')}")
            
            print(f"\nüë§ –£–ß–ê–°–¢–ù–ò–ö–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:")
            
            # –£—á–∞—Å—Ç–Ω–∏–∫ 1
            member1_id = tx_data.get('gmember1_maincode')
            member1_type = tx_data.get('gmember1_member_type')
            if member1_id:
                if tx_data.get('gmember1_ur_name'):
                    member1_name = tx_data.get('gmember1_ur_name')
                    entity_type = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
                else:
                    parts = []
                    if tx_data.get('gmember1_ac_secondname'): parts.append(tx_data.get('gmember1_ac_secondname'))
                    if tx_data.get('gmember1_ac_firstname'): parts.append(tx_data.get('gmember1_ac_firstname'))
                    if tx_data.get('gmember1_ac_middlename'): parts.append(tx_data.get('gmember1_ac_middlename'))
                    member1_name = ' '.join(parts)
                    entity_type = "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
                
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫ 1:")
                print(f"     ID: {member1_id}")
                print(f"     –ò–º—è: {member1_name}")
                print(f"     –¢–∏–ø: {entity_type} ({member1_type})")
            
            # –£—á–∞—Å—Ç–Ω–∏–∫ 2
            member2_id = tx_data.get('gmember2_maincode')
            member2_type = tx_data.get('gmember2_member_type')
            if member2_id:
                if tx_data.get('gmember2_ur_name'):
                    member2_name = tx_data.get('gmember2_ur_name')
                    entity_type = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
                else:
                    parts = []
                    if tx_data.get('gmember2_ac_secondname'): parts.append(tx_data.get('gmember2_ac_secondname'))
                    if tx_data.get('gmember2_ac_firstname'): parts.append(tx_data.get('gmember2_ac_firstname'))
                    if tx_data.get('gmember2_ac_middlename'): parts.append(tx_data.get('gmember2_ac_middlename'))
                    member2_name = ' '.join(parts)
                    entity_type = "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
                
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫ 2:")
                print(f"     ID: {member2_id}")
                print(f"     –ò–º—è: {member2_name}")
                print(f"     –¢–∏–ø: {entity_type} ({member2_type})")
            
            print(f"\nüìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            dopinfo = tx_data.get('goper_dopinfo')
            if dopinfo:
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {dopinfo[:200]}{'...' if len(dopinfo) > 200 else ''}")
            
            difficulties = tx_data.get('goper_difficulties')
            if difficulties:
                print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç–∏/–ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è: {difficulties[:200]}{'...' if len(difficulties) > 200 else ''}")
            
            print(f"\nüéØ –°–ü–ò–°–û–ö –ü–†–û–í–ï–†–û–ö (GIS):")
            gis_fields = [k for k in tx_data.keys() if k.startswith('gis_')]
            active_checks = []
            for field in gis_fields:
                if tx_data.get(field) == 1:
                    active_checks.append(field)
            
            if active_checks:
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(active_checks)}")
                for check in active_checks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"     ‚Ä¢ {check}")
                if len(active_checks) > 5:
                    print(f"     ... –∏ –µ—â–µ {len(active_checks) - 5}")
            else:
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—Ç")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –§–ê–ô–õ–£:")
            suspicious_count = 0
            total_amount = 0
            unique_members = set()
            
            for record in data[:1000]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                tx = record.get('row_to_json', {})
                if tx.get('goper_susp_first'):
                    suspicious_count += 1
                
                amount = tx.get('goper_tenge_amount', 0)
                if amount:
                    total_amount += amount
                
                if tx.get('gmember1_maincode'):
                    unique_members.add(tx.get('gmember1_maincode'))
                if tx.get('gmember2_maincode'):
                    unique_members.add(tx.get('gmember2_maincode'))
            
            sample_size = min(1000, len(data))
            print(f"   –û–±—Ä–∞–∑–µ—Ü: {sample_size:,} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(data):,}")
            print(f"   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {suspicious_count} ({suspicious_count/sample_size*100:.1f}%)")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞ (–æ–±—Ä–∞–∑–µ—Ü): {total_amount:,} —Ç–µ–Ω–≥–µ")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(unique_members):,}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        analyze_real_json(file_path)
    else:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        files_to_analyze = [
            "uploads/do_range.json",
            "uploads/converted_data3.json"
        ]
        
        for file_path in files_to_analyze:
            print("="*80)
            analyze_real_json(file_path)
            print() 