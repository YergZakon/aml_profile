#!/usr/bin/env python3
"""
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AML –¥–ª—è JSON —Ñ–∞–π–ª–æ–≤
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ JSON —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
"""

import json
import time
import psutil
import concurrent.futures
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from pathlib import Path
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from customer_profile_afm import CustomerProfile
    from transaction_profile_afm import TransactionProfile
    from behavioral_profile_afm import BehavioralProfile
    from geographic_profile_afm import GeographicProfile
    from network_profile_afm import NetworkProfile
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

def _calculate_simple_geographic_risk(transaction: Dict) -> float:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞"""
    country = transaction.get('country', 'Kazakhstan').lower()
    
    # –†–∏—Å–∫-–∫–∞—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    risk_map = {
        'kazakhstan': 1.0,
        'russia': 2.0,
        'china': 2.5,
        'usa': 1.5,
        'germany': 1.0,
        'switzerland': 3.0,
        'offshore': 8.0,
        'unknown': 5.0
    }
    
    return risk_map.get(country, 3.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫

def _calculate_simple_network_risk(transaction: Dict) -> float:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Ä–∏—Å–∫–∞"""
    amount = transaction.get('amount', 0)
    operation_type = transaction.get('operation_type', '').lower()
    
    risk = 1.0
    
    # –†–∏—Å–∫ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    if 'cash' in operation_type:
        risk += 1.0
    if 'international' in operation_type:
        risk += 1.5
    if 'investment' in operation_type:
        risk += 0.5
        
    # –†–∏—Å–∫ –ø–æ —Å—É–º–º–µ
    if amount > 10000000:  # > 10 –º–ª–Ω
        risk += 2.0
    elif amount > 1000000:  # > 1 –º–ª–Ω
        risk += 1.0
        
    return min(risk, 10.0)  # –ú–∞–∫—Å–∏–º—É–º 10

def analyze_transaction_batch(transactions_batch: List[Dict]) -> List[Dict]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞—Ç—á —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        customer_profile = CustomerProfile()
        transaction_profile = TransactionProfile()
        
        results = []
        
        for transaction in transactions_batch:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if 'date' in transaction and isinstance(transaction['date'], str):
                    try:
                        transaction['date'] = datetime.fromisoformat(transaction['date'])
                    except:
                        transaction['date'] = datetime.now()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
                customer_analysis = customer_profile.analyze_customer_data(transaction)
                transaction_analysis = transaction_profile.analyze_transaction(transaction)
                
                # –°–æ–∑–¥–∞–µ–º behavioral_profile –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                customer_id = transaction.get('customer_id', 'unknown')
                behavioral_profile = BehavioralProfile(customer_id)
                behavioral_analysis = behavioral_profile.analyze_transaction(transaction)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∏—Å–∫-—Å–∫–æ—Ä—ã
                customer_risk = customer_analysis.get('risk_score', 0)
                transaction_risk = transaction_analysis.get('risk_score', 0)
                behavioral_risk = behavioral_analysis.get('risk_score', 0)
                
                # –ü—Ä–æ—Å—Ç—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ —Å–µ—Ç–µ–≤—ã–µ —Ä–∏—Å–∫–∏
                geographic_risk = _calculate_simple_geographic_risk(transaction)
                network_risk = _calculate_simple_network_risk(transaction)
                
                # –°—É–º–º–∞—Ä–Ω—ã–π —Ä–∏—Å–∫-—Å–∫–æ—Ä
                total_risk = (customer_risk + transaction_risk + behavioral_risk + 
                            geographic_risk + network_risk)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                is_suspicious = total_risk > 5.0
                
                result = {
                    'transaction_id': transaction.get('transaction_id', 'unknown'),
                    'customer_id': transaction.get('customer_id', 'unknown'),
                    'amount': float(transaction.get('amount', 0)),
                    'currency': transaction.get('currency', 'KZT'),
                    'date': transaction.get('date', ''),
                    'operation_type': transaction.get('operation_type', ''),
                    'country': transaction.get('country', ''),
                    'risks': {
                        'customer_risk': customer_risk,
                        'transaction_risk': transaction_risk,
                        'behavioral_risk': behavioral_risk,
                        'geographic_risk': geographic_risk,
                        'network_risk': network_risk
                    },
                    'total_risk_score': total_risk,
                    'is_suspicious': is_suspicious,
                    'analysis_timestamp': datetime.now().isoformat()
                }
                
                results.append(result)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                continue
                
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞ –±–∞—Ç—á–∞: {e}")
        return []

def load_json_file(file_path: str) -> List[Dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã JSON
        if isinstance(data, list):
            return data
        elif isinstance(data, dict):
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if 'transactions' in data:
                return data['transactions']
            elif 'data' in data:
                return data['data']
            else:
                # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                return [data]
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: {type(data)}")
            return []
            
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return []
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return []

def analyze_json_parallel(input_file: str,
                         output_file: str = None,
                         max_workers: int = None,
                         batch_size: int = 100) -> Dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ JSON —Ñ–∞–π–ª–∞
    """
    
    print("üîç –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó JSON –§–ê–ô–õ–ê")
    print("=" * 50)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_count = psutil.cpu_count()
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    if max_workers is None:
        max_workers = min(cpu_count - 4, 20)  # –û—Å—Ç–∞–≤–ª—è–µ–º 4 —è–¥—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
    
    print(f"üíª –°–∏—Å—Ç–µ–º–∞:")
    print(f"   CPU: Intel Core Ultra 9 275HX ({cpu_count} —è–¥–µ—Ä)")
    print(f"   RAM: {memory_gb:.1f} GB")
    print(f"   –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    print(f"   –†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {max_workers}")
    print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞...")
    transactions = load_json_file(input_file)
    
    if not transactions:
        print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return {}
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions):,}")
    print()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
    batches = [transactions[i:i + batch_size] 
              for i in range(0, len(transactions), batch_size)]
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   üì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(transactions):,}")
    print(f"   ‚ö° –†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {max_workers}")
    print(f"   üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print(f"   üîÑ –ë–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(batches)}")
    print()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    initial_memory = psutil.virtual_memory().percent
    start_time = time.time()
    
    all_results = []
    failed_batches = 0
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π
    with concurrent.futures.ProcessPoolExecutor(max_workers=max_workers) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        future_to_batch = {
            executor.submit(analyze_transaction_batch, batch): i 
            for i, batch in enumerate(batches)
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for future in concurrent.futures.as_completed(future_to_batch):
            batch_num = future_to_batch[future]
            try:
                batch_results = future.result(timeout=60)  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                all_results.extend(batch_results)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                processed_batches = len([f for f in future_to_batch if f.done()])
                print(f"  ‚úÖ –ë–∞—Ç—á {batch_num + 1}/{len(batches)} –∑–∞–≤–µ—Ä—à–µ–Ω "
                      f"({len(batch_results)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
                
                if processed_batches % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 –±–∞—Ç—á–µ–π
                    current_time = time.time() - start_time
                    processed_transactions = len(all_results)
                    speed = processed_transactions / current_time if current_time > 0 else 0
                    print(f"  üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_transactions:,}/{len(transactions):,} "
                          f"({speed:.1f} —Ç—Ä/—Å–µ–∫)")
                
            except concurrent.futures.TimeoutError:
                print(f"  ‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –±–∞—Ç—á–∞ {batch_num + 1}")
                failed_batches += 1
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num + 1}: {e}")
                failed_batches += 1
    
    end_time = time.time()
    total_time = end_time - start_time
    final_memory = psutil.virtual_memory().percent
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    suspicious_transactions = [r for r in all_results if r['is_suspicious']]
    high_risk_transactions = [r for r in all_results if r['total_risk_score'] > 15]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    clients_analysis = {}
    for result in all_results:
        client_id = result['customer_id']
        if client_id not in clients_analysis:
            clients_analysis[client_id] = {
                'total_transactions': 0,
                'suspicious_transactions': 0,
                'total_amount': 0,
                'max_risk_score': 0
            }
        
        clients_analysis[client_id]['total_transactions'] += 1
        clients_analysis[client_id]['total_amount'] += result['amount']
        clients_analysis[client_id]['max_risk_score'] = max(
            clients_analysis[client_id]['max_risk_score'],
            result['total_risk_score']
        )
        
        if result['is_suspicious']:
            clients_analysis[client_id]['suspicious_transactions'] += 1
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    suspicious_clients = [
        {'client_id': cid, **data} 
        for cid, data in clients_analysis.items() 
        if data['suspicious_transactions'] > 0
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'analysis_timestamp': datetime.now().isoformat(),
        'input_file': input_file,
        'total_time': total_time,
        'total_transactions': len(transactions),
        'processed_transactions': len(all_results),
        'failed_batches': failed_batches,
        'success_rate': len(all_results) / len(transactions) * 100,
        'transactions_per_second': len(all_results) / total_time,
        'memory_usage_change': final_memory - initial_memory,
        'max_workers_used': max_workers,
        'batch_size': batch_size,
        'batches_processed': len(batches),
        'suspicious_transactions': len(suspicious_transactions),
        'high_risk_transactions': len(high_risk_transactions),
        'unique_clients': len(clients_analysis),
        'suspicious_clients': len(suspicious_clients)
    }
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 40)
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {stats['transactions_per_second']:.1f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_results):,}/{len(transactions):,} "
          f"({stats['success_rate']:.1f}%)")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –±–∞—Ç—á–µ–π: {failed_batches}")
    print(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage_change']:+.1f}%")
    print()
    
    print("üö® –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 30)
    print(f"üî¥ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(suspicious_transactions):,}")
    print(f"üü† –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (>15): {len(high_risk_transactions):,}")
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients_analysis):,}")
    print(f"üéØ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(suspicious_clients):,}")
    if len(all_results) > 0:
        suspicious_percentage = len(suspicious_transactions)/len(all_results)*100
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {suspicious_percentage:.1f}%")
    else:
        print("üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: 0.0%")
    print()
    
    # –¢–æ–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    if suspicious_clients:
        print("üîù –¢–û–ü-10 –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ö–õ–ò–ï–ù–¢–û–í:")
        print("-" * 50)
        top_clients = sorted(suspicious_clients, 
                           key=lambda x: x['max_risk_score'], 
                           reverse=True)[:10]
        
        for i, client in enumerate(top_clients, 1):
            print(f"{i:2d}. –ö–ª–∏–µ–Ω—Ç {client['client_id']}")
            print(f"    –ú–∞–∫—Å. —Ä–∏—Å–∫-—Å–∫–æ—Ä: {client['max_risk_score']:.1f}")
            print(f"    –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {client['total_transactions']:,}")
            print(f"    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {client['suspicious_transactions']:,}")
            print(f"    –û–±—â–∞—è —Å—É–º–º–∞: {client['total_amount']:,.0f} —Ç–µ–Ω–≥–µ")
            print()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if output_file:
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_file}...")
        
        output_data = {
            'analysis_metadata': stats,
            'transaction_results': all_results,
            'client_analysis': clients_analysis,
            'suspicious_transactions': suspicious_transactions,
            'suspicious_clients': suspicious_clients
        }
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            def convert_datetime(obj):
                if isinstance(obj, datetime):
                    return obj.isoformat()
                raise TypeError(f"Object of type {type(obj)} is not JSON serializable")
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=2, default=convert_datetime)
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    return {
        'stats': stats,
        'results': all_results,
        'suspicious_transactions': suspicious_transactions,
        'suspicious_clients': suspicious_clients,
        'client_analysis': clients_analysis
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ JSON —Ñ–∞–π–ª–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏')
    parser.add_argument('input_file', help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É')
    parser.add_argument('-w', '--workers', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    parser.add_argument('-b', '--batch-size', type=int, default=100, 
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)')
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ JSON —Ñ–∞–π–ª–∞")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(args.input_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input_file}")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    output_file = args.output
    if not output_file:
        input_path = Path(args.input_file)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"aml_analysis_{input_path.stem}_{timestamp}.json"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    results = analyze_json_parallel(
        input_file=args.input_file,
        output_file=output_file,
        max_workers=args.workers,
        batch_size=args.batch_size
    )

if __name__ == "__main__":
    main() 