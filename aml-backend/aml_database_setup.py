# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã AML –ê–§–ú –†–ö
import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
import os

class AMLDatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã AML"""
    
    def __init__(self, db_path: str = "aml_system.db"):
        self.db_path = db_path
        self.connection = None
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        self._initialize_database()
        
    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        print(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.connection = sqlite3.connect(self.db_path)
        self.connection.row_factory = sqlite3.Row  # –î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        self.connection.execute("PRAGMA foreign_keys = ON")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        self._create_tables()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        cursor = self.connection.cursor()
        
        # =====================================================
        # 1. –¢–ê–ë–õ–ò–¶–ê –ö–õ–ò–ï–ù–¢–°–ö–ò–• –ü–†–û–§–ò–õ–ï–ô
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS customer_profiles (
            customer_id TEXT PRIMARY KEY,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            -- –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            full_name TEXT,
            iin TEXT,  -- –ò–ò–ù –¥–ª—è —Ñ–∏–∑–ª–∏—Ü
            bin TEXT,  -- –ë–ò–ù –¥–ª—è —é—Ä–ª–∏—Ü
            birth_date DATE,
            citizenship TEXT DEFAULT 'KZ',
            residence_country TEXT DEFAULT 'KZ',
            
            -- –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
            is_individual BOOLEAN DEFAULT 1,
            is_pep BOOLEAN DEFAULT 0,
            is_foreign BOOLEAN DEFAULT 0,
            business_type TEXT,
            
            -- –†–∏—Å–∫-—Ñ–∞–∫—Ç–æ—Ä—ã
            base_risk_level TEXT DEFAULT 'LOW',
            country_risk INTEGER DEFAULT 1,
            product_risk INTEGER DEFAULT 1,
            behavior_risk INTEGER DEFAULT 1,
            overall_risk_score REAL DEFAULT 1.0,
            
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            total_transaction_count INTEGER DEFAULT 0,
            total_amount REAL DEFAULT 0.0,
            avg_transaction REAL DEFAULT 0.0,
            max_transaction REAL DEFAULT 0.0,
            monthly_avg REAL DEFAULT 0.0,
            
            -- –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (JSON)
            behavior_patterns TEXT,  -- JSON —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
            typical_counterparties TEXT,  -- JSON –º–∞—Å—Å–∏–≤
            typical_purposes TEXT,  -- JSON –º–∞—Å—Å–∏–≤
            
            -- –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            str_count INTEGER DEFAULT 0,
            last_str_date TIMESTAMP,
            false_positive_count INTEGER DEFAULT 0,
            confirmed_suspicious INTEGER DEFAULT 0
        )
        ''')
        
        # =====================================================
        # 2. –¢–ê–ë–õ–ò–¶–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            transaction_id TEXT PRIMARY KEY,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            amount REAL NOT NULL,
            currency TEXT DEFAULT 'KZT',
            amount_kzt REAL NOT NULL,
            transaction_date TIMESTAMP,
            value_date TIMESTAMP,
            channel TEXT,  -- branch, atm, mobile, internet
            
            -- –£—á–∞—Å—Ç–Ω–∏–∫–∏
            sender_id TEXT,
            sender_name TEXT,
            sender_account TEXT,
            sender_bank_bic TEXT,
            sender_country TEXT DEFAULT 'KZ',
            
            beneficiary_id TEXT,
            beneficiary_name TEXT,
            beneficiary_account TEXT,
            beneficiary_bank_bic TEXT,
            beneficiary_country TEXT DEFAULT 'KZ',
            
            -- –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation_code TEXT,
            operation_type TEXT,
            purpose_code TEXT,
            purpose_text TEXT,
            is_cash BOOLEAN DEFAULT 0,
            is_international BOOLEAN DEFAULT 0,
            
            -- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            final_risk_score REAL DEFAULT 0.0,
            is_suspicious BOOLEAN DEFAULT 0,
            str_generated BOOLEAN DEFAULT 0,
            str_id TEXT,
            
            -- –†–∏—Å–∫-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (JSON)
            risk_indicators TEXT,  -- JSON —Å —Ñ–ª–∞–≥–∞–º–∏
            rule_triggers TEXT,  -- JSON –º–∞—Å—Å–∏–≤ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –ø—Ä–∞–≤–∏–ª
            
            FOREIGN KEY (sender_id) REFERENCES customer_profiles(customer_id),
            FOREIGN KEY (beneficiary_id) REFERENCES customer_profiles(customer_id)
        )
        ''')
        
        # =====================================================
        # 3. –¢–ê–ë–õ–ò–¶–ê –°–ï–¢–ï–í–´–• –°–í–Ø–ó–ï–ô
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS network_connections (
            connection_id INTEGER PRIMARY KEY AUTOINCREMENT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            sender_id TEXT NOT NULL,
            beneficiary_id TEXT NOT NULL,
            
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–∏
            transaction_count INTEGER DEFAULT 1,
            total_amount REAL DEFAULT 0.0,
            avg_amount REAL DEFAULT 0.0,
            first_transaction_date TIMESTAMP,
            last_transaction_date TIMESTAMP,
            avg_interval_days REAL,
            
            -- –†–∏—Å–∫ —Å–≤—è–∑–∏
            connection_risk_score REAL DEFAULT 0.0,
            is_suspicious_route BOOLEAN DEFAULT 0,
            
            UNIQUE(sender_id, beneficiary_id),
            FOREIGN KEY (sender_id) REFERENCES customer_profiles(customer_id),
            FOREIGN KEY (beneficiary_id) REFERENCES customer_profiles(customer_id)
        )
        ''')
        
        # =====================================================
        # 4. –¢–ê–ë–õ–ò–¶–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–• –°–•–ï–ú
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS detected_schemes (
            scheme_id INTEGER PRIMARY KEY AUTOINCREMENT,
            detected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            scheme_type TEXT NOT NULL,  -- CIRCULAR, STAR, TRANSIT, SMURFING
            participants TEXT NOT NULL,  -- JSON –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            transactions TEXT NOT NULL,  -- JSON –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            
            total_amount REAL,
            scheme_start_date TIMESTAMP,
            scheme_end_date TIMESTAMP,
            
            risk_score REAL DEFAULT 0.0,
            confidence REAL DEFAULT 0.0,
            
            is_confirmed BOOLEAN DEFAULT 0,
            analyst_notes TEXT,
            
            -- –°—Ç–∞—Ç—É—Å
            status TEXT DEFAULT 'DETECTED',  -- DETECTED, INVESTIGATING, CONFIRMED, FALSE_POSITIVE
            resolution_date TIMESTAMP,
            resolution_notes TEXT
        )
        ''')
        
        # =====================================================
        # 5. –¢–ê–ë–õ–ò–¶–ê –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–û–ô –ò–°–¢–û–†–ò–ò
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS behavioral_history (
            history_id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id TEXT NOT NULL,
            date DATE NOT NULL,
            
            -- –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            transaction_count INTEGER DEFAULT 0,
            total_amount REAL DEFAULT 0.0,
            
            -- –ê–Ω–æ–º–∞–ª–∏–∏
            has_anomaly BOOLEAN DEFAULT 0,
            anomaly_types TEXT,  -- JSON –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
            anomaly_score REAL DEFAULT 0.0,
            
            UNIQUE(customer_id, date),
            FOREIGN KEY (customer_id) REFERENCES customer_profiles(customer_id)
        )
        ''')
        
        # =====================================================
        # 6. –¢–ê–ë–õ–ò–¶–ê –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –ö–û–†–ò–î–û–†–û–í
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS geographic_corridors (
            corridor_id INTEGER PRIMARY KEY AUTOINCREMENT,
            
            sender_country TEXT NOT NULL,
            beneficiary_country TEXT NOT NULL,
            transit_countries TEXT,  -- JSON –º–∞—Å—Å–∏–≤
            
            -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            transaction_count INTEGER DEFAULT 0,
            total_amount REAL DEFAULT 0.0,
            suspicious_count INTEGER DEFAULT 0,
            suspicion_rate REAL DEFAULT 0.0,
            
            last_transaction_date TIMESTAMP,
            
            -- –†–∏—Å–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞
            corridor_risk_score REAL DEFAULT 0.0,
            is_high_risk BOOLEAN DEFAULT 0,
            
            UNIQUE(sender_country, beneficiary_country, transit_countries)
        )
        ''')
        
        # =====================================================
        # 7. –¢–ê–ë–õ–ò–¶–ê –ê–õ–ï–†–¢–û–í –ò –°–ü–û
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS alerts (
            alert_id INTEGER PRIMARY KEY AUTOINCREMENT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            transaction_id TEXT,
            customer_id TEXT,
            scheme_id INTEGER,
            
            alert_type TEXT NOT NULL,  -- TRANSACTION, BEHAVIOR, NETWORK, GEOGRAPHIC
            severity TEXT NOT NULL,  -- LOW, MEDIUM, HIGH, CRITICAL
            
            title TEXT NOT NULL,
            description TEXT,
            evidence TEXT,  -- JSON —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
            
            risk_score REAL,
            
            -- –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            status TEXT DEFAULT 'NEW',  -- NEW, REVIEWING, ESCALATED, CLOSED
            assigned_to TEXT,
            reviewed_at TIMESTAMP,
            resolution TEXT,
            
            -- –°–ü–û
            str_required BOOLEAN DEFAULT 0,
            str_id TEXT,
            str_codes TEXT,  -- JSON –º–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –ê–§–ú
            
            FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id),
            FOREIGN KEY (customer_id) REFERENCES customer_profiles(customer_id),
            FOREIGN KEY (scheme_id) REFERENCES detected_schemes(scheme_id)
        )
        ''')
        
        # =====================================================
        # 8. –¢–ê–ë–õ–ò–¶–ê –ù–ê–°–¢–†–û–ï–ö –ò –ú–ï–¢–ê–î–ê–ù–ù–´–•
        # =====================================================
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS system_settings (
            setting_key TEXT PRIMARY KEY,
            setting_value TEXT,
            setting_type TEXT,  -- STRING, NUMBER, JSON, BOOLEAN
            description TEXT,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # =====================================================
        # –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
        # =====================================================
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è customer_profiles
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_customer_risk 
        ON customer_profiles(overall_risk_score DESC)
        ''')
        
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_customer_suspicious 
        ON customer_profiles(str_count DESC)
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è transactions
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_transaction_date 
        ON transactions(transaction_date DESC)
        ''')
        
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_transaction_risk 
        ON transactions(final_risk_score DESC)
        ''')
        
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_transaction_suspicious 
        ON transactions(is_suspicious)
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è network_connections
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_network_participants 
        ON network_connections(sender_id, beneficiary_id)
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è alerts
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_alert_status 
        ON alerts(status, created_at DESC)
        ''')
        
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_alert_severity 
        ON alerts(severity, created_at DESC)
        ''')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.connection.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._initialize_settings()
        
    def _initialize_settings(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = [
            ('threshold_cash', '2000000', 'NUMBER', '–ü–æ—Ä–æ–≥ –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'),
            ('threshold_transfer', '7000000', 'NUMBER', '–ü–æ—Ä–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤'),
            ('threshold_international', '1000000', 'NUMBER', '–ü–æ—Ä–æ–≥ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'),
            ('min_risk_for_str', '7.0', 'NUMBER', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –¥–ª—è –°–ü–û'),
            ('min_risk_for_edd', '5.0', 'NUMBER', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –¥–ª—è —É—Å–∏–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏'),
            ('behavioral_lookback_days', '90', 'NUMBER', '–î–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è'),
            ('network_min_connections', '5', 'NUMBER', '–ú–∏–Ω–∏–º—É–º —Å–≤—è–∑–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º'),
            ('high_risk_countries', '["IR", "KP", "SY", "AF", "YE", "MM"]', 'JSON', '–°–ø–∏—Å–æ–∫ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω'),
            ('offshore_countries', '["KY", "VG", "BS", "BZ", "SC", "VU"]', 'JSON', '–°–ø–∏—Å–æ–∫ –æ—Ñ—à–æ—Ä–Ω—ã—Ö –∑–æ–Ω'),
        ]
        
        cursor = self.connection.cursor()
        for key, value, type_, desc in settings:
            cursor.execute('''
            INSERT OR IGNORE INTO system_settings (setting_key, setting_value, setting_type, description)
            VALUES (?, ?, ?, ?)
            ''', (key, value, type_, desc))
        
        self.connection.commit()
    
    # =====================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–õ–ò–ï–ù–¢–°–ö–ò–ú–ò –ü–†–û–§–ò–õ–Ø–ú–ò
    # =====================================================
    
    def save_customer_profile(self, profile_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        cursor = self.connection.cursor()
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ JSON
            behavior_patterns = json.dumps(profile_data.get('behavior_patterns', {}))
            typical_counterparties = json.dumps(profile_data.get('typical_counterparties', []))
            typical_purposes = json.dumps(profile_data.get('typical_purposes', []))
            
            cursor.execute('''
            INSERT OR REPLACE INTO customer_profiles (
                customer_id, full_name, iin, bin, birth_date, citizenship, residence_country,
                is_individual, is_pep, is_foreign, business_type,
                base_risk_level, country_risk, product_risk, behavior_risk, overall_risk_score,
                total_transaction_count, total_amount, avg_transaction, max_transaction, monthly_avg,
                behavior_patterns, typical_counterparties, typical_purposes,
                str_count, last_str_date, false_positive_count, confirmed_suspicious,
                updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            ''', (
                profile_data['customer_id'],
                profile_data.get('full_name'),
                profile_data.get('iin'),
                profile_data.get('bin'),
                profile_data.get('birth_date'),
                profile_data.get('citizenship', 'KZ'),
                profile_data.get('residence_country', 'KZ'),
                profile_data.get('is_individual', True),
                profile_data.get('is_pep', False),
                profile_data.get('is_foreign', False),
                profile_data.get('business_type'),
                profile_data.get('base_risk_level', 'LOW'),
                profile_data.get('country_risk', 1),
                profile_data.get('product_risk', 1),
                profile_data.get('behavior_risk', 1),
                profile_data.get('overall_risk_score', 1.0),
                profile_data.get('total_transaction_count', 0),
                profile_data.get('total_amount', 0.0),
                profile_data.get('avg_transaction', 0.0),
                profile_data.get('max_transaction', 0.0),
                profile_data.get('monthly_avg', 0.0),
                behavior_patterns,
                typical_counterparties,
                typical_purposes,
                profile_data.get('str_count', 0),
                profile_data.get('last_str_date'),
                profile_data.get('false_positive_count', 0),
                profile_data.get('confirmed_suspicious', 0)
            ))
            
            self.connection.commit()
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ {profile_data['customer_id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            self.connection.rollback()
            return False
    
    def get_customer_profile(self, customer_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        cursor = self.connection.cursor()
        
        cursor.execute('''
        SELECT * FROM customer_profiles WHERE customer_id = ?
        ''', (customer_id,))
        
        row = cursor.fetchone()
        if row:
            profile = dict(row)
            # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
            profile['behavior_patterns'] = json.loads(profile.get('behavior_patterns', '{}'))
            profile['typical_counterparties'] = json.loads(profile.get('typical_counterparties', '[]'))
            profile['typical_purposes'] = json.loads(profile.get('typical_purposes', '[]'))
            return profile
        
        return None
    
    # =====================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò
    # =====================================================
    
    def save_transaction(self, transaction_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        cursor = self.connection.cursor()
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ JSON
            risk_indicators = json.dumps(transaction_data.get('risk_indicators', {}))
            rule_triggers = json.dumps(transaction_data.get('rule_triggers', []))
            
            cursor.execute('''
            INSERT OR REPLACE INTO transactions (
                transaction_id, amount, currency, amount_kzt, transaction_date, value_date, channel,
                sender_id, sender_name, sender_account, sender_bank_bic, sender_country,
                beneficiary_id, beneficiary_name, beneficiary_account, beneficiary_bank_bic, beneficiary_country,
                operation_code, operation_type, purpose_code, purpose_text, is_cash, is_international,
                final_risk_score, is_suspicious, str_generated, str_id,
                risk_indicators, rule_triggers
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                transaction_data['transaction_id'],
                transaction_data['amount'],
                transaction_data.get('currency', 'KZT'),
                transaction_data['amount_kzt'],
                transaction_data['transaction_date'],
                transaction_data.get('value_date'),
                transaction_data.get('channel'),
                transaction_data.get('sender_id'),
                transaction_data.get('sender_name'),
                transaction_data.get('sender_account'),
                transaction_data.get('sender_bank_bic'),
                transaction_data.get('sender_country', 'KZ'),
                transaction_data.get('beneficiary_id'),
                transaction_data.get('beneficiary_name'),
                transaction_data.get('beneficiary_account'),
                transaction_data.get('beneficiary_bank_bic'),
                transaction_data.get('beneficiary_country', 'KZ'),
                transaction_data.get('operation_code'),
                transaction_data.get('operation_type'),
                transaction_data.get('purpose_code'),
                transaction_data.get('purpose_text'),
                transaction_data.get('is_cash', False),
                transaction_data.get('is_international', False),
                transaction_data.get('final_risk_score', 0.0),
                transaction_data.get('is_suspicious', False),
                transaction_data.get('str_generated', False),
                transaction_data.get('str_id'),
                risk_indicators,
                rule_triggers
            ))
            
            self.connection.commit()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            self.connection.rollback()
            return False
    
    # =====================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –°–û –°–•–ï–ú–ê–ú–ò
    # =====================================================
    
    def save_detected_scheme(self, scheme_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã"""
        cursor = self.connection.cursor()
        
        try:
            participants = json.dumps(scheme_data.get('participants', []))
            transactions = json.dumps(scheme_data.get('transactions', []))
            
            cursor.execute('''
            INSERT INTO detected_schemes (
                scheme_type, participants, transactions, total_amount,
                scheme_start_date, scheme_end_date, risk_score, confidence
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                scheme_data['scheme_type'],
                participants,
                transactions,
                scheme_data.get('total_amount', 0.0),
                scheme_data.get('scheme_start_date'),
                scheme_data.get('scheme_end_date'),
                scheme_data.get('risk_score', 0.0),
                scheme_data.get('confidence', 0.0)
            ))
            
            self.connection.commit()
            scheme_id = cursor.lastrowid
            print(f"‚úÖ –°—Ö–µ–º–∞ {scheme_data['scheme_type']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {scheme_id}")
            return scheme_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
            self.connection.rollback()
            return -1
    
    # =====================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–õ–ï–†–¢–ê–ú–ò
    # =====================================================
    
    def create_alert(self, alert_data: Dict) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        cursor = self.connection.cursor()
        
        try:
            evidence = json.dumps(alert_data.get('evidence', {}))
            str_codes = json.dumps(alert_data.get('str_codes', []))
            
            cursor.execute('''
            INSERT INTO alerts (
                transaction_id, customer_id, scheme_id, alert_type, severity,
                title, description, evidence, risk_score, str_required, str_codes
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                alert_data.get('transaction_id'),
                alert_data.get('customer_id'),
                alert_data.get('scheme_id'),
                alert_data['alert_type'],
                alert_data['severity'],
                alert_data['title'],
                alert_data.get('description'),
                evidence,
                alert_data.get('risk_score', 0.0),
                alert_data.get('str_required', False),
                str_codes
            ))
            
            self.connection.commit()
            alert_id = cursor.lastrowid
            print(f"‚ö†Ô∏è –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {alert_id}")
            return alert_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            self.connection.rollback()
            return -1
    
    # =====================================================
    # –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´
    # =====================================================
    
    def get_high_risk_customers(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º"""
        cursor = self.connection.cursor()
        
        cursor.execute('''
        SELECT customer_id, full_name, overall_risk_score, str_count, 
               total_transaction_count, total_amount
        FROM customer_profiles
        WHERE overall_risk_score >= 5.0
        ORDER BY overall_risk_score DESC, str_count DESC
        LIMIT ?
        ''', (limit,))
        
        return [dict(row) for row in cursor.fetchall()]
    
    def get_recent_suspicious_transactions(self, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        cursor = self.connection.cursor()
        
        cursor.execute('''
        SELECT t.*, 
               c1.full_name as sender_name_full,
               c2.full_name as beneficiary_name_full
        FROM transactions t
        LEFT JOIN customer_profiles c1 ON t.sender_id = c1.customer_id
        LEFT JOIN customer_profiles c2 ON t.beneficiary_id = c2.customer_id
        WHERE t.is_suspicious = 1
          AND t.transaction_date >= datetime('now', '-' || ? || ' days')
        ORDER BY t.transaction_date DESC
        ''', (days,))
        
        results = []
        for row in cursor.fetchall():
            tx = dict(row)
            tx['risk_indicators'] = json.loads(tx.get('risk_indicators', '{}'))
            tx['rule_triggers'] = json.loads(tx.get('rule_triggers', '[]'))
            results.append(tx)
        
        return results
    
    def get_corridor_statistics(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–æ—Ä–∏–¥–æ—Ä–∞–º"""
        cursor = self.connection.cursor()
        
        cursor.execute('''
        SELECT * FROM geographic_corridors
        WHERE transaction_count > 0
        ORDER BY suspicion_rate DESC, transaction_count DESC
        LIMIT 20
        ''')
        
        results = []
        for row in cursor.fetchall():
            corridor = dict(row)
            corridor['transit_countries'] = json.loads(corridor.get('transit_countries', '[]'))
            results.append(corridor)
        
        return results
    
    def get_active_schemes(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ö–µ–º"""
        cursor = self.connection.cursor()
        
        cursor.execute('''
        SELECT * FROM detected_schemes
        WHERE status IN ('DETECTED', 'INVESTIGATING')
        ORDER BY risk_score DESC, detected_at DESC
        ''')
        
        results = []
        for row in cursor.fetchall():
            scheme = dict(row)
            scheme['participants'] = json.loads(scheme.get('participants', '[]'))
            scheme['transactions'] = json.loads(scheme.get('transactions', '[]'))
            results.append(scheme)
        
        return results
    
    def get_system_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        cursor = self.connection.cursor()
        
        stats = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        cursor.execute('''
        SELECT 
            COUNT(*) as total_customers,
            COUNT(CASE WHEN overall_risk_score >= 7 THEN 1 END) as high_risk_customers,
            COUNT(CASE WHEN str_count > 0 THEN 1 END) as suspicious_customers,
            AVG(overall_risk_score) as avg_risk_score
        FROM customer_profiles
        ''')
        stats['customers'] = dict(cursor.fetchone())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        cursor.execute('''
        SELECT 
            COUNT(*) as total_transactions,
            COUNT(CASE WHEN is_suspicious THEN 1 END) as suspicious_transactions,
            COUNT(CASE WHEN str_generated THEN 1 END) as str_generated,
            SUM(amount_kzt) as total_volume,
            AVG(final_risk_score) as avg_risk_score
        FROM transactions
        ''')
        stats['transactions'] = dict(cursor.fetchone())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–ª–µ—Ä—Ç–∞–º
        cursor.execute('''
        SELECT 
            COUNT(*) as total_alerts,
            COUNT(CASE WHEN status = 'NEW' THEN 1 END) as new_alerts,
            COUNT(CASE WHEN severity = 'CRITICAL' THEN 1 END) as critical_alerts,
            COUNT(CASE WHEN str_required THEN 1 END) as str_required
        FROM alerts
        ''')
        stats['alerts'] = dict(cursor.fetchone())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ö–µ–º–∞–º
        cursor.execute('''
        SELECT 
            COUNT(*) as total_schemes,
            COUNT(CASE WHEN status = 'CONFIRMED' THEN 1 END) as confirmed_schemes,
            SUM(total_amount) as total_scheme_amount
        FROM detected_schemes
        ''')
        stats['schemes'] = dict(cursor.fetchone())
        
        return stats
    
    def get_all_transactions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        cursor.execute("SELECT * FROM transactions")
        return [dict(row) for row in cursor.fetchall()]
    
    def get_db_cursor(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.connection.cursor()
    
    def commit(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.connection.commit()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


# =====================================================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# =====================================================

def demonstrate_database():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("="*60)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• AML")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    db = AMLDatabaseManager("aml_demo.db")
    
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
    print("\nüìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    customer1 = {
        'customer_id': 'CLIENT_001',
        'full_name': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        'iin': '901231300123',
        'citizenship': 'KZ',
        'base_risk_level': 'MEDIUM',
        'overall_risk_score': 4.5,
        'behavior_patterns': {
            'usual_transaction_range': [50000, 500000],
            'typical_hours': [9, 10, 11, 14, 15, 16]
        },
        'typical_counterparties': ['–¢–û–û –ê–ª—å—Ñ–∞', '–ò–ü –ë–µ—Ç–∞'],
        'total_transaction_count': 150,
        'total_amount': 25000000
    }
    
    customer2 = {
        'customer_id': 'OFFSHORE_001',
        'full_name': 'Offshore Holdings Ltd',
        'bin': '123456789012',
        'residence_country': 'KY',
        'is_individual': False,
        'is_foreign': True,
        'base_risk_level': 'HIGH',
        'overall_risk_score': 8.5,
        'str_count': 3
    }
    
    db.save_customer_profile(customer1)
    db.save_customer_profile(customer2)
    
    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print("\nüí∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    transaction1 = {
        'transaction_id': 'TX_001',
        'amount': 8500000,
        'amount_kzt': 8500000,
        'transaction_date': datetime.now(),
        'channel': 'internet',
        'sender_id': 'CLIENT_001',
        'sender_name': '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
        'beneficiary_id': 'OFFSHORE_001',
        'beneficiary_name': 'Offshore Holdings',
        'beneficiary_country': 'KY',
        'operation_type': 'TRANSFER_INTERNATIONAL',
        'purpose_text': '–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥',
        'is_international': True,
        'final_risk_score': 7.8,
        'is_suspicious': True,
        'risk_indicators': {
            'is_offshore': True,
            'is_round_amount': False,
            'is_high_risk_country': False
        },
        'rule_triggers': ['R005: –û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—Ñ—à–æ—Ä–Ω–æ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–µ–π']
    }
    
    db.save_transaction(transaction1)
    
    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é —Å—Ö–µ–º—É
    print("\nüï∏Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã...")
    
    scheme = {
        'scheme_type': 'CIRCULAR',
        'participants': ['CLIENT_001', 'COMPANY_A', 'COMPANY_B', 'OFFSHORE_001'],
        'transactions': ['TX_001', 'TX_002', 'TX_003', 'TX_004'],
        'total_amount': 25000000,
        'scheme_start_date': datetime.now(),
        'risk_score': 9.2,
        'confidence': 0.85
    }
    
    scheme_id = db.save_detected_scheme(scheme)
    
    # 4. –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
    print("\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞...")
    
    alert = {
        'transaction_id': 'TX_001',
        'customer_id': 'CLIENT_001',
        'scheme_id': scheme_id,
        'alert_type': 'NETWORK',
        'severity': 'HIGH',
        'title': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä—É–≥–æ–≤–∞—è —Å—Ö–µ–º–∞',
        'description': '–ö–ª–∏–µ–Ω—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫—Ä—É–≥–æ–≤–æ–π —Å—Ö–µ–º–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –æ—Ñ—à–æ—Ä',
        'risk_score': 9.2,
        'str_required': True,
        'str_codes': ['1054', '1041'],
        'evidence': {
            'scheme_type': 'CIRCULAR',
            'participants_count': 4,
            'total_amount': 25000000
        }
    }
    
    db.create_alert(alert)
    
    # 5. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    print("\nüìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
    
    # –ö–ª–∏–µ–Ω—Ç—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    print("\nüéØ –ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º:")
    high_risk = db.get_high_risk_customers(5)
    for customer in high_risk:
        print(f"  ‚Ä¢ {customer['customer_id']}: —Ä–∏—Å–∫ {customer['overall_risk_score']}, –°–ü–û: {customer['str_count']}")
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print("\nüí∞ –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
    suspicious_tx = db.get_recent_suspicious_transactions(30)
    for tx in suspicious_tx:
        print(f"  ‚Ä¢ {tx['transaction_id']}: {tx['amount']:,.0f} {tx['currency']} (—Ä–∏—Å–∫: {tx['final_risk_score']})")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    stats = db.get_system_statistics()
    print(f"  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats['customers']['total_customers']}")
    print(f"  ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (30 –¥–Ω–µ–π): {stats['transactions']['total_transactions']}")
    print(f"  ‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ (7 –¥–Ω–µ–π): {stats['alerts']['total_alerts']}")
    print(f"  ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ö–µ–º: {stats['schemes']['total_schemes']}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
    db.close()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ: aml_demo.db")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    demonstrate_database()
