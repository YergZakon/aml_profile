#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Å–µ—Ö AML –ø—Ä–æ—Ñ–∏–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
"""

import sys
import os
import traceback
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
try:
    from transaction_profile_afm import TransactionProfile
    print("‚úÖ TransactionProfile –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TransactionProfile: {e}")

try:
    from customer_profile_afm import CustomerProfile
    print("‚úÖ CustomerProfile –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CustomerProfile: {e}")

try:
    from network_profile_afm import NetworkProfile
    print("‚úÖ NetworkProfile –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ NetworkProfile: {e}")

try:
    from behavioral_profile_afm import BehavioralProfile
    print("‚úÖ BehavioralProfile –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BehavioralProfile: {e}")

try:
    from geographic_profile_afm import GeographicProfile
    print("‚úÖ GeographicProfile –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GeographicProfile: {e}")

print("\n" + "="*60)
print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• AML –ü–†–û–§–ò–õ–ï–ô")
print("="*60)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
test_transaction = {
    'transaction_id': 'TEST_001',
    'amount': 1500000.0,  # 1.5M —Ç–µ–Ω–≥–µ
    'amount_kzt': 1500000.0,
    'currency': 'KZT',
    'transaction_date': '2024-12-01 14:30:00',
    'date': datetime(2024, 12, 1, 14, 30, 0),  # –î–ª—è BehavioralProfile
    'sender_id': '123456789012',
    'sender_name': '–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
    'beneficiary_id': '987654321098',
    'beneficiary_name': '–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å',
    'purpose_text': '–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä',
    'is_suspicious': False,
    'final_risk_score': 1.0
}

def test_transaction_profile():
    """–¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüîç –¢–ï–°–¢ 1: TransactionProfile")
    print("-" * 40)
    
    try:
        profile = TransactionProfile()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods_to_test = [
            'analyze_transaction',
            'is_round_amount', 
            'is_unusual_time',
            'calculate_final_score',
            'analyze_transaction_patterns'
        ]
        
        for method_name in methods_to_test:
            if hasattr(profile, method_name):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_transaction:")
        try:
            result = profile.analyze_transaction(test_transaction)
            print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: risk_score = {result.get('risk_score', 'N/A')}")
            print(f"  ‚úÖ Suspicious flags: {len(result.get('suspicious_flags', []))}")
            return True
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_transaction: {e}")
            traceback.print_exc()
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ TransactionProfile: {e}")
        return False

def test_customer_profile():
    """–¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüë§ –¢–ï–°–¢ 2: CustomerProfile")
    print("-" * 40)
    
    try:
        profile = CustomerProfile()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods_to_test = [
            'analyze_customer',
            'analyze_customer_data', 
            'calculate_risk_score',
            'detect_anomalies'
        ]
        
        for method_name in methods_to_test:
            if hasattr(profile, method_name):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
        if hasattr(profile, 'analyze_customer'):
            print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_customer:")
            try:
                result = profile.analyze_customer('123456789012')
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return True
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_customer: {e}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        if hasattr(profile, 'analyze_customer_data'):
            print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_customer_data:")
            try:
                result = profile.analyze_customer_data(test_transaction)
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return True
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_customer_data: {e}")
                
        return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ CustomerProfile: {e}")
        return False

def test_network_profile():
    """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüï∏Ô∏è –¢–ï–°–¢ 3: NetworkProfile")
    print("-" * 40)
    
    try:
        profile = NetworkProfile()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods_to_test = [
            'analyze_network_patterns',
            'detect_circular_schemes',
            'detect_star_schemes', 
            'detect_smurfing',
            'build_graph'
        ]
        
        for method_name in methods_to_test:
            if hasattr(profile, method_name):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏
        if hasattr(profile, 'analyze_network_patterns'):
            print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_network_patterns:")
            try:
                result = profile.analyze_network_patterns(test_transaction)
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return True
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_network_patterns: {e}")
                traceback.print_exc()
                
        return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ NetworkProfile: {e}")
        return False

def test_behavioral_profile():
    """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüé≠ –¢–ï–°–¢ 4: BehavioralProfile")
    print("-" * 40)
    
    try:
        # BehavioralProfile —Ç—Ä–µ–±—É–µ—Ç customer_id
        profile = BehavioralProfile('123456789012')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods_to_test = [
            'analyze_behavior',
            'detect_anomalies',
            'build_baseline_profile',
            'update_transaction_history'
        ]
        
        for method_name in methods_to_test:
            if hasattr(profile, method_name):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if hasattr(profile, 'analyze_behavior'):
            print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_behavior:")
            try:
                result = profile.analyze_behavior('123456789012', test_transaction)
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return True
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_behavior: {e}")
                traceback.print_exc()
                
        return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ BehavioralProfile: {e}")
        return False

def test_geographic_profile():
    """–¢–µ—Å—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüåç –¢–ï–°–¢ 5: GeographicProfile")
    print("-" * 40)
    
    try:
        # GeographicProfile –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å db_manager
        profile = GeographicProfile(None)  # –ü—Ä–æ–±—É–µ–º —Å None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        methods_to_test = [
            'analyze_geography',
            'analyze_transaction_geography',
            'get_country_risk',
            'get_country_profile'
        ]
        
        for method_name in methods_to_test:
            if hasattr(profile, method_name):
                print(f"  ‚úÖ –ú–µ—Ç–æ–¥ {method_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚ùå –ú–µ—Ç–æ–¥ {method_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏
        if hasattr(profile, 'analyze_geography'):
            print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_geography:")
            try:
                result = profile.analyze_geography(test_transaction)
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return True
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_geography: {e}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        if hasattr(profile, 'analyze_transaction_geography'):
            print("\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º analyze_transaction_geography:")
            try:
                result = profile.analyze_transaction_geography(test_transaction)
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return True
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ analyze_transaction_geography: {e}")
                
        return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ GeographicProfile: {e}")
        traceback.print_exc()
        return False

def test_unified_pipeline_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å unified pipeline"""
    print("\nüîó –¢–ï–°–¢ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Unified Pipeline")
    print("-" * 40)
    
    try:
        from unified_aml_pipeline import UnifiedAMLPipeline
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        pipeline = UnifiedAMLPipeline()
        
        print("  üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤:")
        for analyzer_name, analyzer in pipeline.analyzers.items():
            if analyzer:
                print(f"  ‚úÖ {analyzer_name}: {type(analyzer).__name__}")
            else:
                print(f"  ‚ùå {analyzer_name}: None")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Unified Pipeline: {e}")
        traceback.print_exc()
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.append(("TransactionProfile", test_transaction_profile()))
    results.append(("CustomerProfile", test_customer_profile()))
    results.append(("NetworkProfile", test_network_profile()))
    results.append(("BehavioralProfile", test_behavioral_profile()))
    results.append(("GeographicProfile", test_geographic_profile()))
    results.append(("Unified Pipeline", test_unified_pipeline_integration()))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        if result:
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            passed += 1
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")

if __name__ == "__main__":
    main()