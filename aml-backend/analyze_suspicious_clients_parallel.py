import sqlite3
import concurrent.futures
import time
import psutil
import os
from datetime import datetime
from typing import List, Dict, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
try:
    from customer_profile_afm import CustomerProfile
    from geographic_profile_afm import GeographicProfile
    from transaction_profile_afm import TransactionProfile
    from behavioral_profile_afm import BehavioralProfile
    from network_profile_afm import NetworkProfile
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {e}")

def analyze_single_client(client_id: str, db_path: str = 'aml_system.db') -> Optional[Dict]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    conn = None
    try:
        # –ö–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        start_time = time.time()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT * FROM customer_profiles 
            WHERE customer_id = ?
        ''', (client_id,))
        client_profile = cursor.fetchone()
        
        if not client_profile:
            return None
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT * FROM transactions 
            WHERE sender_id = ? OR beneficiary_id = ?
            ORDER BY transaction_date DESC
            LIMIT 100
        ''', (client_id, client_id))
        transactions = cursor.fetchall()
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        total_sent = 0
        total_received = 0
        suspicious_count = 0
        countries = set()
        counterparties = set()
        
        for tx in transactions:
            if tx['sender_id'] == client_id:
                total_sent += tx['amount_kzt']
                counterparties.add(tx['beneficiary_id'])
            else:
                total_received += tx['amount_kzt']
                counterparties.add(tx['sender_id'])
                
            if tx['is_suspicious']:
                suspicious_count += 1
                
            # –°–æ–±–∏—Ä–∞–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—é
            countries.add('KZ')  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # 4. –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
        base_risk = client_profile['overall_risk_score'] if client_profile['overall_risk_score'] else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
        tx_risk = 3 if len(transactions) > 50 else 0
        behavior_risk = min(suspicious_count * 2, 10)
        volume_risk = 2 if (total_sent + total_received) > 50000000 else 0  # > 50 –º–ª–Ω —Ç–µ–Ω–≥–µ
        network_risk = 1 if len(counterparties) > 20 else 0
        
        total_risk_score = base_risk + tx_risk + behavior_risk + volume_risk + network_risk
        
        end_time = time.time()
        analysis_time = end_time - start_time
        
        return {
            'client_id': client_id,
            'analysis_time': analysis_time,
            'total_risk_score': total_risk_score,
            'transactions_count': len(transactions),
            'counterparties_count': len(counterparties),
            'total_volume': total_sent + total_received,
            'suspicious_transactions': suspicious_count,
            'is_suspicious': total_risk_score > 10,
            'risk_factors': {
                'base_risk': base_risk,
                'transaction_risk': tx_risk,
                'behavior_risk': behavior_risk,
                'volume_risk': volume_risk,
                'network_risk': network_risk
            }
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        return None
    finally:
        if conn:
            conn.close()

def get_client_list(db_path: str = 'aml_system.db', limit: int = None) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    if limit:
        cursor.execute('''
            SELECT customer_id FROM customer_profiles 
            ORDER BY overall_risk_score DESC
            LIMIT ?
        ''', (limit,))
    else:
        cursor.execute('''
            SELECT customer_id FROM customer_profiles 
            ORDER BY overall_risk_score DESC
        ''')
    
    client_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    return client_ids

def analyze_batch_parallel(client_ids: List[str], 
                          max_workers: int = None, 
                          batch_size: int = 500,
                          db_path: str = 'aml_system.db',
                          show_progress: bool = True) -> Tuple[List[Dict], Dict]:
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è 24-—è–¥–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    """
    
    if max_workers is None:
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è Intel Core Ultra 9 275HX
        max_workers = min(20, len(client_ids))
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(client_ids):,}")
    print(f"   ‚ö° –†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {max_workers}")
    print(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    
    start_time = time.time()
    results = []
    failed_analyses = []
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    initial_memory = psutil.virtual_memory().percent
    initial_cpu = psutil.cpu_percent()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞–º—è—Ç–∏
    batches = [client_ids[i:i + batch_size] for i in range(0, len(client_ids), batch_size)]
    
    print(f"   üîÑ –ë–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(batches)}")
    print()
    
    total_processed = 0
    
    for batch_num, batch in enumerate(batches, 1):
        batch_start_time = time.time()
        
        print(f"üìä –ë–∞—Ç—á {batch_num}/{len(batches)} ({len(batch)} –∫–ª–∏–µ–Ω—Ç–æ–≤):")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProcessPoolExecutor –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        with concurrent.futures.ProcessPoolExecutor(max_workers=max_workers) as executor:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø—É–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            future_to_client = {
                executor.submit(analyze_single_client, client_id, db_path): client_id 
                for client_id in batch
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            for future in concurrent.futures.as_completed(future_to_client):
                client_id = future_to_client[future]
                try:
                    result = future.result(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                    if result:
                        results.append(result)
                        if show_progress and len(results) % 50 == 0:
                            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}/{len(client_ids)}")
                    else:
                        failed_analyses.append(client_id)
                        
                except concurrent.futures.TimeoutError:
                    print(f"  ‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
                    failed_analyses.append(client_id)
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
                    failed_analyses.append(client_id)
        
        batch_time = time.time() - batch_start_time
        total_processed += len(batch)
        
        print(f"  ‚è±Ô∏è  –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time:.2f} —Å–µ–∫")
        print(f"  üìà –°–∫–æ—Ä–æ—Å—Ç—å: {len(batch)/batch_time:.1f} –∫–ª–∏–µ–Ω—Ç–æ–≤/—Å–µ–∫")
        print()
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_memory = psutil.virtual_memory().percent
    
    stats = {
        'total_time': total_time,
        'total_clients': len(client_ids),
        'successful_analyses': len(results),
        'failed_analyses': len(failed_analyses),
        'success_rate': len(results) / len(client_ids) * 100,
        'avg_time_per_client': total_time / len(client_ids),
        'clients_per_second': len(client_ids) / total_time,
        'memory_usage_change': final_memory - initial_memory,
        'max_workers_used': max_workers,
        'batches_processed': len(batches)
    }
    
    return results, stats

def analyze_suspicious_clients_parallel(db_path: str = 'aml_system.db', 
                                      limit: int = None,
                                      max_workers: int = None,
                                      output_file: str = None) -> Dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    
    print("üîç –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ö–õ–ò–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_count = psutil.cpu_count()
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    print(f"üíª –°–∏—Å—Ç–µ–º–∞:")
    print(f"   CPU: Intel Core Ultra 9 275HX ({cpu_count} —è–¥–µ—Ä)")
    print(f"   RAM: {memory_gb:.1f} GB")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    client_ids = get_client_list(db_path, limit)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(client_ids):,}")
    print()
    
    if not client_ids:
        print("‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results, stats = analyze_batch_parallel(
        client_ids=client_ids,
        max_workers=max_workers,
        db_path=db_path
    )
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 40)
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {stats['clients_per_second']:.1f} –∫–ª–∏–µ–Ω—Ç–æ–≤/—Å–µ–∫")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['successful_analyses']:,}/{stats['total_clients']:,} ({stats['success_rate']:.1f}%)")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['failed_analyses']:,}")
    print(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage_change']:+.1f}%")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    suspicious_clients = [r for r in results if r['is_suspicious']]
    high_risk_clients = [r for r in results if r['total_risk_score'] > 15]
    
    print("üö® –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 30)
    print(f"üî¥ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(suspicious_clients):,}")
    print(f"üü† –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (>15): {len(high_risk_clients):,}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {len(suspicious_clients)/len(results)*100:.1f}%")
    print()
    
    # –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
    if suspicious_clients:
        print("üîù –¢–û–ü-10 –°–ê–ú–´–• –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ö–õ–ò–ï–ù–¢–û–í:")
        print("-" * 50)
        top_suspicious = sorted(suspicious_clients, key=lambda x: x['total_risk_score'], reverse=True)[:10]
        
        for i, client in enumerate(top_suspicious, 1):
            print(f"{i:2d}. –ö–ª–∏–µ–Ω—Ç {client['client_id']}")
            print(f"    –†–∏—Å–∫-—Å–∫–æ—Ä: {client['total_risk_score']:.1f}")
            print(f"    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {client['transactions_count']:,}")
            print(f"    –û–±—ä–µ–º: {client['total_volume']:,.0f} —Ç–µ–Ω–≥–µ")
            print(f"    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {client['suspicious_transactions']}")
            print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    theoretical_speedup = cpu_count
    actual_speedup = 1 / stats['avg_time_per_client'] if stats['avg_time_per_client'] > 0 else 0
    efficiency = (actual_speedup / theoretical_speedup) * 100 if theoretical_speedup > 0 else 0
    
    print("üöÄ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ê–†–ê–õ–õ–ï–õ–ò–ó–ê–¶–ò–ò:")
    print("=" * 35)
    print(f"üéØ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {theoretical_speedup}x")
    print(f"‚ö° –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {stats['clients_per_second']:.1f} –∫–ª/—Å–µ–∫")
    print(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
    print()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if output_file:
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_file}...")
        save_results_to_file(results, stats, output_file)
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    return {
        'results': results,
        'stats': stats,
        'suspicious_clients': suspicious_clients,
        'high_risk_clients': high_risk_clients
    }

def save_results_to_file(results: List[Dict], stats: Dict, filename: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    import json
    
    output_data = {
        'analysis_timestamp': datetime.now().isoformat(),
        'statistics': stats,
        'results': results
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ AML-—Å–∏—Å—Ç–µ–º—ã")
    print()
    
    # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    results = analyze_suspicious_clients_parallel(
        db_path='aml_system.db',
        limit=None,  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        max_workers=20,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è 24-—è–¥–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        output_file='aml_analysis_results.json'
    )
    
    print("ÔøΩÔøΩ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!") 