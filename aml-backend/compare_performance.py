import time
import psutil
from simple_performance_test import analyze_single_client_simple, get_client_list
from analyze_suspicious_clients_parallel import analyze_batch_parallel

def test_sequential_performance(client_ids, db_path='aml_system.db'):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    print("üêå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏:")
    print("-" * 50)
    
    start_time = time.time()
    results = []
    
    for i, client_id in enumerate(client_ids, 1):
        if i % 50 == 0 or i <= 10:
            print(f"  üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {i}/{len(client_ids)}...")
        
        result = analyze_single_client_simple(client_id, db_path)
        if result:
            results.append(result)
    
    end_time = time.time()
    total_time = end_time - start_time
    
    return {
        'results': results,
        'total_time': total_time,
        'clients_per_second': len(results) / total_time,
        'success_rate': len(results) / len(client_ids) * 100
    }

def test_parallel_performance(client_ids, db_path='aml_system.db', max_workers=20):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏:")
    print("-" * 50)
    
    results, stats = analyze_batch_parallel(
        client_ids=client_ids,
        max_workers=max_workers,
        db_path=db_path,
        show_progress=True
    )
    
    return {
        'results': results,
        'total_time': stats['total_time'],
        'clients_per_second': stats['clients_per_second'],
        'success_rate': stats['success_rate']
    }

def compare_performance():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö –≤–µ—Ä—Å–∏–π"""
    print("‚ö° –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AML-–ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_count = psutil.cpu_count()
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    print(f"üíª –°–∏—Å—Ç–µ–º–∞:")
    print(f"   CPU: Intel Core Ultra 9 275HX ({cpu_count} —è–¥–µ—Ä)")
    print(f"   RAM: {memory_gb:.1f} GB")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    db_path = 'aml_system.db'
    test_sizes = [100, 500, 1000]  # –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    all_client_ids = get_client_list(db_path)
    print(f"üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(all_client_ids):,}")
    print()
    
    comparison_results = []
    
    for test_size in test_sizes:
        if test_size > len(all_client_ids):
            continue
            
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {test_size} –ö–õ–ò–ï–ù–¢–û–í:")
        print("=" * 40)
        
        # –ë–µ—Ä–µ–º –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤
        test_client_ids = all_client_ids[:test_size]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        sequential_result = test_sequential_performance(test_client_ids, db_path)
        
        print(f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {sequential_result['total_time']:.2f} —Å–µ–∫, "
              f"{sequential_result['clients_per_second']:.1f} –∫–ª/—Å–µ–∫")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        parallel_result = test_parallel_performance(test_client_ids, db_path, max_workers=20)
        
        print(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {parallel_result['total_time']:.2f} —Å–µ–∫, "
              f"{parallel_result['clients_per_second']:.1f} –∫–ª/—Å–µ–∫")
        print()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        speedup = sequential_result['total_time'] / parallel_result['total_time']
        efficiency = speedup / cpu_count * 100
        
        result_data = {
            'test_size': test_size,
            'sequential_time': sequential_result['total_time'],
            'parallel_time': parallel_result['total_time'],
            'sequential_speed': sequential_result['clients_per_second'],
            'parallel_speed': parallel_result['clients_per_second'],
            'speedup': speedup,
            'efficiency': efficiency,
            'sequential_success': sequential_result['success_rate'],
            'parallel_success': parallel_result['success_rate']
        }
        
        comparison_results.append(result_data)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¥–ª—è {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        print(f"   üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
        print(f"   üéØ –£–ª—É—á—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {(parallel_result['clients_per_second'] / sequential_result['clients_per_second']):.1f}x")
        print()
        print("-" * 60)
        print()
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("üìà –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("=" * 30)
    
    if comparison_results:
        avg_speedup = sum(r['speedup'] for r in comparison_results) / len(comparison_results)
        avg_efficiency = sum(r['efficiency'] for r in comparison_results) / len(comparison_results)
        max_speedup = max(r['speedup'] for r in comparison_results)
        
        print(f"üöÄ –°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {avg_speedup:.1f}x")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {avg_efficiency:.1f}%")
        print(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {max_speedup:.1f}x")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 20)
        
        if avg_speedup > 15:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ! –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞.")
        elif avg_speedup > 10:
            print("‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ! –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞.")
        elif avg_speedup > 5:
            print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
        else:
            print("‚ùå –ù–∏–∑–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ. –ù—É–∂–Ω–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.")
        
        print()
        
        if avg_efficiency > 70:
            print("‚úÖ –í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–¥–µ—Ä.")
        elif avg_efficiency > 50:
            print("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
        else:
            print("‚ùå –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ú–Ω–æ–≥–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        
        print()
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –±–∞–∑—ã
        best_result = max(comparison_results, key=lambda x: x['speedup'])
        total_clients = len(all_client_ids)
        
        sequential_time_full = (best_result['sequential_time'] / best_result['test_size']) * total_clients
        parallel_time_full = (best_result['parallel_time'] / best_result['test_size']) * total_clients
        
        print(f"üîÆ –ü–†–û–ì–ù–û–ó –¥–ª—è –≤—Å–µ—Ö {total_clients:,} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"   üêå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {sequential_time_full:.1f} —Å–µ–∫ ({sequential_time_full/60:.1f} –º–∏–Ω)")
        print(f"   üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {parallel_time_full:.1f} —Å–µ–∫ ({parallel_time_full/60:.1f} –º–∏–Ω)")
        print(f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {sequential_time_full - parallel_time_full:.1f} —Å–µ–∫ ({(sequential_time_full - parallel_time_full)/60:.1f} –º–∏–Ω)")
        print()
        
        print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {total_clients:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ {best_result['speedup']:.1f} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!")
        print(f"–≠—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç {(sequential_time_full - parallel_time_full)/60:.1f} –º–∏–Ω—É—Ç –≤—Ä–µ–º–µ–Ω–∏.")
    
    return comparison_results

if __name__ == "__main__":
    comparison_results = compare_performance() 