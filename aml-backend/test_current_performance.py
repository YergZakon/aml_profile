import sqlite3
import time
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from customer_profile_afm import CustomerProfile
    from geographic_profile_afm import GeographicProfile
    from transaction_profile_afm import TransactionProfile
    from behavioral_profile_afm import BehavioralProfile
    from network_profile_afm import NetworkProfile
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)

def get_available_databases():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    db_files = []
    for file in os.listdir('.'):
        if file.endswith('.db'):
            db_files.append(file)
    return db_files

def test_database_content(db_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"üìä –¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        client_tables = ['clients', 'customer_profiles', 'customers']
        client_table = None
        client_count = 0
        
        for table in client_tables:
            if table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                if count > 0:
                    client_table = table
                    client_count = count
                    break
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        tx_tables = ['transactions', 'transaction_data', 'tx']
        tx_table = None
        tx_count = 0
        
        for table in tx_tables:
            if table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                if count > 0:
                    tx_table = table
                    tx_count = count
                    break
        
        print(f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {client_count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ '{client_table}'")
        print(f"üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ '{tx_table}'")
        
        if client_table and client_count > 0:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
            cursor.execute(f"SELECT * FROM {client_table} LIMIT 5")
            columns = [description[0] for description in cursor.description]
            clients = cursor.fetchall()
            
            print(f"\nüë§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:")
            print(f"–°—Ç–æ–ª–±—Ü—ã: {', '.join(columns)}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            conn.close()
            return {
                'client_table': client_table,
                'client_count': client_count,
                'tx_table': tx_table,
                'tx_count': tx_count,
                'sample_clients': [dict(client) for client in clients]
            }
        
        conn.close()
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def analyze_single_client_current(client_data, db_path):
    """–¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
        client_id = client_data.get('client_id') or client_data.get('customer_id') or client_data.get('id')
        
        if not client_id:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞")
            return None
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
        customer_profile = CustomerProfile()
        geographic_profile = GeographicProfile(None)
        transaction_profile = TransactionProfile()
        behavioral_profile = BehavioralProfile(client_id)
        network_profile = NetworkProfile()
        
        # –°–æ–∑–¥–∞–µ–º mock —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        mock_transaction = {
            'client_id': client_id,
            'sender_id': client_id,
            'beneficiary_id': 'MOCK_BENEFICIARY',
            'amount': 1000000,
            'currency': 'KZT',
            'date': datetime.now(),
            'country': 'KZ'
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ (—Å–∏–º—É–ª—è—Ü–∏—è)
        start_time = time.time()
        
        # 1. –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        customer_result = customer_profile.analyze_customer_data(mock_transaction)
        
        # 2. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        geographic_result = geographic_profile.analyze_transaction_geography(mock_transaction)
        
        # 3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        transaction_result = transaction_profile.analyze_transaction(mock_transaction)
        
        # 4. –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        behavioral_result = behavioral_profile.analyze_transaction(mock_transaction)
        
        # 5. –°–µ—Ç–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        network_result = network_profile.analyze_transaction_network(mock_transaction)
        
        end_time = time.time()
        analysis_time = end_time - start_time
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
        total_risk_score = (
            customer_result.get('risk_score', 0) +
            geographic_result.get('total_risk_score', 0) +
            transaction_result.get('final_risk_score', 0) +
            behavioral_result.get('risk_score', 0) +
            network_result.get('risk_score', 0)
        )
        
        conn.close()
        
        return {
            'client_id': client_id,
            'analysis_time': analysis_time,
            'total_risk_score': total_risk_score,
            'is_suspicious': total_risk_score > 10
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        conn.close()
        return None

def test_current_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AML-–ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    databases = get_available_databases()
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(databases)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    suitable_db = None
    db_info = None
    
    for db in databases:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {db}...")
        info = test_database_content(db)
        if info and info['client_count'] > 0:
            suitable_db = db
            db_info = info
            break
    
    if not suitable_db:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        return
    
    print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {suitable_db}")
    print(f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {db_info['client_count']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    test_sizes = [1, 5, 10, 50]
    
    for test_size in test_sizes:
        if test_size > db_info['client_count']:
            continue
            
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print("-" * 40)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö N –∫–ª–∏–µ–Ω—Ç–æ–≤
        test_clients = db_info['sample_clients'][:test_size]
        
        start_time = time.time()
        successful_analyses = 0
        
        for i, client in enumerate(test_clients, 1):
            print(f"  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {i}/{test_size}...", end=" ")
            
            result = analyze_single_client_current(client, suitable_db)
            if result:
                successful_analyses += 1
                print(f"‚úÖ ({result['analysis_time']:.2f}—Å, —Ä–∏—Å–∫: {result['total_risk_score']:.1f})")
            else:
                print("‚ùå")
        
        end_time = time.time()
        total_time = end_time - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚ö° –í—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {total_time/test_size:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {successful_analyses}/{test_size}")
        
        if test_size > 1:
            print(f"  üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤: {(total_time/test_size)*1000:.0f} —Å–µ–∫—É–Ω–¥ ({(total_time/test_size)*1000/60:.1f} –º–∏–Ω—É—Ç)")
            print(f"  üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å 24 —è–¥—Ä–∞–º–∏: {((total_time/test_size)*1000/60)/24:.1f} –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    test_current_performance() 