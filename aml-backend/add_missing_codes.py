# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–¥–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# add_missing_codes.py

from aml_codes_config import ALL_SUSPICION_CODES

# –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–¥—ã –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
ADDITIONAL_SUSPICION_CODES = {
    # –ö–æ–¥—ã 1000-1099 (–æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ä–∏—è)
    1011: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ã—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞',
    1049: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –Ω–∞–ª–∏—á–Ω—ã–º–∏',
    1076: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—á–∞ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∑–∞–π–º–æ–≤',
    1081: '–†–∞—Å—á–µ—Ç—ã —á–µ—Ä–µ–∑ —Ç—Ä–µ—Ç—å–∏ —Å—Ç—Ä–∞–Ω—ã',
    1088: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤',
    1094: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥',
    
    # –ö–æ–¥—ã 3000-3999 (–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤)
    3002: '–û–ø–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
    
    # –ö–æ–¥—ã 7000-7999 (–Ω–æ–≤—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π)
    7001: '–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –≤ —Ö–∞–∫–µ—Ä—Å–∫–æ–π –∞—Ç–∞–∫–µ',
    7006: '–û–ø–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∫–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
    7013: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥–µ',
    
    # –ö–æ–¥—ã 9000-9999 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    9014: '–û–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏',
}

# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
ALL_SUSPICION_CODES.update(ADDITIONAL_SUSPICION_CODES)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤
def analyze_unknown_codes(db_path: str = "aml_system.db"):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    import sqlite3
    import json
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–¥—ã –∏–∑ –±–∞–∑—ã
    cursor.execute('''
    SELECT risk_indicators
    FROM transactions
    WHERE is_suspicious = 1
    ''')
    
    all_codes = {}
    unknown_codes = {}
    
    for row in cursor.fetchall():
        indicators = json.loads(row[0])
        for code in indicators.get('suspicion_codes', []):
            all_codes[code] = all_codes.get(code, 0) + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–≤–µ—Å—Ç–µ–Ω –ª–∏ –∫–æ–¥
            if code not in ALL_SUSPICION_CODES:
                unknown_codes[code] = unknown_codes.get(code, 0) + 1
    
    print("üìä –ê–ù–ê–õ–ò–ó –ö–û–î–û–í –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(all_codes)}")
    print(f"–ò–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(all_codes) - len(unknown_codes)}")
    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(unknown_codes)}")
    
    if unknown_codes:
        print("\n‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï –ö–û–î–´:")
        for code, count in sorted(unknown_codes.items(), key=lambda x: x[1], reverse=True):
            print(f"  ‚Ä¢ –ö–æ–¥ {code}: {count} –æ–ø–µ—Ä–∞—Ü–∏–π")
            
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ê–§–ú –†–ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —ç—Ç–∏—Ö –∫–æ–¥–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for code, count in all_codes.items():
        if code in ALL_SUSPICION_CODES:
            category = get_suspicion_category(code)
            categories[category] = categories.get(category, 0) + count
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, count in sorted(categories.items(), key=lambda x: x[1], reverse=True):
        print(f"  ‚Ä¢ {category}: {count} –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    conn.close()
    return all_codes, unknown_codes

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ
def update_code_descriptions(db_path: str = "aml_system.db"):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    import sqlite3
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–æ–¥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS suspicion_codes_reference (
        code INTEGER PRIMARY KEY,
        description TEXT,
        category TEXT,
        risk_level TEXT,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥—ã
    for code, description in ALL_SUSPICION_CODES.items():
        category = get_suspicion_category(code)
        risk_level = 'HIGH' if code in [1054, 1057, 1062, 8002] else 'MEDIUM'
        
        cursor.execute('''
        INSERT OR REPLACE INTO suspicion_codes_reference 
        (code, description, category, risk_level)
        VALUES (?, ?, ?, ?)
        ''', (code, description, category, risk_level))
    
    conn.commit()
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(ALL_SUSPICION_CODES)} –∫–æ–¥–æ–≤ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ")
    conn.close()

def get_suspicion_category(code: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–¥–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if 1000 <= code < 1100:
        return '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏'
    elif 1050 <= code < 1080:
        return '–°—Ö–µ–º—ã –æ—Ç–º—ã–≤–∞–Ω–∏—è'
    elif 1080 <= code < 1095:
        return '–ü–ª–∞—Ç–µ–∂–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã'
    elif 1070 <= code < 1075:
        return '–ù–∞–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    elif 2000 <= code < 3000:
        return '–ü–æ—Ä–æ–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    elif 3000 <= code < 4000:
        return '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü—Å—É–±—ä–µ–∫—Ç–æ–≤'
    elif 5000 <= code < 6000:
        return '–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞'
    elif 6000 <= code < 7000:
        return '–°–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    elif 7000 <= code < 8000:
        return '–ö–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è'
    elif 8000 <= code < 9000:
        return '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'
    elif 9000 <= code < 10000:
        return '–ü—Ä–æ—á–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    else:
        return '–ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'

if __name__ == "__main__":
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥—ã –≤ –±–∞–∑–µ
    all_codes, unknown = analyze_unknown_codes("aml_system.db")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤ –±–∞–∑–µ
    update_code_descriptions("aml_system.db")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–µ—Ç –≤—Å–µ –∫–æ–¥—ã –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
