import sqlite3
import time
import psutil
from datetime import datetime

def analyze_single_client_simple(client_id, db_path):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    try:
        start_time = time.time()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT * FROM customer_profiles 
            WHERE customer_id = ?
        ''', (client_id,))
        client_profile = cursor.fetchone()
        
        if not client_profile:
            return None
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT * FROM transactions 
            WHERE sender_id = ? OR beneficiary_id = ?
            ORDER BY transaction_date DESC
            LIMIT 100
        ''', (client_id, client_id))
        transactions = cursor.fetchall()
        
        # 3. –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        total_sent = 0
        total_received = 0
        suspicious_count = 0
        countries = set()
        
        for tx in transactions:
            if tx['sender_id'] == client_id:
                total_sent += tx['amount_kzt']
            else:
                total_received += tx['amount_kzt']
                
            if tx['is_suspicious']:
                suspicious_count += 1
                
            # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è
            countries.add('KZ')  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # 4. –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
        base_risk = client_profile['overall_risk_score'] if client_profile['overall_risk_score'] else 0
        
        # –ü—Ä–æ—Å—Ç—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
        tx_risk = 3 if len(transactions) > 50 else 0
        behavior_risk = min(suspicious_count * 2, 10)
        
        total_risk_score = base_risk + tx_risk + behavior_risk
        
        end_time = time.time()
        analysis_time = end_time - start_time
        
        conn.close()
        
        return {
            'client_id': client_id,
            'analysis_time': analysis_time,
            'total_risk_score': total_risk_score,
            'transactions_count': len(transactions),
            'countries_count': len(countries),
            'is_suspicious': total_risk_score > 10
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        conn.close()
        return None

def get_client_list(db_path, limit=1000):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT customer_id FROM customer_profiles 
        ORDER BY overall_risk_score DESC
        LIMIT ?
    ''', (limit,))
    
    client_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    return client_ids

def test_simple_performance():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AML-–ê–ù–ê–õ–ò–ó–ê")
    print("=" * 55)
    
    db_path = 'aml_system.db'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_count = psutil.cpu_count()
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    print(f"üíª –°–∏—Å—Ç–µ–º–∞:")
    print(f"   CPU —è–¥–µ—Ä: {cpu_count} (Intel Core Ultra 9 275HX)")
    print(f"   RAM: {memory_gb:.1f} GB")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    print(f"\nüìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    client_ids = get_client_list(db_path, 1000)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(client_ids)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫
    test_sizes = [1, 5, 10, 25, 50, 100, 200, 500]
    
    results = []
    
    for test_size in test_sizes:
        if test_size > len(client_ids):
            continue
            
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print("-" * 50)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö N –∫–ª–∏–µ–Ω—Ç–æ–≤
        test_clients = client_ids[:test_size]
        
        start_time = time.time()
        successful_analyses = 0
        total_transactions = 0
        suspicious_clients = 0
        
        for i, client_id in enumerate(test_clients, 1):
            if i <= 5 or i % 50 == 0 or test_size <= 10:
                print(f"  üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {i}/{test_size}...", end=" ")
            
            result = analyze_single_client_simple(client_id, db_path)
            if result:
                successful_analyses += 1
                total_transactions += result['transactions_count']
                if result['is_suspicious']:
                    suspicious_clients += 1
                    
                if i <= 5 or i % 50 == 0 or test_size <= 10:
                    print(f"‚úÖ ({result['analysis_time']:.3f}—Å, —Ä–∏—Å–∫: {result['total_risk_score']:.1f})")
            else:
                if i <= 5 or i % 50 == 0 or test_size <= 10:
                    print("‚ùå")
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_data = {
            'test_size': test_size,
            'total_time': total_time,
            'avg_time_per_client': total_time / test_size if test_size > 0 else 0,
            'successful_analyses': successful_analyses,
            'total_transactions': total_transactions,
            'suspicious_clients': suspicious_clients,
            'success_rate': (successful_analyses / test_size * 100) if test_size > 0 else 0
        }
        results.append(result_data)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {test_size} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚ö° –í—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {total_time/test_size:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {successful_analyses}/{test_size} ({result_data['success_rate']:.1f}%)")
        print(f"  üí∏ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions:,}")
        print(f"  üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {suspicious_clients}")
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if successful_analyses >= 5:
            avg_time_per_successful = total_time / successful_analyses
            time_for_1000 = avg_time_per_successful * 1000
            time_for_all_clients = avg_time_per_successful * len(client_ids)
            
            print(f"\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞):")
            print(f"  üìà 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤: {time_for_1000:.0f} —Å–µ–∫ ({time_for_1000/60:.1f} –º–∏–Ω)")
            print(f"  üìà –í—Å–µ {len(client_ids)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {time_for_all_clients:.0f} —Å–µ–∫ ({time_for_all_clients/60:.1f} –º–∏–Ω)")
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞ 24 —è–¥—Ä–∞—Ö
            parallel_time_1000 = time_for_1000 / cpu_count
            parallel_time_all = time_for_all_clients / cpu_count
            
            print(f"\nüöÄ –° –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞ {cpu_count} —è–¥—Ä–∞—Ö:")
            print(f"  ‚ö° 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤: {parallel_time_1000:.0f} —Å–µ–∫ ({parallel_time_1000/60:.1f} –º–∏–Ω)")
            print(f"  ‚ö° –í—Å–µ {len(client_ids)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {parallel_time_all:.0f} —Å–µ–∫ ({parallel_time_all/60:.1f} –º–∏–Ω)")
            
            # –£—Å–∫–æ—Ä–µ–Ω–∏–µ
            speedup = time_for_1000 / parallel_time_1000
            print(f"  üéØ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
            print(f"  üéØ –†–µ–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (85% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å): {speedup * 0.85:.1f}x")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüìà –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 55)
    
    successful_results = [r for r in results if r['success_rate'] > 80]
    
    if len(successful_results) >= 2:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
        large_result = successful_results[-1]
        small_result = successful_results[0]
        
        scaling_factor = large_result['test_size'] / small_result['test_size']
        time_scaling = large_result['avg_time_per_client'] / small_result['avg_time_per_client']
        
        print(f"üìä –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:")
        print(f"  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω –≤ {scaling_factor:.1f} —Ä–∞–∑")
        print(f"  –í—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ {time_scaling:.2f} —Ä–∞–∑")
        
        if time_scaling < 1.2:
            print("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å!")
        elif time_scaling < 2.0:
            print("  ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("  ‚ùå –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        best_result = min(successful_results, key=lambda x: x['avg_time_per_client'])
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"  üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {best_result['test_size']} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print(f"  ‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {min(cpu_count, 20)}")
        print(f"  üì¶ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á: {min(cpu_count * 2, 50)}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤—Å–µ–π –±–∞–∑—ã
        best_time_per_client = best_result['avg_time_per_client']
        total_clients = len(client_ids)
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ü–†–û–ì–ù–û–ó–´ –¥–ª—è {total_clients} –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"  üêå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {(best_time_per_client * total_clients)/60:.1f} –º–∏–Ω—É—Ç")
        print(f"  üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (24 —è–¥—Ä–∞): {(best_time_per_client * total_clients)/(cpu_count * 0.85)/60:.1f} –º–∏–Ω—É—Ç")
        print(f"  ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {(cpu_count * 0.85):.1f}x")
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏")
        
    print(f"\nüîß –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏!")

if __name__ == "__main__":
    test_simple_performance() 