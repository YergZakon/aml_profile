import requests
import json

print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –†–ò–°–ö–û–í")
print("=" * 60)

base_url = "http://localhost:8000/api"

# –¢–µ—Å—Ç 1: –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ (365 –¥–Ω–µ–π)
print("\n1Ô∏è‚É£ –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í")
try:
    response = requests.get(f"{base_url}/analytics/risk-analysis?dateRange=365")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['risk_summary']['total']}")
        print(f"‚úÖ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {data['risk_summary']['high']}")
        print(f"‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {data['risk_summary']['low']}")
        print(f"‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data['suspicious_transactions'])}")
        
        print("\nüìä –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∞–ª–∏–∑–∞:")
        for analysis_type, count in data['analysis_type_breakdown'].items():
            emoji = {"transactional": "üîÑ", "network": "üåê", "behavioral": "üë§", "customer": "üè¢", "geographic": "üìç"}
            print(f"   {emoji.get(analysis_type, 'üîπ')} {analysis_type.capitalize()}: {count}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ—Ç–µ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É
print("\n2Ô∏è‚É£ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –°–ï–¢–ï–í–û–ú–£ –ê–ù–ê–õ–ò–ó–£")
try:
    response = requests.get(f"{base_url}/analytics/risk-analysis?dateRange=365&analysisType=network")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data['suspicious_transactions'])}")
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {data['filters_applied']['analysis_type']}")
        
        if data['suspicious_transactions']:
            print("üìã –ü–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            for i, tx in enumerate(data['suspicious_transactions'][:3]):
                print(f"   {i+1}. {tx['transaction_id']} - –†–∏—Å–∫: {tx['final_risk_score']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É
print("\n3Ô∏è‚É£ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–û–ú–£ –ê–ù–ê–õ–ò–ó–£")
try:
    response = requests.get(f"{base_url}/analytics/risk-analysis?dateRange=365&analysisType=behavioral")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data['suspicious_transactions'])}")
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {data['filters_applied']['analysis_type']}")
        
        if data['suspicious_transactions']:
            print("üìã –ü–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            for i, tx in enumerate(data['suspicious_transactions'][:3]):
                print(f"   {i+1}. {tx['transaction_id']} - –†–∏—Å–∫: {tx['final_risk_score']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
print("\n4Ô∏è‚É£ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–û–ú–£ –ê–ù–ê–õ–ò–ó–£")
try:
    response = requests.get(f"{base_url}/analytics/risk-analysis?dateRange=365&analysisType=transactional")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(data['suspicious_transactions'])}")
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: {data['filters_applied']['analysis_type']}")
        
        if data['suspicious_transactions']:
            print("üìã –ü–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            for i, tx in enumerate(data['suspicious_transactions'][:3]):
                print(f"   {i+1}. {tx['transaction_id']} - –†–∏—Å–∫: {tx['final_risk_score']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 5: –¢–æ–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
print("\n5Ô∏è‚É£ –¢–û–ü –ò–ù–î–ò–ö–ê–¢–û–†–´ –†–ò–°–ö–ê")
try:
    response = requests.get(f"{base_url}/analytics/risk-analysis?dateRange=365")
    if response.status_code == 200:
        data = response.json()
        print("‚úÖ –¢–æ–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
        for indicator in data['top_risk_indicators'][:5]:
            print(f"   üî∏ {indicator['name']}: {indicator['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

print("\n" + "=" * 60)
print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
print("üìã –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
print("üí° –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ dateRange=365 –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞.") 