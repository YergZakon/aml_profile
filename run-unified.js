const { spawn } = require('child_process');
const path = require('path');
const os = require('os');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

console.log(`${colors.blue}====================================================`);
console.log(`  üöÄ –ê–§–ú –†–ö - –ï–¥–∏–Ω—ã–π AML –ü–∞–π–ø–ª–∞–π–Ω`);
console.log(`====================================================${colors.reset}\n`);

// –ü—É—Ç–∏
const backendPath = path.join(__dirname, 'aml-backend');
const frontendPath = path.join(__dirname, 'aml-monitoring-frontend');

function checkProjectStructure() {
  console.log(`${colors.yellow}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...${colors.reset}`);
  
  if (!fs.existsSync(backendPath)) {
    console.error(`${colors.red}‚ùå –ü–∞–ø–∫–∞ aml-backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${colors.reset}`);
    process.exit(1);
  }
  
  const unifiedPipelinePath = path.join(backendPath, 'unified_aml_pipeline.py');
  if (!fs.existsSync(unifiedPipelinePath)) {
    console.error(`${colors.red}‚ùå –§–∞–π–ª unified_aml_pipeline.py –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
    process.exit(1);
  }
  
  console.log(`${colors.green}‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!${colors.reset}\n`);
}

function getPythonCommand() {
  let pythonCmd;
  if (os.platform() === 'win32') {
    pythonCmd = path.join(backendPath, 'venv', 'Scripts', 'python.exe');
  } else {
    pythonCmd = path.join(backendPath, 'venv', 'bin', 'python');
  }

  if (!fs.existsSync(pythonCmd)) {
    console.error(`${colors.red}‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ venv!${colors.reset}`);
    console.error(`–°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:`);
    console.error(`  cd aml-backend && python -m venv venv`);
    process.exit(1);
  }

  return pythonCmd;
}

function checkUploadsDirectory() {
  const uploadsPath = path.join(backendPath, 'uploads');
  
  if (!fs.existsSync(uploadsPath)) {
    console.log(`${colors.yellow}‚ö†Ô∏è –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...${colors.reset}`);
    fs.mkdirSync(uploadsPath, { recursive: true });
  }
  
  const jsonFiles = fs.readdirSync(uploadsPath).filter(file => file.endsWith('.json'));
  
  if (jsonFiles.length === 0) {
    console.log(`${colors.yellow}‚ö†Ô∏è JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ uploads${colors.reset}`);
    console.log(`${colors.cyan}üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ JSON —Ñ–∞–π–ª—ã –ê–§–ú –≤ –ø–∞–ø–∫—É aml-backend/uploads/${colors.reset}`);
    return false;
  }
  
  console.log(`${colors.green}‚úÖ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: ${jsonFiles.length}${colors.reset}`);
  jsonFiles.forEach(file => {
    const filePath = path.join(uploadsPath, file);
    const stats = fs.statSync(filePath);
    const sizeMB = (stats.size / (1024 * 1024)).toFixed(1);
    console.log(`   üìÑ ${file} (${sizeMB} MB)`);
  });
  
  return true;
}

function startBackend(pythonCmd) {
  return new Promise((resolve, reject) => {
    console.log(`${colors.green}üîß –ó–∞–ø—É—Å–∫ Backend —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);
    
    const backend = spawn(pythonCmd, ['app.py'], {
      cwd: backendPath,
      stdio: 'inherit',
      shell: true,
      env: { ...process.env, PYTHONUNBUFFERED: '1' }
    });

    backend.on('error', (err) => {
      console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ Backend:${colors.reset}`, err.message);
      reject(err);
    });

    setTimeout(() => resolve(backend), 3000);
  });
}

function startFrontend() {
  return new Promise((resolve, reject) => {
    const npmCmd = os.platform() === 'win32' ? 'npm.cmd' : 'npm';
    
    console.log(`${colors.green}üé® –ó–∞–ø—É—Å–∫ Frontend —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);
    
    const frontend = spawn(npmCmd, ['run', 'dev'], {
      cwd: frontendPath,
      stdio: 'inherit',
      shell: true
    });

    frontend.on('error', (err) => {
      console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ Frontend:${colors.reset}`, err.message);
      reject(err);
    });

    setTimeout(() => resolve(frontend), 2000);
  });
}

function runUnifiedPipeline(pythonCmd, workers = require('os').cpus().length) {
  return new Promise((resolve, reject) => {
    console.log(`${colors.magenta}üîç –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ AML –ø–∞–π–ø–ª–∞–π–Ω–∞...${colors.reset}`);
    console.log(`üë• –í–æ—Ä–∫–µ—Ä–æ–≤: ${workers}`);
    console.log(`üì¶ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: uploads`);
    console.log(`‚ö†Ô∏è –ü–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞: 3.0\n`);
    
    const args = [
      'unified_aml_pipeline.py',
      '--json-dir', 'uploads',
      '--workers', workers.toString(),
      '--batch-size', '1000',
      '--risk-threshold', '3.0'
    ];
    
    const pipeline = spawn(pythonCmd, args, {
      cwd: backendPath,
      stdio: 'inherit',
      shell: true,
      env: { ...process.env, PYTHONUNBUFFERED: '1' }
    });

    pipeline.on('error', (err) => {
      console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞:${colors.reset}`, err.message);
      reject(err);
    });

    pipeline.on('exit', (code) => {
      if (code === 0) {
        console.log(`${colors.green}üéâ –ï–¥–∏–Ω—ã–π AML –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!${colors.reset}\n`);
        resolve();
      } else {
        console.error(`${colors.red}‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code})${colors.reset}\n`);
        reject(new Error(`Pipeline exited with code ${code}`));
      }
    });
  });
}

function setupCleanup(processes) {
  const cleanup = () => {
    console.log(`\n${colors.yellow}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...${colors.reset}`);
    
    processes.forEach(proc => {
      if (proc && proc.pid) {
        if (os.platform() === 'win32') {
          try {
            spawn('taskkill', ['/pid', proc.pid, '/f', '/t'], { shell: true });
          } catch (e) {
            proc.kill();
          }
        } else {
          try {
            process.kill(-proc.pid, 'SIGTERM');
          } catch (e) {
            proc.kill('SIGTERM');
          }
        }
      }
    });
    
    setTimeout(() => {
      console.log(`${colors.green}‚úÖ –°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${colors.reset}`);
      process.exit(0);
    }, 1000);
  };

  process.on('SIGINT', cleanup);
  process.on('SIGTERM', cleanup);
  
  return cleanup;
}

function showSystemInfo() {
  setTimeout(() => {
    console.log(`\n${colors.blue}====================================================`);
    console.log(`  ${colors.green}‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!${colors.reset}`);
    console.log(`${colors.blue}====================================================${colors.reset}`);
    console.log(`  Backend API:   ${colors.green}http://localhost:8000/api/${colors.reset}`);
    console.log(`  Frontend:      ${colors.green}http://localhost:3000${colors.reset}`);
    console.log(`  –ï–¥–∏–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: ${colors.cyan}–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ${colors.reset}`);
    console.log(`${colors.blue}====================================================${colors.reset}\n`);
    console.log(`${colors.yellow}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤${colors.reset}`);
  }, 2000);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    checkProjectStructure();
    const pythonCmd = getPythonCommand();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON —Ñ–∞–π–ª–æ–≤
    const hasJsonFiles = checkUploadsDirectory();
    
    if (!hasJsonFiles) {
      console.log(`${colors.yellow}üí° –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å${colors.reset}\n`);
      
      // –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Backend + Frontend
      const backend = await startBackend(pythonCmd);
      const frontend = await startFrontend();
      
      setupCleanup([backend, frontend]);
      showSystemInfo();
      
    } else {
      console.log(`${colors.cyan}üöÄ –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ + AML –∞–Ω–∞–ª–∏–∑${colors.reset}\n`);
      
      // –ó–∞–ø—É—Å–∫ Backend + Frontend
      const backend = await startBackend(pythonCmd);
      const frontend = await startFrontend();
      
      // –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        try {
          await runUnifiedPipeline(pythonCmd);
          console.log(`${colors.green}üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!${colors.reset}\n`);
        } catch (amlErr) {
          console.error(`${colors.yellow}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ AML –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: ${amlErr.message}${colors.reset}`);
        }
      }, 5000);
      
      setupCleanup([backend, frontend]);
      showSystemInfo();
    }
    
  } catch (error) {
    console.error(`${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:${colors.reset}`, error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();