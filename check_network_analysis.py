import sqlite3
import json
import os

def check_network_analysis():
    db_path = 'aml-backend/aml_system_e840b2937714940f.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('PRAGMA table_info(transactions)')
        columns = [col[1] for col in cursor.fetchall()]
        print("üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ transactions:")
        for col in columns:
            print(f"  - {col}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–µ—Ç–µ–≤—ã–µ –ø–æ–ª—è
        network_columns = [col for col in columns if 'network' in col.lower()]
        print(f"\nüîó –ö–æ–ª–æ–Ω–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Ç–µ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: {network_columns}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º suspicious_reasons –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç–æ–∫
        cursor.execute("""
        SELECT COUNT(*) FROM transactions 
        WHERE suspicious_reasons LIKE '%—Å–µ—Ç—å%' 
           OR suspicious_reasons LIKE '%—Å—Ö–µ–º%'
           OR suspicious_reasons LIKE '%—Ü–µ–ø–æ—á–∫%'
           OR suspicious_reasons LIKE '%—Ü–∏—Ä–∫—É–ª—è—Ä%'
        """)
        network_mentions = cursor.fetchone()[0]
        print(f"üï∏Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {network_mentions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã suspicious_reasons —Å —Å–µ—Ç–µ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        cursor.execute("""
        SELECT transaction_id, suspicious_reasons FROM transactions 
        WHERE suspicious_reasons LIKE '%—Å–µ—Ç—å%' 
           OR suspicious_reasons LIKE '%—Å—Ö–µ–º%'
           OR suspicious_reasons LIKE '%—Ü–µ–ø–æ—á–∫%'
           OR suspicious_reasons LIKE '%—Ü–∏—Ä–∫—É–ª—è—Ä%'
        LIMIT 5
        """)
        
        network_examples = cursor.fetchall()
        if network_examples:
            print("\nüîç –ü—Ä–∏–º–µ—Ä—ã —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
            for tx_id, reasons in network_examples:
                try:
                    parsed_reasons = json.loads(reasons)
                    print(f"  {tx_id}: {parsed_reasons}")
                except:
                    print(f"  {tx_id}: {reasons}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"\nüìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {tables}")
        
        network_tables = [table for table in tables if 'network' in table.lower()]
        print(f"üîó –¢–∞–±–ª–∏—Ü—ã —Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {network_tables}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_network_analysis() 