const { spawn } = require('child_process');
const path = require('path');
const os = require('os');
const fs = require('fs');
const readline = require('readline');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

console.log(`${colors.blue}====================================================`);
console.log(`  –ê–§–ú –†–ö - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π + AML`);
console.log(`====================================================${colors.reset}\n`);

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫
const backendPath = path.join(__dirname, 'aml-backend');
const frontendPath = path.join(__dirname, 'aml-monitoring-frontend');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ readline
function createInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
function showMenu() {
  console.log(`${colors.cyan}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:${colors.reset}`);
  console.log(`${colors.green}1.${colors.reset} üöÄ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (Backend + Frontend)`);
  console.log(`${colors.green}2.${colors.reset} üîç –°–∏—Å—Ç–µ–º–∞ + AML-–∞–Ω–∞–ª–∏–∑ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)`);
  console.log(`${colors.green}3.${colors.reset} ‚ö° –¢–æ–ª—å–∫–æ AML-–∞–Ω–∞–ª–∏–∑ (–±—ã—Å—Ç—Ä—ã–π)`);
  console.log(`${colors.green}4.${colors.reset} üß™ AML —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (100 –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
  console.log(`${colors.green}5.${colors.reset} üéØ AML –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (>5)`);
  console.log(`${colors.green}6.${colors.reset} üìÇ JSON —Ñ–∞–π–ª—ã –ê–§–ú (–º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥)`);
  console.log(`${colors.green}7.${colors.reset} üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (JSON + –ë–î)`);
  console.log(`${colors.green}8.${colors.reset} üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
  console.log(`${colors.green}9.${colors.reset} üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`);
  console.log();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
function checkProjectStructure() {
  console.log(`${colors.yellow}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...${colors.reset}`);
  console.log(`–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${__dirname}`);
  console.log(`Backend –ø—É—Ç—å: ${backendPath}`);
  console.log(`Frontend –ø—É—Ç—å: ${frontendPath}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
  if (!fs.existsSync(backendPath)) {
    console.error(`${colors.red}[–û–®–ò–ë–ö–ê] –ü–∞–ø–∫–∞ aml-backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${colors.reset}`);
    console.error(`–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: ${backendPath}`);
    process.exit(1);
  }

  if (!fs.existsSync(frontendPath)) {
    console.error(`${colors.red}[–û–®–ò–ë–ö–ê] –ü–∞–ø–∫–∞ aml-monitoring-frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${colors.reset}`);
    console.error(`–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: ${frontendPath}`);
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
  const appPyPath = path.join(backendPath, 'app.py');
  if (!fs.existsSync(appPyPath)) {
    console.error(`${colors.red}[–û–®–ò–ë–ö–ê] –§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
    process.exit(1);
  }

  const amlPipelinePath = path.join(backendPath, 'aml_pipeline.py');
  if (!fs.existsSync(amlPipelinePath)) {
    console.error(`${colors.red}[–û–®–ò–ë–ö–ê] –§–∞–π–ª aml_pipeline.py –Ω–µ –Ω–∞–π–¥–µ–Ω!${colors.reset}`);
    console.error(`${colors.yellow}–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run aml:optimize –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤${colors.reset}`);
    process.exit(1);
  }

  console.log(`${colors.green}‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!${colors.reset}\n`);
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã Python
function getPythonCommand() {
  let pythonCmd;
  if (os.platform() === 'win32') {
    pythonCmd = path.join(backendPath, 'venv', 'Scripts', 'python.exe');
  } else {
    pythonCmd = path.join(backendPath, 'venv', 'bin', 'python');
  }

  if (!fs.existsSync(pythonCmd)) {
    console.error(`${colors.red}[–û–®–ò–ë–ö–ê] Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ venv!${colors.reset}`);
    console.error(`–°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:`);
    console.error(`  cd aml-backend && python -m venv venv`);
    process.exit(1);
  }

  return pythonCmd;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Backend
function startBackend(pythonCmd) {
  return new Promise((resolve, reject) => {
    console.log(`${colors.green}[1/2] –ó–∞–ø—É—Å–∫ Backend —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);
    console.log(`–ö–æ–º–∞–Ω–¥–∞: ${pythonCmd} app.py`);
    console.log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${backendPath}\n`);

    const backend = spawn(pythonCmd, ['app.py'], {
      cwd: backendPath,
      stdio: 'inherit',
      shell: true,
      env: { ...process.env, PYTHONUNBUFFERED: '1' }
    });

    backend.on('error', (err) => {
      console.error(`${colors.red}[–û–®–ò–ë–ö–ê] Backend:${colors.reset}`, err.message);
      reject(err);
    });

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    setTimeout(() => resolve(backend), 3000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Frontend
function startFrontend() {
  return new Promise((resolve, reject) => {
    const npmCmd = os.platform() === 'win32' ? 'npm.cmd' : 'npm';
    
    console.log(`${colors.green}[2/2] –ó–∞–ø—É—Å–∫ Frontend —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);
    console.log(`–ö–æ–º–∞–Ω–¥–∞: ${npmCmd} run dev`);
    console.log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${frontendPath}\n`);
    
    const frontend = spawn(npmCmd, ['run', 'dev'], {
      cwd: frontendPath,
      stdio: 'inherit',
      shell: true
    });

    frontend.on('error', (err) => {
      console.error(`${colors.red}[–û–®–ò–ë–ö–ê] Frontend:${colors.reset}`, err.message);
      reject(err);
    });

    setTimeout(() => resolve(frontend), 2000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ AML-–∞–Ω–∞–ª–∏–∑–∞
function runAMLAnalysis(pythonCmd, mode = 'quick') {
  return new Promise((resolve, reject) => {
    let script, args = [], description;
    
    switch(mode) {
      case 'quick':
        script = 'run_aml_analysis.py';
        description = '–ë—ã—Å—Ç—Ä—ã–π AML-–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤';
        break;
      case 'test':
        script = 'aml_pipeline.py';
        description = '–¢–µ—Å—Ç–æ–≤—ã–π AML-–∞–Ω–∞–ª–∏–∑ (100 –∫–ª–∏–µ–Ω—Ç–æ–≤)';
        break;
      case 'high-risk':
        script = 'aml_pipeline.py';
        description = 'AML-–∞–Ω–∞–ª–∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞';
        break;
      case 'json-afm':
        script = 'aml_pipeline_enhanced.py';
        args = ['--json-dir', 'uploads', '--workers', '20', '--batch-size', '100'];
        description = '–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –ê–§–ú (–º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥)';
        break;
      case 'hybrid':
        script = 'aml_pipeline.py';
        description = '–ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (JSON —Ñ–∞–π–ª—ã + –ë–î)';
        // –î–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
        break;
      case 'optimize':
        script = 'optimize_database.py';
        description = '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
        break;
      case 'compare':
        script = 'compare_performance.py';
        description = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';
        break;
      default:
        script = 'run_aml_analysis.py';
        description = 'AML-–∞–Ω–∞–ª–∏–∑';
    }

    console.log(`${colors.magenta}üîç ${description}...${colors.reset}`);
    console.log(`–ö–æ–º–∞–Ω–¥–∞: ${pythonCmd} ${script} ${args.join(' ')}`);
    console.log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${backendPath}\n`);

    const aml = spawn(pythonCmd, [script, ...args], {
      cwd: backendPath,
      stdio: 'inherit',
      shell: true,
      env: { ...process.env, PYTHONUNBUFFERED: '1' }
    });

    aml.on('error', (err) => {
      console.error(`${colors.red}[–û–®–ò–ë–ö–ê] AML:${colors.reset}`, err.message);
      reject(err);
    });

    aml.on('exit', (code) => {
      if (code === 0) {
        console.log(`${colors.green}‚úì AML-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!${colors.reset}\n`);
        resolve();
      } else {
        console.error(`${colors.red}‚úó AML-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code})${colors.reset}\n`);
        reject(new Error(`AML process exited with code ${code}`));
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
function showSystemInfo() {
  setTimeout(() => {
    console.log(`\n${colors.blue}====================================================`);
    console.log(`  ${colors.green}‚úì –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!${colors.reset}`);
    console.log(`${colors.blue}====================================================${colors.reset}`);
    console.log(`  Backend API:   ${colors.green}http://localhost:8000/api/${colors.reset}`);
    console.log(`  Frontend:      ${colors.green}http://localhost:3000${colors.reset}`);
    console.log(`  AML-–∫–æ–º–∞–Ω–¥—ã:   ${colors.cyan}npm run aml:quick${colors.reset}`);
    console.log(`  JSON –ê–§–ú:      ${colors.cyan}npm run aml:json-afm${colors.reset}`);
    console.log(`  –ì–∏–±—Ä–∏–¥–Ω—ã–π:     ${colors.cyan}npm run aml:hybrid${colors.reset}`);
    console.log(`${colors.blue}====================================================${colors.reset}\n`);
    console.log(`${colors.yellow}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤${colors.reset}`);
    console.log(`${colors.yellow}–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:${colors.reset}`);
    console.log(`${colors.cyan}  ‚Ä¢ npm run aml:quick     ${colors.reset}${colors.yellow}(–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ë–î)${colors.reset}`);
    console.log(`${colors.cyan}  ‚Ä¢ npm run aml:json-afm  ${colors.reset}${colors.yellow}(JSON —Ñ–∞–π–ª—ã –ê–§–ú)${colors.reset}`);
    console.log(`${colors.cyan}  ‚Ä¢ npm run aml:hybrid    ${colors.reset}${colors.yellow}(JSON + –ë–î)${colors.reset}\n`);
  }, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function setupCleanup(processes) {
  const cleanup = () => {
    console.log(`\n${colors.yellow}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...${colors.reset}`);
    
    processes.forEach(proc => {
      if (proc && proc.pid) {
        if (os.platform() === 'win32') {
          try {
            spawn('taskkill', ['/pid', proc.pid, '/f', '/t'], { shell: true });
          } catch (e) {
            proc.kill();
          }
        } else {
          try {
            process.kill(-proc.pid, 'SIGTERM');
          } catch (e) {
            proc.kill('SIGTERM');
          }
        }
      }
    });
    
    setTimeout(() => {
      console.log(`${colors.green}‚úì –°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${colors.reset}`);
      process.exit(0);
    }, 1000);
  };

  process.on('SIGINT', cleanup);
  process.on('SIGTERM', cleanup);
  
  return cleanup;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    checkProjectStructure();
    const pythonCmd = getPythonCommand();
    
    showMenu();
    
    const rl = createInterface();
    
    rl.question(`${colors.cyan}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-9): ${colors.reset}`, async (choice) => {
      rl.close();
      
      console.log();
      
      switch(choice.trim()) {
        case '1':
          // –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
          try {
            const backend = await startBackend(pythonCmd);
            const frontend = await startFrontend();
            setupCleanup([backend, frontend]);
            showSystemInfo();
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '2':
          // –°–∏—Å—Ç–µ–º–∞ + AML
          try {
            const backend = await startBackend(pythonCmd);
            const frontend = await startFrontend();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º AML-–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            setTimeout(async () => {
              try {
                await runAMLAnalysis(pythonCmd, 'quick');
                console.log(`${colors.green}üéâ –°–∏—Å—Ç–µ–º–∞ –∏ AML-–∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!${colors.reset}\n`);
              } catch (amlErr) {
                console.error(`${colors.yellow}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ AML-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è${colors.reset}`);
              }
            }, 5000);
            
            setupCleanup([backend, frontend]);
            showSystemInfo();
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '3':
          // –¢–æ–ª—å–∫–æ AML –±—ã—Å—Ç—Ä—ã–π
          try {
            await runAMLAnalysis(pythonCmd, 'quick');
            console.log(`${colors.green}üéâ AML-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!${colors.reset}`);
            process.exit(0);
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ AML-–∞–Ω–∞–ª–∏–∑–∞:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '4':
          // AML —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          try {
            await runAMLAnalysis(pythonCmd, 'test');
            console.log(`${colors.green}üéâ –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!${colors.reset}`);
            process.exit(0);
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '5':
          // AML –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
          try {
            await runAMLAnalysis(pythonCmd, 'high-risk');
            console.log(`${colors.green}üéâ –ê–Ω–∞–ª–∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!${colors.reset}`);
            process.exit(0);
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '6':
          // JSON —Ñ–∞–π–ª—ã –ê–§–ú —Å –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–æ–º
          try {
            console.log(`${colors.blue}üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads...${colors.reset}`);
            const uploadsPath = path.join(backendPath, 'uploads');
            if (!fs.existsSync(uploadsPath)) {
              console.log(`${colors.yellow}‚ö†Ô∏è –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...${colors.reset}`);
              fs.mkdirSync(uploadsPath, { recursive: true });
            }
            
            const jsonFiles = fs.readdirSync(uploadsPath).filter(file => file.endsWith('.json'));
            if (jsonFiles.length === 0) {
              console.log(`${colors.yellow}‚ö†Ô∏è JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ uploads${colors.reset}`);
              console.log(`${colors.cyan}üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ JSON —Ñ–∞–π–ª—ã –ê–§–ú –≤ –ø–∞–ø–∫—É aml-backend/uploads/${colors.reset}`);
              process.exit(0);
            }
            
            console.log(`${colors.green}‚úì –ù–∞–π–¥–µ–Ω–æ ${jsonFiles.length} JSON —Ñ–∞–π–ª–æ–≤:${colors.reset}`);
            jsonFiles.forEach(file => console.log(`   ‚Ä¢ ${file}`));
            console.log();
            
            await runAMLAnalysis(pythonCmd, 'json-afm');
            console.log(`${colors.green}üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
            process.exit(0);
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '7':
          // –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
          try {
            console.log(`${colors.blue}üîÑ –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...${colors.reset}`);
            console.log(`${colors.cyan}–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ JSON —Ñ–∞–π–ª–æ–≤ + –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î${colors.reset}\n`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –≤—ã–±–æ—Ä–æ–º –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            const hybridProcess = spawn(pythonCmd, ['aml_pipeline.py'], {
              cwd: backendPath,
              stdio: ['pipe', 'inherit', 'inherit'],
              shell: true,
              env: { ...process.env, PYTHONUNBUFFERED: '1' }
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏—é 5 (–≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
            setTimeout(() => {
              hybridProcess.stdin.write('5\n');
            }, 1000);
            
            hybridProcess.on('exit', (code) => {
              if (code === 0) {
                console.log(`${colors.green}üéâ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!${colors.reset}`);
              } else {
                console.error(`${colors.red}–û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–¥ ${code})${colors.reset}`);
              }
              process.exit(code);
            });
            
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '8':
          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
          try {
            await runAMLAnalysis(pythonCmd, 'optimize');
            console.log(`${colors.green}üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
            process.exit(0);
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        case '9':
          // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
          try {
            await runAMLAnalysis(pythonCmd, 'compare');
            console.log(`${colors.green}üéâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${colors.reset}`);
            process.exit(0);
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:${colors.reset}`, err.message);
            process.exit(1);
          }
          break;
          
        default:
          console.log(`${colors.red}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É...${colors.reset}\n`);
          try {
            const backend = await startBackend(pythonCmd);
            const frontend = await startFrontend();
            setupCleanup([backend, frontend]);
            showSystemInfo();
          } catch (err) {
            console.error(`${colors.red}–û—à–∏–±–∫–∞:${colors.reset}`, err.message);
            process.exit(1);
          }
      }
    });
    
  } catch (error) {
    console.error(`${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:${colors.reset}`, error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main(); 