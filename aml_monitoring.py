#!/usr/bin/env python3
"""
üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è AML
–í–µ—Ä—Å–∏—è: 3.0

–§—É–Ω–∫—Ü–∏–∏:
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
- –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
- Dashboard –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import os
import sys
import time
import json
import psutil
import logging
import threading
import smtplib
import requests
from collections import defaultdict, deque
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Callable, Union
from dataclasses import dataclass, field
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from pathlib import Path
import sqlite3
from contextlib import contextmanager

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from aml_config import get_config
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å aml_config –Ω–µ –Ω–∞–π–¥–µ–Ω")
    get_config = lambda: None


@dataclass
class MetricPoint:
    """–¢–æ—á–∫–∞ –º–µ—Ç—Ä–∏–∫–∏"""
    timestamp: datetime
    name: str
    value: Union[int, float]
    tags: Dict[str, str] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'timestamp': self.timestamp.isoformat(),
            'name': self.name,
            'value': self.value,
            'tags': self.tags
        }


@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç"""
    id: str
    level: str  # info, warning, error, critical
    message: str
    component: str
    timestamp: datetime
    resolved: bool = False
    resolution_time: Optional[datetime] = None
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'level': self.level,
            'message': self.message,
            'component': self.component,
            'timestamp': self.timestamp.isoformat(),
            'resolved': self.resolved,
            'resolution_time': self.resolution_time.isoformat() if self.resolution_time else None
        }


class MetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, max_points: int = 10000):
        self.metrics: Dict[str, deque] = defaultdict(lambda: deque(maxlen=max_points))
        self.counters: Dict[str, int] = defaultdict(int)
        self.gauges: Dict[str, float] = defaultdict(float)
        self.histograms: Dict[str, List[float]] = defaultdict(list)
        self.lock = threading.Lock()
    
    def record_metric(self, name: str, value: Union[int, float], tags: Dict[str, str] = None):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏"""
        with self.lock:
            point = MetricPoint(
                timestamp=datetime.now(),
                name=name,
                value=value,
                tags=tags or {}
            )
            self.metrics[name].append(point)
    
    def increment_counter(self, name: str, value: int = 1, tags: Dict[str, str] = None):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        with self.lock:
            self.counters[name] += value
            self.record_metric(f"{name}_total", self.counters[name], tags)
    
    def set_gauge(self, name: str, value: float, tags: Dict[str, str] = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è gauge"""
        with self.lock:
            self.gauges[name] = value
            self.record_metric(name, value, tags)
    
    def record_histogram(self, name: str, value: float, tags: Dict[str, str] = None):
        """–ó–∞–ø–∏—Å—å –≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É"""
        with self.lock:
            self.histograms[name].append(value)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            if len(self.histograms[name]) > 1000:
                self.histograms[name] = self.histograms[name][-1000:]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            values = self.histograms[name]
            self.record_metric(f"{name}_avg", sum(values) / len(values), tags)
            self.record_metric(f"{name}_min", min(values), tags)
            self.record_metric(f"{name}_max", max(values), tags)
    
    def get_metrics(self, name: str = None, since: datetime = None) -> Dict[str, List[MetricPoint]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        with self.lock:
            if name:
                if name in self.metrics:
                    points = list(self.metrics[name])
                    if since:
                        points = [p for p in points if p.timestamp >= since]
                    return {name: points}
                return {}
            
            result = {}
            for metric_name, points in self.metrics.items():
                filtered_points = list(points)
                if since:
                    filtered_points = [p for p in filtered_points if p.timestamp >= since]
                result[metric_name] = filtered_points
            
            return result
    
    def get_latest_values(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫"""
        with self.lock:
            result = {}
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            for name, points in self.metrics.items():
                if points:
                    result[name] = points[-1].value
            
            # –°—á–µ—Ç—á–∏–∫–∏
            for name, value in self.counters.items():
                result[f"{name}_total"] = value
            
            # Gauges
            result.update(self.gauges)
            
            return result
    
    def clear_old_metrics(self, before: datetime):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        with self.lock:
            for name, points in self.metrics.items():
                while points and points[0].timestamp < before:
                    points.popleft()


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.alerts: List[Alert] = []
        self.alert_rules: List[Callable] = []
        self.notification_handlers: List[Callable] = []
        self.lock = threading.Lock()
        self.alert_counter = 0
    
    def add_alert_rule(self, rule: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alert_rules.append(rule)
    
    def add_notification_handler(self, handler: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_handlers.append(handler)
    
    def create_alert(self, level: str, message: str, component: str) -> Alert:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        with self.lock:
            self.alert_counter += 1
            alert = Alert(
                id=f"alert_{self.alert_counter:06d}",
                level=level,
                message=message,
                component=component,
                timestamp=datetime.now()
            )
            
            self.alerts.append(alert)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for handler in self.notification_handlers:
                try:
                    handler(alert)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            
            return alert
    
    def resolve_alert(self, alert_id: str):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        with self.lock:
            for alert in self.alerts:
                if alert.id == alert_id:
                    alert.resolved = True
                    alert.resolution_time = datetime.now()
                    break
    
    def get_active_alerts(self) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        with self.lock:
            return [alert for alert in self.alerts if not alert.resolved]
    
    def get_all_alerts(self, since: datetime = None) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        with self.lock:
            alerts = list(self.alerts)
            if since:
                alerts = [alert for alert in alerts if alert.timestamp >= since]
            return alerts
    
    def check_rules(self, metrics: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        for rule in self.alert_rules:
            try:
                rule(metrics, self)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–µ –∞–ª–µ—Ä—Ç–∞: {e}")


class LoggingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, config=None):
        self.config = config or get_config()
        self.loggers: Dict[str, logging.Logger] = {}
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        detailed_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s'
        )
        
        simple_formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_main_logger(detailed_formatter)
        self.setup_component_loggers(detailed_formatter)
        self.setup_error_logger(detailed_formatter)
        self.setup_audit_logger(simple_formatter)
    
    def setup_main_logger(self, formatter):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger('AMLSystem')
        logger.setLevel(logging.INFO)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = RotatingFileHandler(
            'logs/aml_system.log',
            maxBytes=50*1024*1024,  # 50MB
            backupCount=5
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        self.loggers['main'] = logger
    
    def setup_component_loggers(self, formatter):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        components = [
            'backend', 'frontend', 'processor', 'analyzer', 
            'database', 'network', 'monitoring'
        ]
        
        for component in components:
            logger = logging.getLogger(f'AML.{component}')
            logger.setLevel(logging.DEBUG)
            
            # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            file_handler = TimedRotatingFileHandler(
                f'logs/{component}.log',
                when='midnight',
                interval=1,
                backupCount=7
            )
            file_handler.setLevel(logging.DEBUG)
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
            
            self.loggers[component] = logger
    
    def setup_error_logger(self, formatter):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –æ—à–∏–±–æ–∫"""
        logger = logging.getLogger('AML.errors')
        logger.setLevel(logging.ERROR)
        
        # –§–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
        error_handler = RotatingFileHandler(
            'logs/errors.log',
            maxBytes=10*1024*1024,  # 10MB
            backupCount=10
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        logger.addHandler(error_handler)
        
        self.loggers['errors'] = logger
    
    def setup_audit_logger(self, formatter):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger('AML.audit')
        logger.setLevel(logging.INFO)
        logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ª–æ–≥–≥–µ—Ä—ã
        
        # –ê—É–¥–∏—Ç –ª–æ–≥ - –Ω–µ —Ä–æ—Ç–∏—Ä—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
        audit_handler = logging.FileHandler('logs/audit.log')
        audit_handler.setLevel(logging.INFO)
        audit_handler.setFormatter(formatter)
        logger.addHandler(audit_handler)
        
        self.loggers['audit'] = logger
    
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞"""
        if name in self.loggers:
            return self.loggers[name]
        return self.loggers.get('main', logging.getLogger(name))


class SystemMonitor:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä"""
    
    def __init__(self):
        self.metrics = MetricsCollector()
        self.alerts = AlertManager()
        self.logging_manager = LoggingManager()
        self.running = False
        self.monitor_thread: Optional[threading.Thread] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.setup_alert_rules()
        self.setup_notification_handlers()
        
        # –õ–æ–≥–≥–µ—Ä
        self.logger = self.logging_manager.get_logger('monitoring')
    
    def setup_alert_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        
        def cpu_rule(metrics: Dict[str, Any], alert_manager: AlertManager):
            cpu_usage = metrics.get('system.cpu_percent', 0)
            if cpu_usage > 90:
                alert_manager.create_alert(
                    'critical', f'–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage:.1f}%', 'system'
                )
            elif cpu_usage > 80:
                alert_manager.create_alert(
                    'warning', f'–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage:.1f}%', 'system'
                )
        
        def memory_rule(metrics: Dict[str, Any], alert_manager: AlertManager):
            memory_usage = metrics.get('system.memory_percent', 0)
            if memory_usage > 85:
                alert_manager.create_alert(
                    'critical', f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.1f}%', 'system'
                )
            elif memory_usage > 75:
                alert_manager.create_alert(
                    'warning', f'–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.1f}%', 'system'
                )
        
        def disk_rule(metrics: Dict[str, Any], alert_manager: AlertManager):
            disk_usage = metrics.get('system.disk_percent', 0)
            if disk_usage > 90:
                alert_manager.create_alert(
                    'critical', f'–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_usage:.1f}%', 'system'
                )
            elif disk_usage > 80:
                alert_manager.create_alert(
                    'warning', f'–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {disk_usage:.1f}%', 'system'
                )
        
        def processing_rule(metrics: Dict[str, Any], alert_manager: AlertManager):
            error_rate = metrics.get('processing.error_rate', 0)
            if error_rate > 10:
                alert_manager.create_alert(
                    'error', f'–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_rate:.1f}%', 'processor'
                )
        
        self.alerts.add_alert_rule(cpu_rule)
        self.alerts.add_alert_rule(memory_rule)
        self.alerts.add_alert_rule(disk_rule)
        self.alerts.add_alert_rule(processing_rule)
    
    def setup_notification_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        def console_notification(alert: Alert):
            level_icons = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå',
                'critical': 'üö®'
            }
            icon = level_icons.get(alert.level, 'üì¢')
            print(f"{icon} [{alert.level.upper()}] {alert.component}: {alert.message}")
        
        def log_notification(alert: Alert):
            logger = self.logging_manager.get_logger('alerts')
            if alert.level == 'critical':
                logger.critical(f"{alert.component}: {alert.message}")
            elif alert.level == 'error':
                logger.error(f"{alert.component}: {alert.message}")
            elif alert.level == 'warning':
                logger.warning(f"{alert.component}: {alert.message}")
            else:
                logger.info(f"{alert.component}: {alert.message}")
        
        self.alerts.add_notification_handler(console_notification)
        self.alerts.add_notification_handler(log_notification)
    
    def start_monitoring(self, interval: float = 5.0):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.running:
            return
        
        self.running = True
        self.monitor_thread = threading.Thread(
            target=self._monitor_loop,
            args=(interval,),
            daemon=True
        )
        self.monitor_thread.start()
        self.logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.running:
            return
        
        self.running = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=10)
        self.logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_loop(self, interval: float):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                self._collect_system_metrics()
                self._check_alerts()
                time.sleep(interval)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _collect_system_metrics(self):
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            self.metrics.set_gauge('system.cpu_percent', cpu_percent)
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            self.metrics.set_gauge('system.memory_percent', memory.percent)
            self.metrics.set_gauge('system.memory_available_gb', memory.available / (1024**3))
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            self.metrics.set_gauge('system.disk_percent', disk.percent)
            self.metrics.set_gauge('system.disk_free_gb', disk.free / (1024**3))
            
            # –°–µ—Ç—å
            network = psutil.net_io_counters()
            self.metrics.set_gauge('system.network_bytes_sent', network.bytes_sent)
            self.metrics.set_gauge('system.network_bytes_recv', network.bytes_recv)
            
            # –ü—Ä–æ—Ü–µ—Å—Å—ã
            process_count = len(psutil.pids())
            self.metrics.set_gauge('system.process_count', process_count)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _check_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            latest_metrics = self.metrics.get_latest_values()
            self.alerts.check_rules(latest_metrics)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def record_processing_metric(self, 
                                metric_name: str, 
                                value: Union[int, float], 
                                component: str = 'processor',
                                tags: Dict[str, str] = None):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        full_name = f"processing.{metric_name}"
        tags = tags or {}
        tags['component'] = component
        
        self.metrics.record_metric(full_name, value, tags)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        if metric_name in ['transactions_processed', 'errors_count', 'processing_time']:
            logger = self.logging_manager.get_logger('processor')
            logger.info(f"{metric_name}: {value} (component: {component})")
    
    def record_analysis_metric(self,
                              analysis_type: str,
                              transactions_count: int,
                              processing_time: float,
                              errors_count: int = 0):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        tags = {'analysis_type': analysis_type}
        
        self.metrics.record_metric('analysis.transactions_processed', transactions_count, tags)
        self.metrics.record_histogram('analysis.processing_time', processing_time, tags)
        self.metrics.increment_counter('analysis.total_processed', transactions_count, tags)
        
        if errors_count > 0:
            self.metrics.increment_counter('analysis.errors', errors_count, tags)
            error_rate = (errors_count / transactions_count) * 100
            self.metrics.set_gauge('analysis.error_rate', error_rate, tags)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger = self.logging_manager.get_logger('analyzer')
        logger.info(f"–ê–Ω–∞–ª–∏–∑ {analysis_type}: {transactions_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, "
                   f"{processing_time:.2f}—Å, –æ—à–∏–±–æ–∫: {errors_count}")
    
    def get_dashboard_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dashboard"""
        now = datetime.now()
        hour_ago = now - timedelta(hours=1)
        
        return {
            'timestamp': now.isoformat(),
            'system_metrics': {
                name: value for name, value in self.metrics.get_latest_values().items()
                if name.startswith('system.')
            },
            'processing_metrics': {
                name: value for name, value in self.metrics.get_latest_values().items()
                if name.startswith('processing.') or name.startswith('analysis.')
            },
            'active_alerts': [alert.to_dict() for alert in self.alerts.get_active_alerts()],
            'recent_alerts': [alert.to_dict() for alert in self.alerts.get_all_alerts(since=hour_ago)],
            'uptime': self._get_uptime(),
            'summary': self._get_summary_stats()
        }
    
    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            boot_time = datetime.fromtimestamp(psutil.boot_time())
            uptime = datetime.now() - boot_time
            days = uptime.days
            hours, remainder = divmod(uptime.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            return f"{days}d {hours}h {minutes}m"
        except:
            return "Unknown"
    
    def _get_summary_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        latest = self.metrics.get_latest_values()
        
        return {
            'total_transactions_processed': latest.get('analysis.total_processed_total', 0),
            'current_cpu_usage': latest.get('system.cpu_percent', 0),
            'current_memory_usage': latest.get('system.memory_percent', 0),
            'active_alerts_count': len(self.alerts.get_active_alerts()),
            'processing_error_rate': latest.get('processing.error_rate', 0)
        }
    
    def save_metrics_to_db(self, db_path: str = "aml_metrics.db"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –ë–î"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            with sqlite3.connect(db_path) as conn:
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS metrics (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        timestamp TEXT NOT NULL,
                        name TEXT NOT NULL,
                        value REAL NOT NULL,
                        tags TEXT,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS alerts (
                        id TEXT PRIMARY KEY,
                        level TEXT NOT NULL,
                        message TEXT NOT NULL,
                        component TEXT NOT NULL,
                        timestamp TEXT NOT NULL,
                        resolved BOOLEAN DEFAULT FALSE,
                        resolution_time TEXT,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
                hour_ago = datetime.now() - timedelta(hours=1)
                metrics_data = self.metrics.get_metrics(since=hour_ago)
                
                for name, points in metrics_data.items():
                    for point in points[-100:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫
                        conn.execute(
                            'INSERT INTO metrics (timestamp, name, value, tags) VALUES (?, ?, ?, ?)',
                            (point.timestamp.isoformat(), point.name, point.value, json.dumps(point.tags))
                        )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
                for alert in self.alerts.get_all_alerts(since=hour_ago):
                    conn.execute('''
                        INSERT OR REPLACE INTO alerts 
                        (id, level, message, component, timestamp, resolved, resolution_time)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        alert.id, alert.level, alert.message, alert.component,
                        alert.timestamp.isoformat(), alert.resolved,
                        alert.resolution_time.isoformat() if alert.resolution_time else None
                    ))
                
                conn.commit()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –ë–î: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
system_monitor = SystemMonitor()


def get_monitor() -> SystemMonitor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    return system_monitor


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor = get_monitor()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    monitor.start_monitoring(interval=2.0)
    
    try:
        # –ò–º–∏—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        for i in range(10):
            monitor.record_processing_metric('test_transactions', i * 10)
            monitor.record_analysis_metric('transaction', i * 5, 1.5 + i * 0.1)
            time.sleep(2)
            
            if i == 5:
                # –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞
                monitor.alerts.create_alert('warning', '–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç', 'test')
        
        # –í—ã–≤–æ–¥ dashboard
        dashboard = monitor.get_dashboard_data()
        print("\nüìä DASHBOARD DATA:")
        print(json.dumps(dashboard, indent=2, ensure_ascii=False))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        monitor.save_metrics_to_db()
        print("\nüíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    finally:
        monitor.stop_monitoring()