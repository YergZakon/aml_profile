#!/usr/bin/env python3
"""
üöÄ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ AML —Å–∏—Å—Ç–µ–º—ã
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import time
import json
import subprocess
import threading
from datetime import datetime
from pathlib import Path

def print_banner():
    print("üöÄ –ü–†–û–°–¢–û–ô –ó–ê–ü–£–°–ö AML –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    print(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'aml-backend/app.py',
        'aml-monitoring-frontend/package.json'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        return False
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π
    try:
        import sqlite3
        print("‚úÖ sqlite3")
    except ImportError:
        print("‚ùå sqlite3")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    try:
        result = subprocess.run(['node', '--version'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print(f"‚úÖ Node.js {result.stdout.strip()}")
        else:
            print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except:
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    try:
        result = subprocess.run(['npm', '--version'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print(f"‚úÖ npm {result.stdout.strip()}")
        else:
            print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except:
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def install_frontend_deps():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend"""
    node_modules = Path('aml-monitoring-frontend/node_modules')
    if node_modules.exists():
        print("‚úÖ Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...")
    try:
        process = subprocess.Popen(
            ['npm', 'install'],
            cwd='aml-monitoring-frontend',
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for line in process.stdout:
            if 'npm WARN' not in line:
                print(f"   {line.strip()}")
        
        process.wait()
        
        if process.returncode == 0:
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def start_backend():
    """–ó–∞–ø—É—Å–∫ backend"""
    print("\nüîß –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ app.py
        app_py = Path('aml-backend/app.py')
        if not app_py.exists():
            print("‚ùå Backend app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º backend
        env = os.environ.copy()
        env['FLASK_ENV'] = 'development'
        env['FLASK_DEBUG'] = '1'
        
        process = subprocess.Popen(
            [sys.executable, 'app.py'],
            cwd='aml-backend',
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        print(f"‚úÖ Backend –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {e}")
        return None

def start_frontend():
    """–ó–∞–ø—É—Å–∫ frontend"""
    print("\n‚öõÔ∏è –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        env = os.environ.copy()
        env['PORT'] = '3000'
        env['VITE_BACKEND_URL'] = 'http://localhost:5000'
        
        process = subprocess.Popen(
            ['npm', 'run', 'dev'],
            cwd='aml-monitoring-frontend',
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        print(f"‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend: {e}")
        return None

def monitor_process(process, name):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        for line in iter(process.stdout.readline, ''):
            if line:
                line = line.strip()
                # –§–∏–ª—å—Ç—Ä—É–µ–º —à—É–º–Ω—ã–µ –ª–æ–≥–∏
                if not any(noise in line for noise in ['webpack compiled', 'Local:', '[HMR]']):
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    print(f"[{timestamp}] {name}: {line}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name}: {e}")

def wait_for_services():
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    time.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
    
    print("üéâ –°–µ—Ä–≤–∏—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã!")
    print(f"üì± Frontend: http://localhost:3000")
    print(f"üîó Backend API: http://localhost:5000")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_files():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return False
    
    if not check_dependencies():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend
    if not install_frontend_deps():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend")
        return False
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    backend_process = start_backend()
    if not backend_process:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend")
        return False
    
    time.sleep(5)  # –î–∞–µ–º backend –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    
    frontend_process = start_frontend()
    if not frontend_process:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å frontend")
        if backend_process:
            backend_process.terminate()
        return False
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    backend_monitor = threading.Thread(
        target=monitor_process,
        args=(backend_process, "BACKEND"),
        daemon=True
    )
    backend_monitor.start()
    
    frontend_monitor = threading.Thread(
        target=monitor_process,
        args=(frontend_process, "FRONTEND"),
        daemon=True
    )
    frontend_monitor.start()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    wait_for_services()
    
    print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ –∂–∏–≤—ã
            if backend_process.poll() is not None:
                print("‚ö†Ô∏è Backend –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                break
            
            if frontend_process.poll() is not None:
                print("‚ö†Ô∏è Frontend –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                break
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        if backend_process and backend_process.poll() is None:
            backend_process.terminate()
            try:
                backend_process.wait(timeout=10)
                print("‚úÖ Backend –∑–∞–≤–µ—Ä—à–µ–Ω")
            except:
                backend_process.kill()
                print("üî® Backend –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        if frontend_process and frontend_process.poll() is None:
            frontend_process.terminate()
            try:
                frontend_process.wait(timeout=10)
                print("‚úÖ Frontend –∑–∞–≤–µ—Ä—à–µ–Ω")
            except:
                frontend_process.kill()
                print("üî® Frontend –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)