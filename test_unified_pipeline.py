#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ AML —Å–∏—Å—Ç–µ–º—ã
–í–µ—Ä—Å–∏—è: 3.0

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
"""

import os
import sys
import time
import json
import psutil
import requests
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import threading
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from aml_unified_launcher import AMLUnifiedLauncher, SystemConfig
    from aml_process_manager import ProcessManager, create_aml_process_manager
    from aml_monitoring import get_monitor
    from aml_config import get_config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    sys.exit(1)


class AMLPipelineTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AML –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        self.test_results = {
            'start_time': datetime.now().isoformat(),
            'tests': {},
            'overall_success': False,
            'summary': {}
        }
        self.config = get_config()
        self.monitor = get_monitor()
        self.temp_files = []
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AML –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("=" * 70)
        
        tests = [
            ('configuration_test', self.test_configuration),
            ('dependencies_test', self.test_dependencies),
            ('file_structure_test', self.test_file_structure),
            ('backend_launch_test', self.test_backend_launch),
            ('frontend_launch_test', self.test_frontend_launch),
            ('json_processing_test', self.test_json_processing),
            ('multiprocessing_test', self.test_multiprocessing),
            ('monitoring_test', self.test_monitoring),
            ('api_endpoints_test', self.test_api_endpoints),
            ('performance_test', self.test_performance)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç: {test_name}")
            print("-" * 50)
            
            try:
                start_time = time.time()
                result = test_func()
                end_time = time.time()
                
                self.test_results['tests'][test_name] = {
                    'success': result.get('success', False),
                    'duration': end_time - start_time,
                    'details': result.get('details', {}),
                    'message': result.get('message', ''),
                    'timestamp': datetime.now().isoformat()
                }
                
                if result.get('success', False):
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    passed_tests += 1
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù - {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                print(f"üí• {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
                self.test_results['tests'][test_name] = {
                    'success': False,
                    'duration': 0,
                    'details': {'error': str(e)},
                    'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}',
                    'timestamp': datetime.now().isoformat()
                }
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.test_results['overall_success'] = passed_tests == total_tests
        self.test_results['summary'] = {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'failed_tests': total_tests - passed_tests,
            'success_rate': (passed_tests / total_tests) * 100,
            'end_time': datetime.now().isoformat()
        }
        
        self.cleanup()
        self.print_final_report()
        
        return self.test_results
    
    def test_configuration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.config:
                return {
                    'success': False,
                    'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
                }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.config.validate_configuration():
                return {
                    'success': False,
                    'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é'
                }
            
            details = {
                'max_workers': self.config.processing.max_workers,
                'batch_size': self.config.processing.batch_size,
                'database_path': self.config.database.database_path
            }
            
            return {
                'success': True,
                'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
                'details': details
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}'
            }
    
    def test_dependencies(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            missing_deps = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π
            required_modules = [
                'flask', 'flask_cors', 'psutil', 'requests', 'numpy', 
                'pandas', 'networkx', 'sqlite3'
            ]
            
            for module in required_modules:
                try:
                    __import__(module)
                except ImportError:
                    missing_deps.append(f"Python: {module}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            system_commands = ['npm', 'node']
            for cmd in system_commands:
                try:
                    result = subprocess.run([cmd, '--version'], 
                                          capture_output=True, text=True, timeout=5)
                    if result.returncode != 0:
                        missing_deps.append(f"System: {cmd}")
                except (subprocess.TimeoutExpired, FileNotFoundError):
                    missing_deps.append(f"System: {cmd}")
            
            if missing_deps:
                return {
                    'success': False,
                    'message': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {", ".join(missing_deps)}',
                    'details': {'missing': missing_deps}
                }
            
            return {
                'success': True,
                'message': '–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
                'details': {'checked_modules': required_modules, 'checked_commands': system_commands}
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}'
            }
    
    def test_file_structure(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        try:
            required_files = [
                'aml_unified_launcher.py',
                'aml_config.py',
                'aml_process_manager.py',
                'aml_monitoring.py',
                'aml-backend/app.py',
                'aml-backend/aml_database_setup.py',
                'aml-backend/aml_integration_system.py',
                'aml-backend/aml_pipeline_enhanced.py',
                'aml-monitoring-frontend/package.json',
                'aml-monitoring-frontend/src/app.jsx'
            ]
            
            missing_files = []
            for file_path in required_files:
                if not Path(file_path).exists():
                    missing_files.append(file_path)
            
            required_dirs = [
                'aml-backend',
                'aml-monitoring-frontend',
                'aml-monitoring-frontend/src'
            ]
            
            missing_dirs = []
            for dir_path in required_dirs:
                if not Path(dir_path).exists():
                    missing_dirs.append(dir_path)
            
            if missing_files or missing_dirs:
                return {
                    'success': False,
                    'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏',
                    'details': {
                        'missing_files': missing_files,
                        'missing_dirs': missing_dirs
                    }
                }
            
            return {
                'success': True,
                'message': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
                'details': {
                    'checked_files': len(required_files),
                    'checked_dirs': len(required_dirs)
                }
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}'
            }
    
    def test_backend_launch(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ backend"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä
            manager = create_aml_process_manager()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º backend
            if not manager.start_process('aml-backend'):
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend'
                }
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            try:
                response = requests.get('http://localhost:5000/api/health', timeout=10)
                if response.status_code == 200:
                    manager.stop_process('aml-backend')
                    return {
                        'success': True,
                        'message': 'Backend –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç',
                        'details': {'response_time': response.elapsed.total_seconds()}
                    }
                else:
                    manager.stop_process('aml-backend')
                    return {
                        'success': False,
                        'message': f'Backend –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}'
                    }
                    
            except requests.RequestException as e:
                manager.stop_process('aml-backend')
                return {
                    'success': False,
                    'message': f'Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}'
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è backend: {e}'
            }
    
    def test_frontend_launch(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ frontend"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
            package_json = Path('aml-monitoring-frontend/package.json')
            if not package_json.exists():
                return {
                    'success': False,
                    'message': 'package.json –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
            node_modules = Path('aml-monitoring-frontend/node_modules')
            if not node_modules.exists():
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...")
                result = subprocess.run(
                    ['npm', 'install'],
                    cwd='aml-monitoring-frontend',
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode != 0:
                    return {
                        'success': False,
                        'message': f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}'
                    }
            
            return {
                'success': True,
                'message': 'Frontend –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É',
                'details': {'dependencies_installed': True}
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è frontend: {e}'
            }
    
    def test_json_processing(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JSON —Ñ–∞–π–ª
            test_data = self.create_test_json_data()
            test_file = self.save_test_json(test_data)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            from aml_pipeline_enhanced import AMLPipelineEnhanced
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            pipeline = AMLPipelineEnhanced('test_aml_system.db')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            transactions = pipeline.load_json_file(test_file)
            
            if not transactions:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ JSON'
                }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            results = pipeline._analyze_transactions_sequential(transactions[:10])
            
            if not results.get('total_processed', 0) > 0:
                return {
                    'success': False,
                    'message': '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
                }
            
            return {
                'success': True,
                'message': 'JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'details': {
                    'transactions_loaded': len(transactions),
                    'transactions_analyzed': results.get('total_processed', 0),
                    'processing_time': results.get('processing_time', 0)
                }
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}'
            }
    
    def test_multiprocessing(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = []
            for i in range(500):  # 500 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                test_data.extend(self.create_test_json_data())
            
            test_file = self.save_test_json(test_data)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            from aml_pipeline_enhanced import AMLPipelineEnhanced
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            pipeline = AMLPipelineEnhanced('test_aml_system_mp.db')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            start_time = time.time()
            results = pipeline.process_json_files(
                json_files=[test_file],
                parallel_analysis=True,
                save_to_db=False
            )
            end_time = time.time()
            
            processing_time = end_time - start_time
            
            if not results.get('total_processed', 0) > 0:
                return {
                    'success': False,
                    'message': '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            transactions_per_second = results.get('transactions_per_second', 0)
            if transactions_per_second < 1:
                return {
                    'success': False,
                    'message': f'–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {transactions_per_second:.2f} —Ç—Ä/—Å–µ–∫'
                }
            
            return {
                'success': True,
                'message': '–ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                'details': {
                    'total_processed': results.get('total_processed', 0),
                    'processing_time': processing_time,
                    'transactions_per_second': transactions_per_second,
                    'workers_used': self.config.processing.max_workers if self.config else 'unknown'
                }
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {e}'
            }
    
    def test_monitoring(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitor.start_monitoring(interval=1.0)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            self.monitor.record_processing_metric('test_metric', 100)
            self.monitor.record_analysis_metric('test_analysis', 50, 2.5)
            
            # –ñ–¥–µ–º —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º dashboard
            dashboard_data = self.monitor.get_dashboard_data()
            
            if not dashboard_data:
                return {
                    'success': False,
                    'message': 'Dashboard –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            system_metrics = dashboard_data.get('system_metrics', {})
            if not system_metrics:
                return {
                    'success': False,
                    'message': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è'
                }
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitor.stop_monitoring()
            
            return {
                'success': True,
                'message': '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                'details': {
                    'system_metrics_count': len(system_metrics),
                    'has_cpu_metric': 'system.cpu_percent' in system_metrics,
                    'has_memory_metric': 'system.memory_percent' in system_metrics
                }
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}'
            }
    
    def test_api_endpoints(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç API endpoints"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º backend
            manager = create_aml_process_manager()
            if not manager.start_process('aml-backend'):
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API'
                }
            
            time.sleep(5)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
            endpoints_to_test = [
                '/api/health',
                '/api/analytics/dashboard',
                '/api/transactions'
            ]
            
            results = {}
            all_passed = True
            
            for endpoint in endpoints_to_test:
                try:
                    url = f'http://localhost:5000{endpoint}'
                    response = requests.get(url, timeout=10)
                    
                    results[endpoint] = {
                        'status_code': response.status_code,
                        'response_time': response.elapsed.total_seconds(),
                        'success': response.status_code == 200
                    }
                    
                    if response.status_code != 200:
                        all_passed = False
                        
                except requests.RequestException as e:
                    results[endpoint] = {
                        'error': str(e),
                        'success': False
                    }
                    all_passed = False
            
            manager.stop_process('aml-backend')
            
            return {
                'success': all_passed,
                'message': '–í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç' if all_passed else '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                'details': results
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}'
            }
    
    def test_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ò–∑–º–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            initial_memory = psutil.virtual_memory().percent
            initial_cpu = psutil.cpu_percent(interval=1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç
            test_data = []
            for i in range(100):  # 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                test_data.extend(self.create_test_json_data())
            
            test_file = self.save_test_json(test_data)
            
            from aml_pipeline_enhanced import AMLPipelineEnhanced
            pipeline = AMLPipelineEnhanced('test_performance.db')
            
            start_time = time.time()
            start_memory = psutil.virtual_memory().percent
            
            results = pipeline.process_json_files(
                json_files=[test_file],
                parallel_analysis=True,
                save_to_db=False
            )
            
            end_time = time.time()
            end_memory = psutil.virtual_memory().percent
            
            processing_time = end_time - start_time
            memory_usage = end_memory - start_memory
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            min_speed = 10  # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
            max_memory_increase = 20  # –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            max_processing_time = 60  # —Å–µ–∫—É–Ω–¥
            
            speed = results.get('transactions_per_second', 0)
            
            performance_issues = []
            if speed < min_speed:
                performance_issues.append(f"–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} —Ç—Ä/—Å–µ–∫")
            if memory_usage > max_memory_increase:
                performance_issues.append(f"–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: +{memory_usage:.1f}%")
            if processing_time > max_processing_time:
                performance_issues.append(f"–î–æ–ª–≥–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {processing_time:.1f}—Å–µ–∫")
            
            success = len(performance_issues) == 0
            
            return {
                'success': success,
                'message': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ' if success else f"–ü—Ä–æ–±–ª–µ–º—ã: {'; '.join(performance_issues)}",
                'details': {
                    'processing_time': processing_time,
                    'transactions_per_second': speed,
                    'memory_usage_increase': memory_usage,
                    'total_processed': results.get('total_processed', 0),
                    'performance_issues': performance_issues
                }
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}'
            }
    
    def create_test_json_data(self) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö"""
        return [
            {
                "row_to_json": {
                    "gmess_id": f"TEST_{int(time.time() * 1000)}",
                    "goper_trans_date": datetime.now().isoformat(),
                    "goper_tenge_amount": "1500000.00",
                    "goper_dopinfo": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
                    "gmember1_maincode": "TEST001",
                    "gmember1_ur_name": "–¢–û–û –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø 1",
                    "gmember1_bank_address": "–ê–ª–º–∞—Ç—ã",
                    "gmember_residence_pol1": "KZ",
                    "gmember2_maincode": "TEST002", 
                    "gmember2_ur_name": "–¢–û–û –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø 2",
                    "gmember2_bank_address": "–ù—É—Ä-–°—É–ª—Ç–∞–Ω",
                    "gmember_residence_pl2": "KZ",
                    "goper_susp_first": None,
                    "goper_susp_second": None,
                    "goper_susp_third": None,
                    "gmess_oper_status": "COMPLETED",
                    "gmess_reason_code": "001"
                }
            }
        ]
    
    def save_test_json(self, data: List[Dict]) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            temp_file = f.name
        
        self.temp_files.append(temp_file)
        return temp_file
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        for temp_file in self.temp_files:
            try:
                os.unlink(temp_file)
            except OSError:
                pass
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ë–î
        test_dbs = ['test_aml_system.db', 'test_aml_system_mp.db', 'test_performance.db']
        for db_file in test_dbs:
            try:
                if os.path.exists(db_file):
                    os.unlink(db_file)
            except OSError:
                pass
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 70)
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        summary = self.test_results['summary']
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed_tests']}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed_tests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        
        # –°—Ç–∞—Ç—É—Å
        if self.test_results['overall_success']:
            print(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print(f"\n‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
            print(f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
        print(f"\nüìù –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:")
        for test_name, test_result in self.test_results['tests'].items():
            status_icon = "‚úÖ" if test_result['success'] else "‚ùå"
            duration = test_result['duration']
            message = test_result['message']
            print(f"   {status_icon} {test_name:<25} ({duration:.2f}—Å) - {message}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2, default=str)
            print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ï–î–ò–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê AML")
    print(f"üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üíª –°–∏—Å—Ç–µ–º–∞: {psutil.cpu_count()} CPU, {psutil.virtual_memory().total // (1024**3)} GB RAM")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = AMLPipelineTest()
    
    try:
        results = tester.run_all_tests()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if results['overall_success']:
            print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
            sys.exit(0)
        else:
            print(f"\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        tester.cleanup()
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        tester.cleanup()
        sys.exit(1)


if __name__ == "__main__":
    main()