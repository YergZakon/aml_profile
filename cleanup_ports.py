#!/usr/bin/env python3
"""
üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ AML —Å–∏—Å—Ç–µ–º—ã
–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 3000 –∏ 5000
"""

import os
import signal
import subprocess
import time

def find_process_on_port(port):
    """–ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ss –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        result = subprocess.run(['ss', '-tlnp'], capture_output=True, text=True)
        lines = result.stdout.split('\n')
        
        for line in lines:
            if f':{port}' in line and 'LISTEN' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º PID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "users:(("python3",pid=12345,fd=3))"
                if 'users:' in line:
                    users_part = line.split('users:')[1]
                    if 'pid=' in users_part:
                        pid_str = users_part.split('pid=')[1].split(',')[0]
                        try:
                            return int(pid_str)
                        except ValueError:
                            pass
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        return None

def kill_process(pid):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        os.kill(pid, signal.SIGTERM)
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        try:
            os.kill(pid, 0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            print(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–º–µ–Ω—è—é SIGKILL...")
            os.kill(pid, signal.SIGKILL)
            time.sleep(1)
        except ProcessLookupError:
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
    except ProcessLookupError:
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
    except PermissionError:
        print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
        return False
    
    return True

def cleanup_aml_ports():
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ AML —Å–∏—Å—Ç–µ–º—ã"""
    ports_to_clean = [3000, 5000]
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–û–†–¢–û–í AML –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    for port in ports_to_clean:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {port}...")
        pid = find_process_on_port(port)
        
        if pid:
            print(f"üìç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            if kill_process(pid):
                print(f"‚úÖ –ü–æ—Ä—Ç {port} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}")
        else:
            print(f"‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã python3 app.py
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ python3 app.py...")
    try:
        result = subprocess.run(['pgrep', '-f', 'python3 app.py'], capture_output=True, text=True)
        pids = result.stdout.strip().split('\n')
        
        for pid_str in pids:
            if pid_str:
                try:
                    pid = int(pid_str)
                    print(f"üìç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å python3 app.py: {pid}")
                    kill_process(pid)
                except ValueError:
                    pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    cleanup_aml_ports()