#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'aml-backend'))

from aml_integration_system import AMLDatabaseManager, AMLJSONDataLoader

def reload_data():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_path = "aml-backend/aml_system_e840b2937714940f.db"
    if os.path.exists(db_path):
        os.remove(db_path)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager = AMLDatabaseManager(db_path)
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º
    loader = AMLJSONDataLoader(db_manager)
    success = loader.load_and_process_json("do_range.json")
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = db_manager.get_db_cursor()
        
        cursor.execute("SELECT COUNT(*) FROM transactions")
        total_tx = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM transactions WHERE beneficiary_name IS NOT NULL AND beneficiary_name != ''")
        with_beneficiary = cursor.fetchone()[0]
        
        cursor.execute("SELECT transaction_id, sender_name, beneficiary_name, amount_kzt FROM transactions WHERE beneficiary_name IS NOT NULL AND beneficiary_name != '' LIMIT 5")
        examples = cursor.fetchall()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò:")
        print(f"‚îú‚îÄ‚îÄ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_tx}")
        print(f"‚îú‚îÄ‚îÄ –° –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏: {with_beneficiary}")
        print(f"‚îî‚îÄ‚îÄ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–Ω—ã—Ö: {(with_beneficiary/total_tx*100):.1f}%")
        
        if examples:
            print("\nüîç –ü–†–ò–ú–ï–†–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –ü–û–õ–£–ß–ê–¢–ï–õ–Ø–ú–ò:")
            for ex in examples:
                print(f"  {ex[0]}: {ex[1]} ‚Üí {ex[2]} ({ex[3]:,.0f} KZT)")
        
        return with_beneficiary > 0
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

if __name__ == "__main__":
    success = reload_data()
    if success:
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.") 