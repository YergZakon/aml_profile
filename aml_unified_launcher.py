#!/usr/bin/env python3
"""
üöÄ –ï–¥–∏–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—Å–∫–∞ AML —Å–∏—Å—Ç–µ–º—ã
–í–µ—Ä—Å–∏—è: 3.0

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ backend –∏ frontend
- –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É JSON —Ñ–∞–π–ª–æ–≤
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
"""

import os
import sys
import json
import time
import signal
import psutil
import logging
import argparse
import subprocess
import threading
import multiprocessing
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AML –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'aml-backend'))

@dataclass
class SystemConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    # –ü—É—Ç–∏ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    backend_path: str = "aml-backend"
    frontend_path: str = "aml-monitoring-frontend"
    uploads_path: str = "uploads"
    database_path: str = "aml_system.db"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    backend_port: int = 5000
    frontend_port: int = 3000
    host: str = "localhost"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    max_workers: int = None
    batch_size: int = 100
    max_memory_mb: int = 4096
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    log_level: str = "INFO"
    enable_monitoring: bool = True
    monitoring_interval: int = 5
    
    def __post_init__(self):
        if self.max_workers is None:
            self.max_workers = min(20, max(1, multiprocessing.cpu_count() - 2))

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    def __init__(self, config: SystemConfig):
        self.config = config
        self.processes = {}
        self.monitoring = False
        self.stats = {
            'cpu_usage': 0.0,
            'memory_usage': 0.0,
            'disk_usage': 0.0,
            'network_io': {'bytes_sent': 0, 'bytes_recv': 0},
            'processes_count': 0,
            'uptime': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=getattr(logging, config.log_level),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler(f'aml_system_{datetime.now().strftime("%Y%m%d")}.log')
            ]
        )
        self.logger = logging.getLogger('AMLMonitor')
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = True
        self.start_time = time.time()
        
        def monitor_loop():
            while self.monitoring:
                try:
                    self._update_stats()
                    time.sleep(self.config.monitoring_interval)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        
        thread = threading.Thread(target=monitor_loop, daemon=True)
        thread.start()
        self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = False
        self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # CPU –∏ –ø–∞–º—è—Ç—å
            self.stats['cpu_usage'] = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            self.stats['memory_usage'] = memory.percent
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            self.stats['disk_usage'] = disk.percent
            
            # –°–µ—Ç—å
            network = psutil.net_io_counters()
            self.stats['network_io'] = {
                'bytes_sent': network.bytes_sent,
                'bytes_recv': network.bytes_recv
            }
            
            # –ü—Ä–æ—Ü–µ—Å—Å—ã
            self.stats['processes_count'] = len([p for p in self.processes.values() if p and p.poll() is None])
            self.stats['uptime'] = time.time() - self.start_time
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        return {
            'stats': self.stats.copy(),
            'processes': {
                name: {
                    'pid': proc.pid if proc and proc.poll() is None else None,
                    'status': 'running' if proc and proc.poll() is None else 'stopped'
                }
                for name, proc in self.processes.items()
            },
            'config': {
                'max_workers': self.config.max_workers,
                'batch_size': self.config.batch_size,
                'max_memory_mb': self.config.max_memory_mb
            }
        }
    
    def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        status = self.get_status()
        
        print(f"\nüìä –°–¢–ê–¢–£–° AML –°–ò–°–¢–ï–ú–´")
        print(f"{'='*60}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['stats']['uptime']:.1f} —Å–µ–∫")
        print(f"üíª CPU: {status['stats']['cpu_usage']:.1f}%")
        print(f"üß† RAM: {status['stats']['memory_usage']:.1f}%")
        print(f"üíΩ –î–∏—Å–∫: {status['stats']['disk_usage']:.1f}%")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {status['stats']['processes_count']}")
        
        print(f"\nüîß –ü–†–û–¶–ï–°–°–´:")
        for name, info in status['processes'].items():
            status_icon = "‚úÖ" if info['status'] == 'running' else "‚ùå"
            pid_info = f"(PID: {info['pid']})" if info['pid'] else ""
            print(f"  {status_icon} {name}: {info['status']} {pid_info}")

class AMLUnifiedLauncher:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –µ–¥–∏–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∑–∞–ø—É—Å–∫–∞"""
    
    def __init__(self, config: SystemConfig):
        self.config = config
        self.monitor = SystemMonitor(config)
        self.running = False
        self.shutdown_requested = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.shutdown_requested = True
        self.shutdown()
    
    def start_backend(self) -> subprocess.Popen:
        """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞"""
        print(f"üîß –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.config.backend_port}...")
        
        backend_dir = Path(self.config.backend_path)
        if not backend_dir.exists():
            raise FileNotFoundError(f"Backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backend_dir}")
        
        app_py = backend_dir / "app.py"
        if not app_py.exists():
            raise FileNotFoundError(f"app.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {app_py}")
        
        env = os.environ.copy()
        env['FLASK_ENV'] = 'development'
        env['FLASK_DEBUG'] = '1'
        env['PORT'] = str(self.config.backend_port)
        
        process = subprocess.Popen(
            [sys.executable, "app.py"],
            cwd=backend_dir,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        self.monitor.processes['backend'] = process
        self.monitor.logger.info(f"Backend –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ backend
        threading.Thread(
            target=self._monitor_process_output,
            args=(process, "BACKEND"),
            daemon=True
        ).start()
        
        return process
    
    def start_frontend(self) -> subprocess.Popen:
        """–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞"""
        print(f"‚öõÔ∏è –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.config.frontend_port}...")
        
        frontend_dir = Path(self.config.frontend_path)
        if not frontend_dir.exists():
            raise FileNotFoundError(f"Frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {frontend_dir}")
        
        package_json = frontend_dir / "package.json"
        if not package_json.exists():
            raise FileNotFoundError(f"package.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {package_json}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ node_modules
        node_modules = frontend_dir / "node_modules"
        if not node_modules.exists():
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...")
            npm_install = subprocess.run(
                ["npm", "install"],
                cwd=frontend_dir,
                capture_output=True,
                text=True
            )
            if npm_install.returncode != 0:
                raise RuntimeError(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {npm_install.stderr}")
        
        env = os.environ.copy()
        env['PORT'] = str(self.config.frontend_port)
        env['VITE_BACKEND_URL'] = f"http://{self.config.host}:{self.config.backend_port}"
        
        process = subprocess.Popen(
            ["npm", "run", "dev"],
            cwd=frontend_dir,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        self.monitor.processes['frontend'] = process
        self.monitor.logger.info(f"Frontend –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ frontend
        threading.Thread(
            target=self._monitor_process_output,
            args=(process, "FRONTEND"),
            daemon=True
        ).start()
        
        return process
    
    def _monitor_process_output(self, process: subprocess.Popen, name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            for line in iter(process.stdout.readline, ''):
                if line:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                    line = line.strip()
                    if line and not self._should_filter_log(line):
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        print(f"[{timestamp}] {name}: {line}")
        except Exception as e:
            self.monitor.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name}: {e}")
    
    def _should_filter_log(self, line: str) -> bool:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞"""
        filters = [
            'webpack compiled',
            'Local:',
            'Network:',
            '[HMR]',
            'ready in',
            '‚úì built in'
        ]
        return any(filter_text in line for filter_text in filters)
    
    def wait_for_services(self, timeout: int = 60):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        import requests
        
        backend_ready = False
        frontend_ready = False
        start_time = time.time()
        
        while time.time() - start_time < timeout and not (backend_ready and frontend_ready):
            if not backend_ready:
                try:
                    response = requests.get(f"http://{self.config.host}:{self.config.backend_port}/api/health", timeout=1)
                    if response.status_code == 200:
                        backend_ready = True
                        print("‚úÖ Backend –≥–æ—Ç–æ–≤")
                except:
                    pass
            
            if not frontend_ready:
                try:
                    response = requests.get(f"http://{self.config.host}:{self.config.frontend_port}", timeout=1)
                    if response.status_code == 200:
                        frontend_ready = True
                        print("‚úÖ Frontend –≥–æ—Ç–æ–≤")
                except:
                    pass
            
            if not (backend_ready and frontend_ready):
                time.sleep(2)
        
        if backend_ready and frontend_ready:
            print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ timeout")
            return False
    
    def process_json_files(self, json_files: List[str] = None, auto_discover: bool = True) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ —Å –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        
        if not json_files and auto_discover:
            uploads_dir = Path(self.config.uploads_path)
            if uploads_dir.exists():
                json_files = list(uploads_dir.glob("*.json"))
                json_files = [str(f) for f in json_files]
        
        if not json_files:
            print("üìÅ JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return {}
        
        print(f"\nüîç –û–ë–†–ê–ë–û–¢–ö–ê JSON –§–ê–ô–õ–û–í")
        print(f"{'='*60}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(json_files)}")
        print(f"üë• –†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {self.config.max_workers}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.config.batch_size}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            from aml_pipeline_enhanced import AMLPipelineEnhanced
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
            pipeline = AMLPipelineEnhanced(self.config.database_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            results = pipeline.process_json_files(
                json_files=json_files,
                parallel_analysis=True,
                save_to_db=True
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            if results:
                report_file = pipeline.generate_report(results)
                print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
            return results
            
        except Exception as e:
            self.monitor.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
            return {}
    
    def run_full_pipeline(self, 
                         start_services: bool = True,
                         process_files: bool = True,
                         json_files: List[str] = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        
        print(f"üöÄ –ó–ê–ü–£–°–ö –ï–î–ò–ù–û–ì–û AML –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print(f"{'='*60}")
        print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üíª –°–∏—Å—Ç–µ–º–∞: {psutil.cpu_count()} CPU, {psutil.virtual_memory().total // (1024**3)} GB RAM")
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   Backend: {self.config.host}:{self.config.backend_port}")
        print(f"   Frontend: {self.config.host}:{self.config.frontend_port}")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.config.database_path}")
        print(f"   –†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {self.config.max_workers}")
        
        results = {
            'start_time': datetime.now().isoformat(),
            'services_started': False,
            'files_processed': False,
            'processing_results': {},
            'errors': []
        }
        
        try:
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.config.enable_monitoring:
                self.monitor.start_monitoring()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            if start_services:
                backend_process = self.start_backend()
                time.sleep(3)  # –î–∞–µ–º backend –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
                
                frontend_process = self.start_frontend()
                time.sleep(3)  # –î–∞–µ–º frontend –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
                
                # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
                if self.wait_for_services():
                    results['services_started'] = True
                    print(f"\nüåê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:")
                    print(f"   Frontend: http://{self.config.host}:{self.config.frontend_port}")
                    print(f"   Backend API: http://{self.config.host}:{self.config.backend_port}/api")
                else:
                    results['errors'].append("–°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            if process_files:
                processing_results = self.process_json_files(json_files)
                if processing_results:
                    results['files_processed'] = True
                    results['processing_results'] = processing_results
                    print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    results['errors'].append("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            if self.config.enable_monitoring:
                self.monitor.print_status()
            
            print(f"\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            return results
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}"
            self.monitor.logger.error(error_msg)
            results['errors'].append(error_msg)
            return results
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if not self.running:
            return
        
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AML —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.config.enable_monitoring:
            self.monitor.stop_monitoring()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name, process in self.monitor.processes.items():
            if process and process.poll() is None:
                print(f"‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ {name} (PID: {process.pid})...")
                try:
                    process.terminate()
                    process.wait(timeout=10)
                    print(f"‚úÖ {name} –∑–∞–≤–µ—Ä—à–µ–Ω")
                except subprocess.TimeoutExpired:
                    print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ {name}")
                    process.kill()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {name}: {e}")
        
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            while self.running and not self.shutdown_requested:
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for name, process in self.monitor.processes.items():
                    if process and process.poll() is not None:
                        print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                        self.monitor.logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
        
        except KeyboardInterrupt:
            pass
        finally:
            self.shutdown()


def create_health_endpoint():
    """–°–æ–∑–¥–∞–Ω–∏–µ health endpoint –¥–ª—è backend"""
    health_code = """
@app.route('/api/health')
def health_check():
    '''Health check endpoint'''
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '3.0'
    })
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ app.py –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    app_py_path = Path("aml-backend/app.py")
    if app_py_path.exists():
        with open(app_py_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if '/api/health' not in content:
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
            lines = content.split('\n')
            insert_pos = -1
            for i, line in enumerate(lines):
                if line.strip().startswith('app = Flask'):
                    insert_pos = i + 1
                    break
            
            if insert_pos > 0:
                lines.insert(insert_pos, health_code)
                with open(app_py_path, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(lines))


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ï–¥–∏–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—Å–∫–∞ AML —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--backend-port', type=int, default=5000, help='–ü–æ—Ä—Ç backend —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--frontend-port', type=int, default=3000, help='–ü–æ—Ä—Ç frontend —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--workers', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    parser.add_argument('--batch-size', type=int, default=100, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--db-path', default='aml_system.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--uploads-path', default='uploads', help='–ü–∞–ø–∫–∞ —Å JSON —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--no-services', action='store_true', help='–ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å web —Å–µ—Ä–≤–∏—Å—ã')
    parser.add_argument('--no-processing', action='store_true', help='–ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã')
    parser.add_argument('--json-files', nargs='+', help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ JSON —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--log-level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'])
    parser.add_argument('--no-monitoring', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = SystemConfig(
        backend_port=args.backend_port,
        frontend_port=args.frontend_port,
        max_workers=args.workers,
        batch_size=args.batch_size,
        database_path=args.db_path,
        uploads_path=args.uploads_path,
        log_level=args.log_level,
        enable_monitoring=not args.no_monitoring
    )
    
    # –°–æ–∑–¥–∞–µ–º health endpoint
    create_health_endpoint()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∞—É–Ω—á–µ—Ä
    launcher = AMLUnifiedLauncher(config)
    
    try:
        results = launcher.run_full_pipeline(
            start_services=not args.no_services,
            process_files=not args.no_processing,
            json_files=args.json_files
        )
        
        if results.get('services_started') and not args.no_services:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            launcher.interactive_mode()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        launcher.shutdown()
        sys.exit(1)


if __name__ == "__main__":
    main()