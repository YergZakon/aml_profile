import React, { useState, useEffect } from 'react';
import { analyticsAPI } from '../services/api';

const AnalysisPage = () => {
  const [analysisData, setAnalysisData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    riskLevel: 'all',
    dateRange: '30',
    analysisType: 'all'
  });
  const [selectedTransaction, setSelectedTransaction] = useState(null);

  useEffect(() => {
    fetchAnalysisData();
  }, [filters]);

  const fetchAnalysisData = async () => {
    try {
      setLoading(true);
      const response = await analyticsAPI.getRiskAnalysis(filters);
      setAnalysisData(response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const getRiskColor = (level) => {
    switch (level?.toLowerCase()) {
      case 'high': return 'text-red-600 bg-red-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'low': return 'text-green-600 bg-green-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const formatAmount = (amount) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'KZT',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow rounded-lg p-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤</h1>
        <p className="text-gray-600">
          –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º —Ä–∏—Å–∫–∞
        </p>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white shadow rounded-lg p-6">
        <h2 className="text-lg font-semibold mb-4">–§–∏–ª—å—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            </label>
            <select
              value={filters.riskLevel}
              onChange={(e) => setFilters({...filters, riskLevel: e.target.value})}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
              <option value="high">–í—ã—Å–æ–∫–∏–π</option>
              <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
              <option value="low">–ù–∏–∑–∫–∏–π</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–µ—Ä–∏–æ–¥
            </label>
            <select
              value={filters.dateRange}
              onChange={(e) => setFilters({...filters, dateRange: e.target.value})}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="7">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</option>
              <option value="30">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</option>
              <option value="90">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π</option>
              <option value="365">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            </label>
            <select
              value={filters.analysisType}
              onChange={(e) => setFilters({...filters, analysisType: e.target.value})}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="transactional">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π</option>
              <option value="customer">–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π</option>
              <option value="network">–°–µ—Ç–µ–≤–æ–π</option>
              <option value="behavioral">–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π</option>
              <option value="geographic">–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π</option>
            </select>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white shadow rounded-lg p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <span className="text-red-600 font-bold">‚ö†Ô∏è</span>
              </div>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</p>
              <p className="text-2xl font-bold text-gray-900">
                {analysisData?.risk_summary?.high || 0}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white shadow rounded-lg p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                <span className="text-yellow-600 font-bold">‚ö°</span>
              </div>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫</p>
              <p className="text-2xl font-bold text-gray-900">
                {analysisData?.risk_summary?.medium || 0}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white shadow rounded-lg p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <span className="text-green-600 font-bold">‚úÖ</span>
              </div>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</p>
              <p className="text-2xl font-bold text-gray-900">
                {analysisData?.risk_summary?.low || 0}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white shadow rounded-lg p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <span className="text-blue-600 font-bold">üìä</span>
              </div>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</p>
              <p className="text-2xl font-bold text-gray-900">
                {analysisData?.risk_summary?.total || 0}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∞–ª–∏–∑–∞ */}
      {analysisData?.analysis_type_breakdown && filters.analysisType === 'all' && (
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∞–ª–∏–∑–∞</h2>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-blue-600">
                {analysisData.analysis_type_breakdown.transactional || 0}
              </p>
              <p className="text-sm text-gray-600">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">
                {analysisData.analysis_type_breakdown.customer || 0}
              </p>
              <p className="text-sm text-gray-600">–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-purple-600">
                {analysisData.analysis_type_breakdown.network || 0}
              </p>
              <p className="text-sm text-gray-600">–°–µ—Ç–µ–≤–æ–π</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-orange-600">
                {analysisData.analysis_type_breakdown.behavioral || 0}
              </p>
              <p className="text-sm text-gray-600">–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-red-600">
                {analysisData.analysis_type_breakdown.geographic || 0}
              </p>
              <p className="text-sm text-gray-600">–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π</p>
            </div>
          </div>
        </div>
      )}

      {/* –¢–æ–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ */}
      {analysisData?.top_risk_indicators && analysisData.top_risk_indicators.length > 0 && (
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">–¢–æ–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞</h2>
          <div className="space-y-3">
            {analysisData.top_risk_indicators.map((indicator, index) => (
              <div key={index} className="flex items-center justify-between">
                <span className="text-sm text-gray-700">{indicator.name}</span>
                <span className="text-sm font-medium text-gray-900">{indicator.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <div className="bg-white shadow rounded-lg">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">
            –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          </h2>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ID –æ–ø–µ—Ä–∞—Ü–∏–∏
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–∞—Ç–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ü–æ–ª—É—á–∞—Ç–µ–ª—å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –°—É–º–º–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –†–∏—Å–∫
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–µ–π—Å—Ç–≤–∏—è
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {analysisData?.suspicious_transactions?.map((transaction, index) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ suspicious_reasons
                const getAnalysisTypes = (reasons) => {
                  if (!reasons) return [];
                  const types = [];
                  if (reasons.includes('[–¢–†–ê–ù–ó]')) types.push('–¢');
                  if (reasons.includes('[–ö–õ–ò–ï–ù–¢]')) types.push('–ö');
                  if (reasons.includes('[–°–ï–¢–¨]')) types.push('–°');
                  if (reasons.includes('[–ü–û–í–ï–î]')) types.push('–ü');
                  if (reasons.includes('[–ì–ï–û]')) types.push('–ì');
                  return types;
                };
                
                const analysisTypes = getAnalysisTypes(transaction.suspicious_reasons);
                
                return (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {transaction.transaction_id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(transaction.transaction_date)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {transaction.sender_name || '–ù/–î'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {transaction.beneficiary_name || '–ù/–î'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {formatAmount(transaction.amount_kzt)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        transaction.final_risk_score > 7 ? 'text-red-600 bg-red-100' : 'text-yellow-600 bg-yellow-100'
                      }`}>
                        {transaction.final_risk_score.toFixed(2)}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex space-x-1">
                        {analysisTypes.map((type, i) => (
                          <span key={i} className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-700">
                            {type}
                          </span>
                        ))}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onClick={() => setSelectedTransaction(transaction)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </button>
                    </td>
                  </tr>
                );
              })}
              {(!analysisData?.suspicious_transactions || analysisData.suspicious_transactions.length === 0) && (
                <tr>
                  <td colSpan="8" className="px-6 py-4 text-center text-sm text-gray-500">
                    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
      {selectedTransaction && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-gray-900">
                  –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ {selectedTransaction.transaction_id}
                </h3>
                <button
                  onClick={() => setSelectedTransaction(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <span className="sr-only">–ó–∞–∫—Ä—ã—Ç—å</span>
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-gray-500">–°—É–º–º–∞</p>
                    <p className="text-lg font-semibold">{formatAmount(selectedTransaction.amount_kzt)}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-500">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞</p>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      selectedTransaction.final_risk_score > 7 ? 'text-red-600 bg-red-100' : 'text-yellow-600 bg-yellow-100'
                    }`}>
                      {selectedTransaction.final_risk_score.toFixed(2)}
                    </span>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-gray-500">–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</p>
                    <p className="text-sm text-gray-900">{selectedTransaction.sender_name || '–ù/–î'}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-500">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</p>
                    <p className="text-sm text-gray-900">{selectedTransaction.beneficiary_name || '–ù/–î'}</p>
                  </div>
                </div>
                
                {selectedTransaction.risk_indicators && (
                  <div>
                    <p className="text-sm font-medium text-gray-500 mb-2">–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞</p>
                    <div className="space-y-1">
                      {Object.entries(selectedTransaction.risk_indicators).map(([key, value]) => 
                        value && (
                          <p key={key} className="text-sm text-gray-900">‚Ä¢ {key}</p>
                        )
                      )}
                    </div>
                  </div>
                )}
                
                {selectedTransaction.suspicious_reasons && (
                  <div>
                    <p className="text-sm font-medium text-gray-500 mb-2">–ü—Ä–∏—á–∏–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</p>
                    <div className="space-y-1">
                      {(() => {
                        try {
                          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                          const reasons = typeof selectedTransaction.suspicious_reasons === 'string' 
                            ? JSON.parse(selectedTransaction.suspicious_reasons)
                            : selectedTransaction.suspicious_reasons;
                          
                          if (Array.isArray(reasons)) {
                            return reasons.map((reason, idx) => (
                              <p key={idx} className="text-sm text-gray-900">‚Ä¢ {reason}</p>
                            ));
                          } else {
                            // –ï—Å–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                            return selectedTransaction.suspicious_reasons.split(';').map((reason, idx) => 
                              reason.trim() && (
                                <p key={idx} className="text-sm text-gray-900">‚Ä¢ {reason.trim()}</p>
                              )
                            );
                          }
                        } catch (e) {
                          // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                          return selectedTransaction.suspicious_reasons.split(';').map((reason, idx) => 
                            reason.trim() && (
                              <p key={idx} className="text-sm text-gray-900">‚Ä¢ {reason.trim()}</p>
                            )
                          );
                        }
                      })()}
                    </div>
                  </div>
                )}
                
                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    onClick={() => setSelectedTransaction(null)}
                    className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                  <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                    –°–æ–∑–¥–∞—Ç—å –°–ü–û
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AnalysisPage; 